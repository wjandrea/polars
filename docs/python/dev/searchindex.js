Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.plot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.plot", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.plot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.plot.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.plot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.plot", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 106, 136, 154, 209, 285, 299, 523, 725, 760, 858, 918, 1094, 1246], "refer": [0, 40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 162, 225, 299, 302, 409, 412, 521, 566, 614, 646, 647, 648, 652, 760, 785, 870, 982, 985, 1115, 1200, 1201, 1202, 1206, 1246, 1250], "input": [0, 80, 86, 108, 116, 117, 157, 185, 188, 209, 213, 222, 240, 241, 244, 248, 251, 263, 273, 274, 278, 299, 307, 353, 431, 455, 515, 522, 523, 532, 555, 570, 602, 642, 643, 644, 645, 676, 678, 680, 681, 683, 686, 688, 689, 690, 698, 702, 712, 719, 720, 721, 723, 724, 725, 727, 731, 739, 742, 744, 750, 760, 772, 776, 797, 800, 827, 828, 829, 831, 835, 840, 846, 847, 851, 870, 923, 1024, 1090, 1091, 1094, 1119, 1145, 1246], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 121, 155, 164, 186, 187, 189, 190, 203, 209, 213, 216, 222, 224, 234, 236, 240, 251, 269, 273, 299, 310, 312, 314, 371, 512, 519, 520, 521, 523, 531, 543, 563, 575, 580, 582, 584, 586, 605, 621, 673, 677, 679, 681, 691, 704, 705, 723, 724, 725, 760, 772, 798, 799, 801, 802, 811, 812, 816, 817, 825, 827, 829, 846, 853, 858, 870, 877, 878, 880, 939, 1094, 1113, 1159, 1175, 1234, 1246], "seri": [0, 1, 2, 16, 30, 51, 71, 72, 81, 82, 83, 84, 88, 89, 90, 105, 107, 110, 112, 139, 141, 142, 146, 166, 175, 178, 181, 183, 186, 191, 194, 195, 196, 198, 200, 202, 210, 211, 212, 213, 217, 218, 230, 231, 232, 234, 238, 250, 251, 255, 258, 261, 262, 279, 299, 313, 314, 325, 342, 349, 350, 352, 405, 434, 437, 440, 444, 445, 453, 457, 460, 461, 464, 466, 467, 468, 480, 487, 489, 510, 512, 517, 519, 521, 523, 560, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 583, 591, 594, 605, 635, 646, 647, 648, 652, 656, 663, 664, 672, 681, 683, 687, 695, 696, 699, 700, 704, 705, 707, 708, 713, 715, 719, 720, 722, 723, 724, 725, 733, 735, 736, 739, 742, 747, 748, 751, 760, 772, 794, 798, 825, 852, 870, 1238, 1240, 1242, 1245, 1247, 1250, 1251, 1252, 1253, 1255], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 86, 87, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 133, 134, 135, 139, 140, 143, 144, 152, 297, 298, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 705, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 756, 760, 772, 781, 782, 786, 790, 791, 795, 798, 806, 807, 808, 809, 811, 812, 816, 817, 821, 824, 834, 841, 842, 843, 848, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 903, 905, 939, 940, 978, 1020, 1094, 1113, 1173, 1191, 1192, 1215, 1223, 1224, 1234, 1246, 1254, 1255], "lazyfram": [0, 1, 64, 65, 67, 69, 80, 81, 82, 83, 84, 86, 87, 88, 130, 131, 132, 133, 134, 135, 136, 139, 140, 146, 207, 223, 224, 299, 437, 512, 760, 772, 869, 873, 1254, 1255], "express": [0, 13, 58, 59, 60, 86, 87, 143, 146, 148, 157, 171, 173, 175, 185, 188, 209, 220, 224, 235, 240, 241, 244, 248, 263, 273, 274, 276, 278, 285, 299, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 325, 329, 330, 339, 342, 344, 345, 346, 353, 356, 357, 358, 359, 370, 371, 372, 374, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 431, 433, 434, 436, 437, 441, 443, 444, 446, 447, 448, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 470, 473, 474, 478, 479, 481, 482, 483, 486, 487, 492, 494, 511, 512, 517, 518, 520, 521, 522, 523, 527, 528, 529, 530, 531, 532, 534, 536, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 554, 555, 559, 560, 561, 562, 563, 565, 569, 570, 571, 573, 589, 590, 591, 593, 595, 597, 598, 600, 602, 605, 606, 608, 609, 611, 613, 614, 615, 616, 617, 619, 620, 621, 629, 630, 635, 636, 637, 638, 650, 659, 660, 663, 665, 666, 669, 670, 672, 673, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 727, 731, 733, 735, 736, 737, 738, 739, 740, 742, 744, 746, 747, 748, 750, 751, 756, 759, 772, 776, 781, 782, 789, 790, 791, 794, 797, 800, 821, 827, 828, 831, 832, 833, 835, 840, 846, 847, 848, 850, 851, 858, 870, 873, 923, 938, 948, 1008, 1024, 1057, 1058, 1061, 1094, 1119, 1139, 1145, 1146, 1160, 1162, 1163, 1168, 1169, 1170, 1171, 1173, 1183, 1184, 1246], "selector": [0, 40, 158, 165, 167, 171, 215, 222, 224, 257, 265, 267, 299, 431, 437, 711, 760, 772, 778, 786, 787, 790, 816, 841, 870], "extend": [0, 108, 271, 299, 434, 760, 772, 879, 1008, 1246], "function": [0, 40, 71, 80, 81, 82, 83, 84, 87, 89, 90, 106, 112, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 135, 139, 140, 141, 142, 144, 154, 155, 162, 170, 178, 209, 215, 223, 224, 259, 260, 264, 267, 268, 280, 285, 299, 310, 314, 370, 406, 428, 429, 430, 451, 512, 519, 520, 521, 523, 543, 555, 559, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 599, 667, 677, 681, 692, 694, 695, 696, 699, 700, 701, 702, 711, 712, 713, 715, 717, 718, 721, 723, 724, 725, 728, 729, 732, 733, 735, 741, 745, 749, 751, 756, 760, 772, 781, 782, 785, 791, 811, 812, 816, 820, 843, 850, 853, 858, 870, 880, 938, 979, 1001, 1002, 1003, 1004, 1020, 1087, 1094, 1113, 1124, 1125, 1138, 1141, 1148, 1153, 1228, 1246, 1255], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 64, 71, 72, 80, 81, 83, 88, 90, 95, 96, 100, 102, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 139, 140, 141, 142, 144, 145, 146, 148, 154, 160, 172, 184, 185, 186, 187, 188, 189, 190, 203, 204, 205, 207, 209, 222, 223, 228, 234, 235, 236, 237, 246, 254, 259, 260, 264, 273, 277, 297, 299, 310, 311, 312, 316, 317, 318, 319, 320, 321, 324, 327, 328, 329, 330, 334, 335, 338, 339, 340, 342, 344, 345, 346, 348, 349, 353, 356, 357, 358, 359, 371, 372, 377, 378, 381, 382, 383, 385, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 406, 407, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 433, 444, 446, 447, 448, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 473, 474, 478, 479, 481, 487, 492, 494, 500, 511, 513, 518, 523, 550, 551, 554, 555, 563, 565, 566, 569, 570, 571, 573, 575, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 597, 598, 599, 605, 608, 609, 611, 613, 614, 615, 616, 619, 620, 621, 635, 636, 637, 638, 646, 647, 648, 650, 652, 655, 665, 666, 667, 669, 670, 673, 676, 681, 683, 692, 703, 704, 705, 706, 707, 708, 709, 719, 720, 722, 723, 724, 725, 733, 736, 746, 747, 748, 751, 756, 760, 772, 779, 780, 781, 791, 797, 798, 799, 800, 801, 802, 820, 825, 846, 870, 877, 878, 890, 892, 893, 894, 895, 897, 903, 904, 905, 906, 908, 912, 914, 922, 923, 926, 939, 940, 946, 947, 950, 951, 952, 954, 956, 958, 959, 963, 965, 968, 970, 971, 972, 973, 975, 976, 977, 979, 980, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1006, 1007, 1020, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1051, 1052, 1053, 1054, 1056, 1062, 1067, 1069, 1075, 1086, 1088, 1094, 1106, 1113, 1115, 1119, 1120, 1122, 1135, 1137, 1148, 1153, 1159, 1160, 1162, 1163, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1189, 1190, 1191, 1192, 1200, 1201, 1202, 1204, 1206, 1209, 1226, 1227, 1228, 1229, 1231, 1236, 1245, 1246, 1254], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 95, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 125, 126, 127, 130, 131, 132, 134, 138, 139, 140, 141, 142, 145, 146, 155, 178, 184, 186, 187, 189, 190, 191, 204, 205, 209, 234, 254, 260, 262, 265, 276, 299, 310, 312, 316, 317, 318, 319, 320, 321, 324, 329, 330, 339, 342, 344, 345, 346, 348, 349, 350, 353, 356, 357, 358, 359, 371, 372, 377, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 431, 433, 444, 447, 449, 455, 456, 457, 458, 459, 460, 461, 462, 463, 474, 478, 479, 481, 487, 492, 494, 511, 512, 523, 563, 565, 569, 570, 571, 573, 575, 597, 598, 605, 608, 609, 611, 613, 614, 615, 616, 619, 620, 621, 635, 636, 637, 638, 646, 650, 665, 666, 667, 673, 681, 683, 692, 703, 704, 705, 706, 707, 708, 709, 711, 712, 719, 720, 721, 722, 723, 724, 725, 733, 736, 746, 747, 748, 751, 756, 760, 772, 781, 782, 789, 791, 798, 799, 801, 802, 806, 821, 825, 833, 841, 850, 870, 877, 878, 890, 892, 893, 894, 895, 897, 904, 906, 908, 912, 914, 916, 923, 939, 940, 946, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1006, 1018, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1051, 1052, 1053, 1054, 1056, 1062, 1067, 1069, 1086, 1087, 1106, 1113, 1119, 1120, 1122, 1148, 1159, 1160, 1162, 1163, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1189, 1190, 1191, 1192, 1200, 1204, 1226, 1227, 1229, 1237, 1246, 1254], "config": [0, 80, 240, 273, 299, 607, 631, 709, 772, 781, 827, 846, 870, 1161, 1185], "except": [0, 139, 192, 206, 208, 252, 299, 711, 772, 807, 870, 873, 1019, 1049, 1217, 1227, 1236, 1246], "test": [0, 6, 118, 119, 121, 127, 772, 803, 810, 870], "util": [0, 112, 715, 772, 791, 870], "sql": [0, 38, 64, 68, 118, 119, 205, 244, 299, 505, 592, 692, 740, 760, 772, 831, 870, 1080, 1145, 1246], "These": [1, 40, 118, 152, 264, 299, 420, 759, 760, 979, 993], "allow": [1, 13, 39, 40, 58, 59, 60, 71, 90, 95, 106, 118, 130, 133, 134, 135, 136, 146, 148, 154, 203, 206, 207, 235, 236, 238, 259, 260, 265, 277, 299, 402, 409, 412, 500, 521, 523, 568, 589, 646, 647, 648, 760, 806, 807, 811, 812, 816, 841, 848, 870, 873, 975, 982, 985, 1000, 1075, 1094, 1117, 1137, 1140, 1200, 1201, 1202, 1228, 1246, 1255], "you": [1, 15, 19, 40, 45, 60, 69, 80, 87, 88, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 122, 125, 126, 128, 130, 134, 136, 152, 172, 186, 187, 189, 190, 202, 203, 209, 220, 224, 225, 234, 235, 236, 237, 256, 259, 264, 285, 299, 302, 398, 399, 402, 405, 409, 412, 420, 431, 437, 455, 486, 512, 521, 523, 568, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 607, 620, 631, 695, 704, 709, 713, 725, 733, 736, 751, 760, 782, 787, 798, 799, 801, 802, 803, 810, 825, 833, 858, 870, 873, 971, 972, 978, 979, 982, 985, 993, 1007, 1024, 1061, 1094, 1117, 1123, 1161, 1174, 1185, 1202, 1236, 1246, 1250, 1255], "regist": [1, 64, 66, 67, 68, 69, 81, 82, 83, 84, 147, 149, 760, 1254], "custom": [1, 32, 39, 40, 81, 82, 83, 84, 147, 148, 149, 155, 209, 280, 285, 299, 314, 409, 412, 512, 519, 521, 523, 576, 577, 681, 723, 724, 725, 760, 811, 812, 853, 858, 870, 880, 982, 985, 1087, 1094, 1124, 1125, 1246, 1255], "dedic": [1, 106, 203, 236, 299], "namespac": [1, 225, 298, 299, 759, 772, 869, 1255], "underli": [1, 71, 90, 98, 105, 107, 108, 109, 111, 118, 119, 125, 126, 128, 134, 143, 146, 148, 171, 172, 203, 204, 236, 254, 299, 343, 378, 379, 383, 387, 389, 390, 391, 393, 395, 397, 400, 403, 404, 405, 407, 421, 422, 423, 424, 568, 587, 606, 610, 760, 790, 870, 873, 907, 917, 947, 948, 952, 956, 958, 959, 963, 965, 968, 970, 973, 976, 977, 978, 980, 994, 995, 996, 997, 1007, 1117, 1135, 1148, 1160, 1164, 1222, 1227, 1246], "polar": [1, 299, 302, 759, 760, 766, 772, 870, 873, 1246, 1250, 1254], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 144, 237, 260, 299, 747, 756, 760, 766, 772, 870, 1226, 1227, 1246, 1254], "without": [1, 87, 112, 120, 123, 129, 131, 132, 136, 267, 268, 299, 314, 370, 406, 451, 578, 579, 580, 581, 582, 584, 585, 586, 607, 631, 739, 760, 782, 843, 870, 915, 918, 938, 979, 1020, 1113, 1161, 1185, 1227, 1246], "requir": [1, 39, 40, 45, 60, 80, 110, 118, 119, 139, 140, 141, 142, 157, 162, 235, 260, 263, 299, 340, 428, 429, 430, 513, 523, 594, 646, 647, 648, 670, 736, 760, 776, 835, 840, 870, 905, 1002, 1003, 1004, 1088, 1147, 1200, 1201, 1202, 1227, 1228, 1231, 1246, 1250], "subclass": [1, 299], "mixin": 1, "expr": [1, 80, 81, 82, 83, 84, 171, 173, 205, 206, 220, 224, 235, 240, 241, 273, 274, 299, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 760, 761, 762, 765, 766, 767, 768, 769, 790, 792, 806, 807, 822, 827, 828, 829, 832, 846, 847, 870, 938, 948, 975, 993, 1009, 1014, 1057, 1058, 1061, 1066, 1081, 1084, 1146, 1160, 1166, 1193, 1218, 1246], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 69, 71, 80, 87, 88, 89, 90, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 146, 152, 154, 157, 162, 167, 170, 173, 177, 178, 184, 185, 186, 187, 188, 189, 190, 203, 205, 206, 207, 209, 215, 216, 222, 224, 234, 235, 236, 237, 240, 241, 242, 244, 248, 255, 260, 263, 268, 269, 273, 274, 278, 299, 310, 312, 327, 353, 361, 363, 364, 406, 420, 425, 427, 428, 429, 430, 455, 457, 460, 461, 464, 466, 467, 468, 471, 476, 505, 512, 521, 522, 551, 555, 563, 566, 569, 570, 571, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 592, 596, 599, 601, 602, 616, 617, 618, 619, 626, 627, 628, 650, 655, 661, 677, 678, 680, 686, 688, 689, 690, 691, 692, 694, 698, 702, 704, 705, 707, 708, 727, 731, 739, 742, 744, 747, 748, 750, 752, 753, 755, 759, 760, 761, 762, 765, 766, 767, 768, 769, 772, 776, 781, 782, 787, 791, 792, 797, 798, 799, 800, 801, 802, 803, 806, 807, 810, 812, 816, 817, 821, 823, 825, 827, 828, 830, 831, 835, 840, 843, 846, 847, 848, 851, 870, 873, 877, 878, 892, 915, 923, 932, 933, 979, 993, 999, 1001, 1002, 1003, 1004, 1017, 1024, 1028, 1032, 1033, 1037, 1038, 1039, 1040, 1047, 1051, 1080, 1087, 1113, 1115, 1119, 1120, 1131, 1145, 1150, 1153, 1170, 1171, 1172, 1180, 1181, 1182, 1202, 1204, 1209, 1216, 1228, 1236, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1255], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 66, 80, 86, 105, 108, 110, 111, 116, 117, 120, 121, 122, 124, 127, 128, 130, 133, 134, 143, 144, 148, 152, 158, 164, 167, 174, 192, 198, 200, 202, 203, 204, 205, 207, 208, 213, 215, 219, 220, 228, 235, 236, 237, 241, 247, 251, 252, 257, 259, 265, 267, 268, 269, 274, 276, 299, 311, 313, 341, 359, 370, 375, 376, 377, 431, 436, 442, 449, 452, 454, 457, 461, 467, 468, 470, 474, 485, 486, 492, 508, 512, 520, 521, 539, 542, 543, 544, 545, 546, 547, 553, 561, 566, 570, 572, 577, 594, 600, 602, 608, 609, 615, 616, 617, 618, 619, 624, 629, 630, 634, 640, 641, 642, 643, 660, 678, 692, 695, 696, 697, 698, 701, 702, 704, 711, 713, 718, 719, 735, 742, 743, 744, 750, 760, 766, 772, 778, 781, 782, 787, 789, 791, 793, 806, 811, 812, 816, 821, 828, 833, 834, 841, 843, 847, 848, 850, 870, 873, 938, 940, 943, 944, 946, 1019, 1026, 1044, 1049, 1060, 1061, 1067, 1083, 1087, 1115, 1119, 1125, 1154, 1162, 1163, 1169, 1170, 1171, 1172, 1173, 1178, 1183, 1184, 1188, 1194, 1195, 1196, 1197, 1217, 1246, 1254, 1255], "support": [1, 39, 40, 45, 88, 105, 106, 107, 108, 109, 110, 111, 112, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 135, 143, 148, 152, 203, 204, 205, 206, 210, 212, 217, 236, 237, 247, 248, 250, 256, 260, 299, 506, 555, 570, 600, 602, 631, 635, 756, 760, 766, 806, 807, 834, 835, 870, 873, 1081, 1119, 1154, 1185, 1189, 1228, 1246, 1254], "target": [1, 38, 39, 40, 85, 121, 299, 614, 646, 647, 648, 873, 1168, 1200, 1201, 1202], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 64, 65, 69, 71, 80, 86, 87, 88, 90, 105, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 160, 162, 167, 168, 170, 172, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 214, 215, 216, 217, 219, 220, 222, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 240, 241, 244, 245, 247, 249, 250, 253, 254, 256, 259, 260, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 280, 285, 298, 299, 310, 313, 314, 315, 324, 336, 337, 340, 347, 349, 350, 353, 365, 366, 367, 368, 369, 370, 371, 377, 378, 390, 398, 399, 402, 405, 406, 409, 412, 420, 423, 427, 433, 449, 451, 453, 454, 455, 458, 460, 462, 465, 470, 482, 486, 487, 492, 495, 500, 501, 502, 503, 504, 505, 507, 510, 512, 513, 516, 517, 519, 520, 521, 522, 523, 527, 528, 529, 530, 531, 532, 542, 544, 545, 546, 547, 548, 549, 551, 555, 561, 563, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 589, 591, 592, 593, 594, 595, 600, 601, 602, 607, 608, 614, 618, 622, 623, 624, 625, 626, 627, 628, 631, 633, 634, 640, 641, 642, 643, 644, 645, 649, 655, 657, 660, 663, 664, 668, 670, 671, 672, 673, 677, 681, 682, 689, 692, 694, 695, 699, 701, 702, 711, 712, 713, 715, 717, 718, 721, 723, 725, 728, 729, 732, 733, 739, 741, 745, 749, 750, 751, 756, 760, 772, 773, 775, 776, 777, 780, 781, 782, 787, 789, 791, 797, 798, 799, 800, 801, 802, 804, 806, 807, 811, 812, 816, 817, 821, 823, 825, 827, 828, 829, 831, 832, 833, 834, 835, 839, 840, 841, 843, 846, 847, 848, 849, 850, 853, 858, 869, 870, 873, 879, 880, 889, 901, 902, 905, 911, 914, 916, 917, 918, 923, 926, 934, 935, 936, 937, 938, 939, 946, 947, 948, 959, 971, 972, 975, 978, 979, 982, 985, 993, 996, 1001, 1006, 1007, 1015, 1016, 1018, 1020, 1025, 1029, 1031, 1032, 1034, 1035, 1041, 1043, 1045, 1046, 1057, 1061, 1062, 1067, 1070, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1085, 1088, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1107, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1126, 1127, 1129, 1132, 1133, 1134, 1137, 1138, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1154, 1155, 1157, 1161, 1162, 1168, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1187, 1188, 1194, 1195, 1196, 1197, 1202, 1203, 1209, 1210, 1212, 1215, 1216, 1218, 1219, 1222, 1224, 1226, 1227, 1228, 1230, 1231, 1233, 1234, 1235, 1236, 1246, 1250, 1254, 1255], "featur": [1, 45, 49, 51, 85, 299], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 64, 69, 71, 80, 85, 86, 87, 88, 90, 92, 94, 95, 97, 101, 103, 105, 106, 107, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 156, 157, 160, 164, 167, 169, 170, 172, 175, 179, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 220, 222, 223, 224, 232, 234, 235, 236, 237, 238, 241, 244, 247, 248, 249, 250, 252, 254, 259, 260, 263, 264, 265, 267, 268, 269, 270, 274, 276, 277, 285, 298, 299, 307, 310, 312, 313, 314, 315, 325, 328, 332, 370, 371, 375, 376, 377, 379, 389, 402, 406, 409, 420, 428, 429, 430, 433, 437, 449, 451, 453, 455, 471, 477, 485, 486, 489, 490, 500, 505, 506, 510, 512, 516, 521, 523, 527, 530, 531, 532, 555, 563, 566, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 589, 590, 591, 592, 595, 596, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 614, 615, 616, 619, 620, 624, 626, 627, 628, 629, 631, 634, 635, 638, 640, 641, 642, 643, 646, 647, 648, 650, 652, 655, 673, 674, 677, 679, 682, 687, 689, 691, 692, 693, 694, 695, 696, 699, 700, 704, 705, 707, 708, 711, 713, 717, 718, 719, 722, 725, 728, 729, 732, 733, 736, 737, 738, 739, 741, 745, 747, 748, 749, 750, 751, 756, 760, 775, 776, 780, 781, 782, 787, 789, 791, 794, 797, 798, 799, 800, 801, 802, 805, 806, 807, 809, 811, 812, 816, 817, 821, 825, 828, 829, 831, 833, 834, 835, 836, 840, 841, 843, 844, 847, 850, 853, 858, 870, 873, 877, 878, 879, 880, 893, 897, 915, 918, 923, 926, 938, 939, 940, 943, 944, 946, 948, 958, 975, 979, 982, 993, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1011, 1017, 1018, 1019, 1020, 1025, 1027, 1034, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1052, 1060, 1061, 1064, 1065, 1075, 1080, 1081, 1085, 1087, 1094, 1113, 1115, 1117, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1143, 1145, 1149, 1150, 1153, 1154, 1157, 1159, 1160, 1161, 1162, 1163, 1168, 1169, 1170, 1173, 1174, 1178, 1180, 1181, 1182, 1183, 1185, 1188, 1189, 1192, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1204, 1206, 1209, 1217, 1222, 1227, 1228, 1234, 1235, 1236, 1246, 1254, 1255], "primarili": 1, "intend": [1, 139, 140, 141, 142, 655, 1209], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 60, 64, 65, 66, 67, 69, 71, 72, 80, 87, 88, 89, 90, 106, 108, 109, 111, 113, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 155, 156, 158, 165, 167, 173, 174, 175, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 203, 204, 206, 209, 210, 212, 215, 217, 219, 220, 222, 223, 224, 225, 234, 235, 236, 237, 238, 240, 241, 245, 248, 249, 250, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 273, 274, 275, 276, 278, 285, 299, 302, 308, 310, 312, 314, 315, 325, 343, 344, 350, 354, 355, 370, 375, 376, 382, 384, 388, 392, 394, 396, 401, 405, 406, 408, 409, 412, 420, 423, 425, 428, 429, 430, 431, 436, 437, 451, 454, 455, 471, 486, 500, 512, 521, 522, 523, 526, 555, 563, 566, 568, 571, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 589, 591, 593, 594, 599, 601, 602, 604, 606, 607, 610, 611, 612, 614, 615, 617, 618, 620, 621, 629, 631, 635, 637, 639, 642, 643, 644, 645, 646, 647, 648, 652, 655, 674, 675, 677, 678, 679, 680, 682, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 704, 705, 706, 707, 708, 709, 711, 713, 715, 719, 722, 725, 726, 727, 730, 731, 733, 736, 737, 738, 739, 741, 742, 743, 744, 747, 748, 749, 750, 751, 756, 759, 760, 771, 772, 775, 778, 781, 782, 786, 787, 791, 792, 793, 794, 797, 798, 799, 801, 802, 803, 807, 809, 810, 816, 825, 827, 828, 832, 835, 836, 841, 843, 844, 846, 847, 849, 850, 851, 858, 870, 873, 877, 878, 880, 907, 908, 916, 918, 924, 925, 938, 939, 943, 944, 951, 953, 957, 964, 966, 969, 974, 978, 979, 981, 982, 985, 993, 996, 999, 1002, 1003, 1004, 1009, 1010, 1014, 1017, 1020, 1023, 1024, 1025, 1031, 1034, 1041, 1043, 1045, 1047, 1061, 1075, 1087, 1093, 1094, 1113, 1115, 1117, 1120, 1123, 1125, 1137, 1138, 1141, 1143, 1146, 1147, 1153, 1157, 1160, 1161, 1164, 1165, 1168, 1169, 1171, 1172, 1174, 1175, 1183, 1185, 1189, 1191, 1200, 1201, 1202, 1206, 1209, 1218, 1223, 1225, 1226, 1227, 1228, 1235, 1236, 1246, 1250, 1254, 1255], "librari": [1, 98, 118, 121, 521, 760, 1255], "author": 1, "domain": [1, 615, 1169], "specif": [1, 35, 39, 40, 105, 107, 109, 111, 116, 119, 120, 121, 125, 126, 127, 131, 145, 146, 158, 203, 299, 409, 412, 646, 647, 648, 652, 778, 870, 873, 982, 985, 1200, 1201, 1202, 1206, 1246, 1255], "capabl": [1, 40, 299], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 71, 80, 81, 82, 83, 84, 108, 116, 117, 118, 119, 120, 121, 130, 131, 132, 139, 140, 147, 149, 157, 158, 167, 172, 173, 185, 186, 187, 188, 189, 190, 196, 206, 234, 259, 263, 265, 269, 299, 310, 402, 406, 409, 420, 434, 455, 457, 461, 464, 466, 467, 468, 512, 521, 523, 532, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 628, 650, 704, 705, 707, 708, 709, 747, 748, 750, 760, 776, 778, 787, 789, 798, 799, 801, 802, 807, 825, 829, 840, 841, 870, 975, 979, 982, 993, 1007, 1008, 1024, 1028, 1033, 1037, 1038, 1039, 1040, 1087, 1123, 1141, 1182, 1204, 1227, 1246, 1255], "mai": [1, 39, 49, 51, 60, 87, 88, 105, 107, 108, 109, 111, 116, 118, 120, 122, 125, 126, 131, 132, 133, 134, 136, 139, 141, 164, 170, 172, 186, 206, 209, 234, 245, 260, 267, 268, 269, 299, 314, 370, 377, 378, 390, 402, 406, 420, 431, 451, 489, 510, 512, 521, 523, 531, 575, 578, 579, 580, 581, 582, 584, 585, 586, 593, 620, 695, 696, 699, 700, 704, 705, 707, 708, 713, 735, 747, 748, 760, 781, 782, 791, 798, 807, 811, 812, 825, 832, 843, 849, 850, 853, 858, 870, 917, 918, 938, 940, 946, 947, 959, 975, 979, 993, 1001, 1007, 1020, 1064, 1094, 1113, 1146, 1174, 1202, 1227, 1246, 1255], "exist": [1, 38, 39, 40, 80, 120, 131, 146, 264, 268, 273, 274, 299, 309, 342, 345, 346, 379, 522, 760, 823, 843, 846, 847, 870, 873, 948, 1093, 1246], "belong": [1, 186, 299, 798, 870], "core": [1, 260, 299, 1255], "cannot": [1, 116, 117, 121, 122, 124, 127, 128, 150, 209, 237, 238, 276, 285, 299, 343, 431, 500, 523, 589, 610, 637, 658, 725, 760, 833, 850, 858, 870, 907, 1075, 1094, 1137, 1164, 1191, 1246], "overrid": [1, 40, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 125, 126, 127, 143, 144, 148, 150, 299, 522, 760, 870, 1093, 1246], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 105, 106, 107, 108, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 146, 147, 148, 149, 152, 157, 158, 161, 164, 165, 166, 167, 168, 170, 171, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 190, 192, 194, 198, 200, 201, 203, 205, 206, 210, 212, 214, 215, 216, 217, 219, 220, 222, 224, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 242, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 307, 308, 309, 342, 344, 345, 346, 349, 371, 374, 380, 402, 405, 406, 409, 412, 420, 431, 433, 437, 439, 443, 444, 447, 453, 455, 480, 481, 490, 491, 492, 506, 509, 512, 520, 523, 531, 533, 534, 536, 543, 544, 545, 546, 547, 552, 555, 559, 561, 563, 569, 570, 572, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 594, 601, 602, 656, 657, 658, 660, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 756, 760, 767, 776, 778, 781, 782, 783, 785, 786, 787, 789, 790, 791, 794, 797, 798, 799, 801, 802, 804, 806, 807, 816, 817, 821, 823, 824, 825, 826, 829, 830, 832, 833, 834, 835, 840, 841, 842, 843, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 876, 912, 914, 939, 940, 949, 975, 978, 979, 982, 985, 993, 1006, 1010, 1055, 1056, 1057, 1058, 1067, 1087, 1103, 1104, 1113, 1118, 1119, 1141, 1142, 1210, 1212, 1213, 1223, 1224, 1225, 1234, 1246, 1251, 1254, 1255], "dt": [1, 80, 121, 127, 234, 299, 575, 709, 760, 769, 825, 870, 873, 1253], "attempt": [1, 259, 299], "do": [1, 40, 58, 59, 60, 80, 86, 87, 116, 130, 139, 140, 141, 142, 172, 186, 187, 189, 190, 202, 206, 224, 234, 254, 264, 267, 299, 370, 486, 521, 555, 575, 641, 642, 643, 733, 736, 751, 760, 781, 782, 789, 798, 799, 801, 802, 807, 811, 812, 821, 825, 833, 870, 873, 938, 1007, 1061, 1195, 1196, 1197, 1236, 1246], "so": [1, 118, 119, 130, 150, 184, 186, 187, 189, 190, 224, 234, 299, 325, 332, 455, 490, 512, 523, 575, 631, 641, 642, 643, 760, 798, 799, 801, 802, 825, 870, 897, 1065, 1185, 1195, 1196, 1197], "rais": [1, 20, 21, 25, 39, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 121, 127, 130, 139, 141, 154, 224, 235, 299, 343, 405, 406, 420, 489, 510, 531, 563, 606, 610, 628, 646, 647, 648, 650, 652, 706, 722, 760, 907, 978, 979, 993, 1064, 1085, 1113, 1160, 1164, 1182, 1200, 1201, 1202, 1204, 1206, 1227, 1236, 1246], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 81, 83, 84, 86, 87, 90, 95, 96, 98, 105, 116, 117, 118, 119, 120, 121, 123, 127, 128, 130, 132, 133, 144, 146, 148, 158, 159, 160, 170, 173, 178, 186, 187, 189, 190, 202, 203, 204, 206, 209, 220, 224, 231, 232, 234, 235, 254, 259, 264, 267, 268, 273, 276, 285, 299, 309, 332, 339, 343, 348, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 379, 380, 402, 405, 409, 423, 434, 436, 437, 443, 444, 447, 470, 482, 483, 486, 489, 490, 510, 511, 512, 520, 521, 523, 532, 542, 543, 562, 563, 571, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 606, 610, 615, 617, 646, 647, 648, 650, 652, 663, 669, 677, 683, 687, 692, 704, 705, 707, 708, 710, 712, 715, 719, 720, 721, 722, 733, 735, 736, 739, 742, 747, 748, 750, 751, 756, 760, 772, 778, 779, 780, 781, 782, 789, 791, 794, 798, 799, 801, 802, 807, 812, 821, 825, 833, 843, 846, 848, 850, 858, 870, 873, 897, 904, 907, 912, 922, 924, 925, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 948, 982, 996, 1001, 1008, 1034, 1046, 1057, 1058, 1061, 1064, 1065, 1085, 1086, 1094, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1138, 1141, 1160, 1164, 1169, 1171, 1200, 1201, 1202, 1204, 1206, 1227, 1236, 1246, 1254], "attributeerror": 1, "howev": [1, 108, 118, 170, 209, 259, 299, 1001, 1246], "can": [1, 19, 32, 40, 45, 48, 69, 71, 72, 80, 89, 90, 96, 108, 116, 117, 118, 121, 122, 127, 128, 130, 133, 135, 136, 144, 145, 146, 148, 150, 152, 157, 159, 167, 168, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 209, 220, 224, 225, 234, 237, 240, 248, 259, 263, 264, 267, 273, 276, 285, 299, 302, 310, 314, 361, 364, 370, 398, 399, 402, 405, 420, 434, 437, 455, 470, 486, 512, 521, 523, 531, 539, 542, 544, 545, 546, 547, 555, 561, 563, 568, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 591, 594, 596, 599, 602, 607, 619, 631, 641, 642, 643, 646, 660, 686, 713, 715, 719, 725, 750, 756, 759, 760, 771, 776, 781, 787, 789, 791, 798, 799, 801, 802, 825, 827, 829, 835, 840, 846, 849, 850, 870, 873, 880, 918, 938, 939, 971, 972, 975, 978, 979, 993, 1008, 1024, 1061, 1087, 1094, 1099, 1113, 1117, 1119, 1123, 1138, 1141, 1143, 1147, 1150, 1153, 1161, 1162, 1163, 1170, 1173, 1185, 1195, 1196, 1197, 1200, 1202, 1227, 1246, 1250, 1254], "other": [1, 25, 40, 45, 69, 87, 116, 117, 118, 130, 139, 140, 141, 142, 167, 169, 172, 175, 179, 205, 206, 215, 216, 235, 237, 240, 241, 268, 271, 273, 274, 297, 299, 307, 311, 313, 325, 353, 374, 426, 427, 437, 441, 446, 448, 455, 460, 473, 480, 501, 502, 503, 504, 518, 527, 530, 538, 540, 550, 551, 554, 570, 602, 659, 667, 669, 676, 678, 680, 688, 689, 690, 698, 702, 704, 727, 731, 739, 742, 744, 760, 772, 782, 787, 794, 806, 807, 816, 817, 827, 828, 843, 846, 847, 848, 870, 873, 879, 923, 942, 1000, 1007, 1032, 1055, 1076, 1077, 1078, 1079, 1119, 1140, 1229, 1237, 1245, 1246], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 64, 66, 71, 80, 85, 88, 90, 116, 117, 120, 122, 124, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 148, 152, 155, 167, 172, 186, 189, 191, 203, 205, 206, 209, 210, 212, 217, 224, 234, 236, 237, 250, 256, 258, 259, 268, 269, 285, 299, 308, 310, 312, 314, 325, 352, 353, 402, 410, 431, 440, 449, 470, 523, 542, 544, 545, 546, 547, 555, 561, 568, 578, 579, 580, 581, 582, 584, 585, 586, 607, 631, 660, 671, 704, 705, 725, 760, 781, 787, 798, 799, 801, 802, 803, 806, 807, 810, 825, 843, 858, 870, 877, 878, 879, 920, 923, 939, 975, 1007, 1013, 1018, 1034, 1094, 1113, 1117, 1161, 1185, 1222, 1225, 1246, 1254, 1255], "gener": [1, 118, 119, 137, 143, 144, 145, 146, 148, 154, 162, 224, 238, 257, 259, 264, 299, 500, 589, 595, 683, 692, 704, 707, 719, 720, 736, 747, 748, 760, 870, 1075, 1137, 1149, 1223, 1246, 1255], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 760, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1180, 1181, 1183, 1184, 1185, 1186, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1215, 1216, 1217, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1246, 1250, 1254, 1255], "register_expr_namespac": [1, 81, 83, 84], "greet": 1, "def": [1, 71, 81, 82, 83, 84, 144, 145, 146, 148, 152, 223, 264, 299, 307, 559, 615, 643, 676, 724, 760, 782, 820, 870, 873, 1169, 1255], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 1254], "self": [1, 65, 66, 67, 69, 81, 82, 83, 84, 86, 87, 159, 160, 164, 172, 192, 194, 195, 196, 208, 210, 212, 214, 215, 217, 221, 222, 224, 227, 228, 230, 231, 232, 238, 246, 247, 249, 250, 252, 257, 264, 266, 269, 270, 271, 275, 276, 277, 299, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 341, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 537, 538, 539, 540, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 756, 760, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 870, 879, 880, 912, 926, 1007, 1011, 1021, 1092, 1093, 1094, 1105, 1109, 1110, 1116, 1119, 1138, 1141, 1143, 1155, 1233, 1237, 1246], "_expr": [1, 82], "hello": [1, 25, 65, 68, 641, 642, 643, 1067, 1195, 1196, 1197], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 64, 68, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 99, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 145, 155, 157, 159, 162, 163, 166, 168, 170, 171, 172, 173, 174, 177, 178, 180, 181, 184, 185, 186, 188, 189, 192, 194, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 218, 219, 220, 222, 223, 224, 234, 235, 236, 237, 238, 251, 252, 253, 259, 260, 263, 264, 265, 269, 273, 274, 281, 283, 285, 288, 293, 299, 310, 312, 316, 317, 318, 319, 320, 321, 324, 325, 329, 330, 332, 339, 342, 344, 345, 346, 347, 356, 357, 358, 359, 371, 372, 377, 381, 382, 383, 385, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 433, 444, 445, 447, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 474, 475, 478, 479, 481, 487, 489, 490, 491, 492, 494, 495, 500, 509, 510, 511, 517, 522, 532, 534, 539, 559, 563, 565, 569, 570, 571, 573, 589, 590, 596, 597, 598, 605, 608, 609, 611, 613, 614, 615, 616, 619, 620, 621, 622, 623, 625, 626, 627, 632, 633, 635, 636, 637, 638, 650, 655, 662, 664, 665, 666, 668, 669, 671, 672, 673, 676, 677, 681, 683, 684, 685, 686, 687, 692, 694, 703, 704, 705, 706, 707, 708, 709, 712, 715, 717, 719, 720, 721, 722, 723, 724, 725, 733, 736, 739, 742, 745, 746, 747, 748, 750, 751, 760, 776, 779, 781, 782, 784, 788, 789, 791, 796, 798, 799, 801, 802, 803, 806, 809, 810, 812, 820, 821, 825, 829, 833, 838, 839, 840, 841, 846, 847, 854, 856, 861, 866, 870, 877, 878, 879, 887, 888, 890, 891, 892, 893, 894, 895, 897, 904, 906, 908, 911, 915, 918, 922, 939, 940, 946, 950, 951, 952, 954, 956, 958, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 975, 976, 977, 979, 980, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1006, 1007, 1015, 1017, 1019, 1020, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1062, 1064, 1065, 1066, 1067, 1069, 1070, 1075, 1084, 1085, 1086, 1092, 1093, 1094, 1099, 1106, 1113, 1119, 1120, 1121, 1122, 1123, 1137, 1139, 1140, 1150, 1159, 1160, 1162, 1163, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1186, 1187, 1189, 1190, 1191, 1192, 1204, 1209, 1217, 1219, 1230, 1232, 1233, 1234, 1237, 1246, 1254, 1255], "lit": [1, 309, 342, 455, 470, 542, 695, 699, 713, 733, 736, 751, 760, 1010, 1246], "alia": [1, 17, 79, 80, 82, 84, 186, 208, 224, 234, 266, 273, 276, 299, 307, 311, 342, 344, 345, 346, 347, 360, 361, 362, 363, 364, 371, 373, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 391, 393, 395, 397, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 417, 419, 420, 421, 422, 423, 424, 426, 427, 439, 441, 446, 448, 453, 455, 459, 463, 470, 473, 475, 518, 523, 527, 528, 529, 530, 532, 535, 538, 540, 542, 550, 551, 554, 556, 560, 563, 566, 568, 588, 590, 606, 607, 609, 612, 614, 615, 620, 621, 631, 632, 635, 636, 637, 638, 639, 644, 645, 656, 657, 658, 659, 667, 668, 669, 675, 676, 683, 684, 685, 688, 689, 690, 692, 704, 707, 709, 710, 713, 714, 719, 724, 725, 735, 742, 747, 750, 760, 798, 804, 810, 825, 842, 846, 850, 870, 939, 946, 947, 949, 952, 954, 955, 956, 962, 963, 965, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 982, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1049, 1113, 1118, 1168, 1169, 1191, 1192, 1246], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 65, 68, 607, 631, 641, 642, 643, 653, 1067, 1161, 1185, 1195, 1196, 1197, 1207], "select": [1, 13, 38, 64, 65, 66, 80, 81, 82, 83, 115, 116, 117, 118, 119, 120, 122, 124, 128, 130, 136, 145, 201, 202, 206, 209, 220, 223, 235, 241, 247, 261, 266, 269, 276, 299, 306, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 334, 335, 338, 339, 340, 341, 342, 345, 346, 347, 349, 351, 352, 356, 357, 358, 359, 370, 372, 373, 374, 375, 376, 378, 379, 380, 389, 390, 398, 399, 402, 405, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 438, 440, 442, 445, 449, 451, 452, 453, 454, 456, 457, 461, 469, 470, 471, 472, 474, 486, 487, 512, 514, 515, 516, 517, 521, 523, 524, 525, 526, 537, 539, 541, 542, 548, 549, 552, 553, 554, 557, 558, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 577, 583, 587, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 613, 614, 615, 616, 646, 656, 658, 661, 665, 666, 668, 670, 671, 672, 673, 674, 677, 679, 682, 684, 685, 686, 687, 689, 691, 692, 693, 694, 697, 709, 711, 712, 713, 714, 715, 717, 719, 721, 726, 728, 729, 730, 732, 735, 736, 740, 741, 742, 743, 745, 749, 756, 760, 783, 807, 820, 828, 829, 834, 842, 848, 850, 870, 873, 903, 905, 978, 1014, 1061, 1138, 1141, 1154, 1173, 1200, 1218, 1246, 1254], "shapecolumn_0": [1, 209, 264, 299], "register_dataframe_namespac": [1, 82, 83, 84], "split": [1, 40, 81, 204, 299, 637, 638, 1191, 1192], "splitfram": [1, 81], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 65, 81, 82, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 130, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 178, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 705, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 739, 740, 741, 742, 743, 744, 745, 748, 749, 750, 756, 760, 798, 825, 829, 842, 843, 856, 858, 866, 870, 873, 903, 905, 978, 1173, 1184, 1191, 1192, 1224, 1246, 1255], "_df": [1, 81], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 64, 68, 72, 80, 81, 83, 86, 87, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 144, 145, 146, 148, 161, 165, 168, 170, 171, 175, 183, 185, 186, 194, 203, 219, 222, 235, 236, 237, 240, 248, 255, 256, 264, 265, 266, 267, 273, 278, 279, 299, 308, 339, 340, 371, 433, 439, 444, 452, 460, 519, 521, 523, 532, 533, 555, 563, 569, 571, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 601, 602, 615, 636, 656, 658, 663, 667, 686, 689, 705, 708, 710, 718, 720, 722, 725, 740, 742, 748, 760, 783, 788, 790, 794, 797, 798, 827, 835, 841, 842, 846, 848, 851, 852, 870, 873, 904, 905, 921, 939, 1001, 1006, 1011, 1014, 1016, 1020, 1021, 1032, 1113, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1139, 1161, 1169, 1185, 1190, 1218, 1226, 1229, 1246, 1255], "with_row_index": [1, 275, 299, 578, 579, 581, 584, 585, 586, 760, 849, 870, 1138, 1246], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 65, 66, 67, 68, 69, 72, 81, 82, 83, 84, 88, 94, 105, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 157, 158, 161, 165, 166, 167, 171, 175, 176, 177, 181, 182, 184, 185, 188, 201, 202, 203, 205, 206, 209, 211, 213, 215, 216, 218, 222, 224, 229, 235, 236, 237, 239, 240, 241, 248, 251, 255, 257, 259, 262, 263, 264, 265, 266, 267, 268, 273, 274, 275, 276, 277, 278, 299, 309, 314, 342, 344, 345, 346, 371, 431, 437, 455, 464, 466, 467, 468, 470, 512, 520, 523, 531, 533, 535, 555, 561, 563, 572, 602, 615, 616, 656, 658, 660, 677, 678, 679, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 697, 698, 701, 702, 711, 712, 717, 718, 721, 726, 727, 728, 730, 731, 732, 734, 737, 738, 739, 741, 742, 743, 744, 745, 749, 750, 756, 760, 776, 778, 783, 786, 787, 790, 794, 797, 800, 806, 807, 816, 817, 823, 826, 827, 828, 829, 835, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 870, 873, 876, 922, 939, 1087, 1113, 1118, 1168, 1169, 1170, 1183, 1210, 1213, 1223, 1224, 1228, 1246, 1254, 1255], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 66, 67, 81, 82, 83, 84, 114, 116, 117, 130, 155, 159, 172, 180, 186, 192, 203, 204, 208, 209, 236, 237, 238, 244, 245, 249, 252, 253, 256, 258, 270, 283, 293, 299, 347, 370, 373, 378, 379, 386, 411, 423, 434, 437, 445, 450, 475, 484, 491, 500, 501, 505, 509, 512, 556, 559, 569, 584, 586, 589, 592, 593, 599, 604, 620, 621, 629, 637, 638, 641, 642, 648, 662, 664, 668, 669, 674, 676, 691, 693, 704, 705, 706, 707, 708, 709, 715, 717, 733, 736, 737, 738, 741, 745, 749, 751, 760, 779, 781, 796, 798, 803, 810, 831, 832, 836, 838, 839, 844, 856, 866, 870, 873, 911, 922, 938, 941, 947, 948, 955, 984, 996, 1007, 1008, 1015, 1019, 1049, 1059, 1066, 1075, 1076, 1080, 1084, 1087, 1108, 1132, 1134, 1137, 1145, 1146, 1153, 1157, 1174, 1175, 1183, 1191, 1192, 1202, 1217, 1219, 1225, 1230, 1235, 1246, 1254, 1255], "filter": [1, 81, 120, 130, 131, 136, 167, 198, 199, 200, 205, 224, 285, 299, 531, 533, 612, 639, 675, 713, 750, 760, 787, 791, 804, 806, 858, 870, 873, 1141, 1246], "col": [1, 17, 37, 40, 58, 80, 81, 82, 83, 109, 111, 130, 144, 146, 175, 185, 186, 199, 201, 207, 209, 220, 223, 224, 234, 235, 240, 248, 266, 267, 273, 278, 299, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 448, 451, 453, 454, 455, 456, 459, 460, 463, 464, 466, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 687, 688, 689, 690, 692, 694, 697, 709, 711, 712, 713, 714, 715, 716, 717, 718, 721, 726, 728, 729, 730, 732, 734, 735, 741, 743, 745, 749, 750, 760, 780, 794, 797, 798, 804, 809, 820, 825, 827, 835, 842, 846, 848, 851, 870, 873, 903, 905, 975, 978, 1061, 1120, 1138, 1141, 1173, 1200, 1246, 1255], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 60, 61, 64, 69, 80, 81, 82, 84, 88, 90, 106, 116, 117, 118, 119, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 138, 143, 144, 145, 146, 148, 154, 155, 158, 159, 160, 162, 163, 164, 165, 168, 169, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 224, 226, 227, 231, 232, 236, 237, 238, 239, 240, 245, 247, 248, 249, 250, 251, 253, 257, 258, 259, 260, 261, 264, 267, 269, 270, 273, 275, 276, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 299, 306, 308, 309, 311, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 329, 330, 332, 348, 351, 352, 354, 355, 356, 357, 358, 360, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 381, 382, 384, 387, 388, 391, 392, 393, 394, 395, 396, 400, 401, 405, 407, 408, 410, 415, 416, 418, 419, 420, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 440, 441, 445, 446, 448, 449, 451, 454, 457, 458, 461, 462, 464, 465, 466, 467, 468, 470, 471, 473, 478, 479, 482, 483, 486, 489, 490, 495, 497, 510, 512, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 532, 537, 538, 540, 542, 548, 549, 550, 551, 553, 554, 556, 559, 560, 561, 563, 564, 565, 566, 570, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 596, 597, 598, 599, 603, 604, 608, 609, 614, 615, 618, 622, 623, 624, 625, 628, 633, 634, 640, 646, 648, 659, 660, 661, 663, 664, 665, 666, 667, 669, 674, 675, 677, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 699, 701, 702, 704, 706, 710, 711, 713, 719, 720, 723, 725, 728, 729, 734, 735, 740, 746, 747, 748, 749, 750, 751, 756, 760, 778, 779, 780, 784, 786, 788, 792, 793, 796, 797, 798, 799, 800, 801, 802, 805, 806, 809, 811, 812, 815, 819, 821, 822, 826, 827, 832, 833, 835, 836, 839, 844, 846, 848, 849, 850, 851, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 873, 880, 881, 882, 883, 884, 885, 886, 887, 889, 891, 894, 897, 912, 917, 919, 920, 922, 924, 925, 927, 928, 929, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 951, 953, 956, 957, 961, 962, 963, 964, 965, 966, 968, 969, 973, 974, 978, 979, 980, 981, 988, 989, 991, 992, 993, 999, 1002, 1003, 1004, 1009, 1013, 1015, 1018, 1020, 1023, 1025, 1028, 1029, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1053, 1054, 1057, 1058, 1061, 1064, 1065, 1070, 1072, 1085, 1087, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1108, 1113, 1114, 1115, 1119, 1123, 1124, 1125, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1140, 1142, 1146, 1150, 1151, 1152, 1153, 1156, 1157, 1162, 1163, 1168, 1169, 1172, 1173, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1200, 1202, 1218, 1219, 1220, 1221, 1223, 1228, 1229, 1233, 1235, 1236, 1246, 1255], "drop": [1, 108, 166, 167, 209, 265, 273, 299, 373, 375, 376, 484, 485, 563, 760, 787, 841, 846, 870, 941, 943, 944, 1059, 1060, 1113, 1246], "aaa": [1, 40, 299, 606, 656, 658, 1160], "bbb": [1, 40, 299, 656, 658, 873], "ccc": [1, 40, 299, 656, 658], "ddd": [1, 40, 299, 656, 658], "eee": [1, 40, 299, 873], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 71, 72, 80, 81, 88, 90, 92, 94, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 157, 158, 162, 163, 165, 166, 167, 168, 171, 175, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 201, 202, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 248, 249, 250, 251, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 278, 299, 309, 310, 312, 324, 336, 337, 339, 353, 359, 371, 379, 381, 382, 383, 387, 389, 390, 391, 393, 395, 397, 400, 403, 404, 407, 409, 410, 412, 421, 422, 424, 431, 433, 437, 439, 451, 455, 470, 474, 480, 487, 489, 507, 510, 511, 512, 522, 523, 529, 531, 533, 542, 544, 545, 546, 547, 555, 561, 563, 567, 569, 571, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 594, 601, 602, 605, 613, 637, 638, 646, 647, 648, 649, 650, 652, 657, 660, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 760, 776, 778, 784, 786, 787, 788, 790, 794, 797, 798, 799, 800, 801, 802, 806, 807, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 835, 836, 837, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 858, 870, 873, 877, 878, 901, 902, 904, 915, 917, 923, 939, 950, 951, 952, 956, 958, 959, 963, 965, 968, 970, 973, 976, 977, 980, 982, 983, 985, 994, 995, 997, 1006, 1017, 1020, 1055, 1062, 1064, 1082, 1086, 1113, 1120, 1123, 1147, 1159, 1167, 1191, 1192, 1200, 1201, 1202, 1203, 1204, 1206, 1212, 1215, 1223, 1224, 1246, 1255], "txt": [1, 17, 130], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 64, 71, 72, 79, 89, 90, 108, 112, 116, 117, 118, 119, 130, 139, 140, 141, 142, 143, 144, 145, 148, 151, 157, 158, 168, 170, 171, 178, 184, 185, 186, 188, 206, 222, 224, 234, 237, 239, 240, 241, 248, 258, 259, 263, 264, 267, 269, 273, 274, 278, 299, 307, 344, 345, 350, 402, 406, 409, 412, 420, 431, 433, 439, 443, 455, 492, 534, 555, 559, 570, 575, 578, 579, 580, 581, 582, 584, 585, 586, 602, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 657, 678, 680, 686, 688, 689, 690, 698, 702, 704, 705, 707, 708, 714, 727, 731, 739, 742, 744, 747, 748, 750, 760, 776, 778, 788, 789, 790, 797, 798, 800, 807, 825, 826, 827, 828, 829, 835, 840, 846, 847, 851, 870, 873, 909, 915, 916, 975, 979, 982, 985, 993, 1006, 1024, 1045, 1067, 1119, 1158, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1225, 1246, 1255], "register_lazyframe_namespac": [1, 81, 82, 84], "dtypeoper": [1, 83], "ldf": [1, 83, 851, 852, 855, 857, 859, 860, 861, 862, 863, 864, 865], "_ldf": [1, 83], "upcast_integer_typ": [1, 83], "with_column": [1, 17, 83, 186, 223, 234, 267, 274, 299, 307, 309, 325, 327, 328, 329, 330, 331, 332, 333, 336, 337, 344, 348, 353, 360, 361, 362, 363, 364, 371, 373, 377, 381, 382, 383, 385, 386, 387, 391, 393, 395, 397, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 421, 422, 426, 427, 435, 436, 441, 446, 448, 449, 454, 455, 459, 460, 463, 464, 466, 467, 468, 470, 473, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 518, 520, 523, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 555, 556, 559, 560, 561, 563, 566, 570, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 588, 592, 606, 607, 609, 611, 612, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 649, 650, 651, 653, 654, 655, 657, 659, 660, 667, 669, 676, 678, 680, 688, 690, 695, 696, 698, 705, 710, 720, 724, 727, 731, 740, 744, 748, 750, 756, 760, 798, 804, 820, 825, 847, 870, 873, 939, 978, 1113, 1246], "tp": [1, 83], "cast": [1, 39, 82, 83, 105, 139, 140, 141, 142, 178, 186, 187, 189, 190, 223, 234, 260, 273, 299, 313, 363, 364, 378, 409, 412, 554, 559, 568, 575, 617, 618, 619, 655, 661, 667, 690, 740, 760, 798, 799, 801, 802, 820, 825, 846, 870, 873, 918, 932, 933, 947, 982, 985, 1117, 1171, 1172, 1173, 1209, 1216, 1224, 1229, 1246], "int64": [1, 2, 39, 40, 43, 72, 82, 83, 88, 116, 168, 178, 186, 187, 189, 190, 207, 223, 234, 239, 254, 260, 299, 329, 330, 334, 335, 336, 337, 338, 340, 363, 364, 413, 414, 415, 416, 417, 418, 419, 431, 559, 568, 575, 617, 650, 661, 667, 683, 711, 719, 720, 722, 736, 742, 760, 780, 788, 798, 799, 801, 802, 804, 809, 820, 825, 826, 829, 870, 894, 895, 899, 900, 901, 902, 903, 905, 932, 933, 986, 987, 988, 989, 990, 991, 992, 1000, 1117, 1140, 1204, 1216, 1227, 1228, 1229, 1246], "int8": [1, 72, 83, 178, 299, 339, 363, 364, 383, 387, 395, 397, 404, 407, 421, 422, 511, 661, 733, 736, 751, 760, 904, 932, 933, 941, 952, 956, 968, 970, 977, 980, 994, 995, 1086, 1121, 1216, 1233, 1246], "int16": [1, 83, 363, 364, 403, 661, 760, 873, 932, 933, 976, 1216, 1225, 1246], "int32": [1, 83, 88, 105, 108, 121, 145, 146, 186, 187, 189, 190, 204, 234, 299, 331, 332, 333, 348, 390, 391, 393, 400, 424, 575, 667, 736, 760, 798, 799, 801, 802, 825, 870, 873, 896, 897, 898, 959, 963, 965, 973, 997, 1092, 1229, 1246], "b": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 72, 83, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 154, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 182, 183, 184, 185, 186, 191, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 299, 307, 309, 310, 312, 313, 326, 341, 342, 344, 345, 346, 348, 359, 371, 374, 431, 433, 435, 436, 437, 439, 442, 449, 452, 454, 455, 457, 461, 464, 466, 467, 468, 470, 474, 480, 486, 492, 501, 502, 503, 504, 520, 523, 528, 539, 542, 543, 544, 545, 552, 553, 555, 559, 561, 563, 566, 570, 572, 574, 594, 600, 602, 613, 617, 629, 657, 660, 671, 675, 677, 678, 679, 680, 682, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 710, 711, 712, 713, 714, 717, 719, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 737, 738, 741, 742, 743, 744, 745, 749, 760, 775, 776, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 806, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 876, 879, 915, 917, 918, 939, 940, 942, 999, 1000, 1001, 1007, 1010, 1024, 1032, 1045, 1055, 1076, 1077, 1078, 1079, 1113, 1118, 1167, 1171, 1183, 1212, 1215, 1228, 1232, 1246, 1254], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 61, 64, 66, 67, 69, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 130, 148, 154, 156, 157, 158, 159, 160, 163, 164, 167, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 230, 234, 236, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 306, 307, 308, 309, 311, 313, 326, 331, 332, 333, 334, 335, 338, 339, 341, 347, 348, 351, 352, 353, 359, 360, 361, 362, 363, 364, 370, 372, 374, 379, 382, 383, 403, 404, 405, 406, 407, 409, 412, 414, 417, 419, 420, 422, 426, 427, 432, 433, 435, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 467, 468, 470, 473, 474, 475, 483, 484, 485, 486, 487, 489, 491, 500, 501, 502, 503, 504, 505, 506, 509, 511, 515, 518, 520, 523, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 554, 555, 557, 558, 559, 560, 561, 564, 566, 570, 571, 572, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 592, 596, 600, 601, 602, 603, 606, 609, 615, 620, 621, 626, 627, 629, 635, 636, 637, 638, 644, 645, 646, 650, 655, 656, 658, 659, 660, 662, 667, 668, 669, 675, 676, 678, 680, 682, 684, 685, 686, 687, 688, 690, 691, 693, 695, 696, 697, 698, 704, 705, 707, 708, 710, 712, 713, 717, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 756, 760, 775, 776, 778, 779, 780, 781, 782, 784, 787, 789, 790, 791, 792, 793, 795, 796, 797, 798, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 825, 831, 833, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 879, 882, 889, 896, 897, 898, 899, 900, 903, 904, 911, 920, 921, 923, 938, 940, 942, 951, 956, 963, 965, 968, 970, 971, 972, 973, 977, 978, 979, 982, 985, 987, 990, 992, 993, 994, 995, 1000, 1007, 1009, 1010, 1014, 1015, 1019, 1020, 1023, 1024, 1026, 1032, 1037, 1038, 1039, 1040, 1044, 1058, 1059, 1060, 1061, 1062, 1066, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1100, 1103, 1104, 1108, 1109, 1110, 1115, 1119, 1120, 1123, 1128, 1130, 1131, 1132, 1133, 1134, 1137, 1145, 1150, 1153, 1154, 1155, 1160, 1163, 1169, 1174, 1175, 1180, 1181, 1189, 1191, 1192, 1198, 1199, 1200, 1204, 1209, 1215, 1217, 1225, 1228, 1229, 1230, 1237, 1246, 1250, 1255], "c": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 81, 83, 88, 106, 108, 110, 112, 121, 130, 144, 154, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 182, 183, 184, 185, 186, 192, 194, 196, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 224, 226, 227, 229, 232, 233, 235, 238, 239, 240, 247, 248, 249, 250, 252, 254, 257, 258, 259, 260, 261, 263, 264, 267, 268, 270, 271, 273, 278, 282, 283, 284, 286, 287, 289, 292, 293, 299, 307, 309, 310, 312, 314, 341, 371, 437, 455, 470, 480, 492, 520, 523, 542, 543, 555, 559, 563, 594, 637, 646, 671, 678, 680, 682, 688, 690, 691, 693, 695, 696, 698, 711, 712, 713, 714, 717, 721, 724, 726, 727, 728, 729, 730, 731, 732, 741, 743, 744, 745, 749, 756, 760, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 794, 797, 798, 806, 809, 816, 819, 821, 823, 824, 826, 827, 833, 834, 835, 840, 843, 846, 848, 851, 855, 856, 857, 859, 860, 862, 865, 866, 870, 873, 917, 939, 940, 1024, 1045, 1055, 1113, 1191, 1200, 1232, 1246], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 67, 69, 80, 81, 83, 84, 88, 105, 108, 109, 110, 111, 112, 114, 116, 117, 130, 138, 139, 141, 146, 158, 159, 160, 164, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 192, 193, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 218, 219, 220, 222, 224, 225, 226, 227, 230, 234, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 259, 262, 267, 268, 269, 272, 273, 275, 276, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 299, 302, 307, 308, 311, 327, 328, 331, 332, 333, 347, 348, 352, 353, 370, 371, 372, 373, 374, 379, 380, 381, 382, 387, 391, 393, 395, 400, 405, 407, 409, 410, 412, 413, 419, 427, 430, 431, 434, 436, 440, 441, 445, 446, 448, 450, 452, 455, 459, 463, 464, 466, 467, 468, 470, 473, 475, 483, 486, 487, 489, 491, 494, 497, 500, 501, 502, 503, 504, 505, 508, 509, 538, 540, 542, 551, 554, 555, 556, 557, 558, 559, 563, 564, 566, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 590, 596, 602, 609, 619, 620, 621, 650, 659, 662, 668, 669, 682, 687, 688, 689, 691, 693, 695, 696, 697, 698, 704, 709, 710, 711, 712, 713, 717, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 741, 743, 744, 745, 749, 756, 760, 778, 779, 780, 781, 782, 789, 790, 791, 792, 793, 795, 796, 797, 798, 803, 805, 806, 807, 808, 809, 810, 814, 815, 816, 821, 825, 831, 833, 834, 835, 836, 837, 838, 843, 845, 846, 849, 850, 851, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 879, 882, 886, 889, 892, 893, 896, 897, 898, 911, 921, 923, 930, 938, 939, 940, 941, 942, 948, 949, 950, 951, 952, 978, 980, 982, 983, 985, 986, 992, 994, 995, 1000, 1004, 1007, 1008, 1019, 1020, 1023, 1024, 1030, 1036, 1058, 1061, 1062, 1066, 1069, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1092, 1100, 1108, 1109, 1110, 1113, 1114, 1115, 1119, 1120, 1123, 1125, 1126, 1127, 1129, 1130, 1133, 1137, 1150, 1153, 1156, 1163, 1173, 1174, 1204, 1217, 1230, 1233, 1237, 1246, 1255], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 67, 69, 71, 81, 83, 88, 89, 90, 105, 108, 109, 110, 111, 138, 158, 161, 165, 166, 167, 168, 169, 171, 172, 175, 180, 181, 182, 183, 184, 186, 192, 194, 196, 197, 199, 201, 202, 203, 205, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 266, 267, 269, 270, 271, 273, 275, 276, 283, 292, 293, 299, 302, 307, 311, 331, 332, 333, 341, 348, 363, 364, 374, 379, 383, 397, 402, 403, 404, 415, 416, 418, 421, 422, 425, 427, 435, 436, 442, 445, 450, 452, 454, 475, 476, 477, 487, 501, 502, 503, 504, 523, 551, 554, 562, 565, 566, 567, 571, 573, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 602, 609, 613, 620, 621, 650, 659, 662, 676, 695, 696, 697, 710, 713, 719, 724, 725, 743, 756, 760, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 798, 803, 805, 806, 808, 810, 812, 816, 819, 821, 823, 825, 826, 827, 829, 831, 833, 834, 835, 838, 842, 845, 846, 849, 850, 856, 865, 866, 870, 873, 896, 897, 898, 921, 927, 929, 932, 933, 942, 975, 995, 1000, 1020, 1051, 1052, 1062, 1076, 1077, 1078, 1079, 1100, 1112, 1115, 1120, 1122, 1128, 1130, 1132, 1134, 1163, 1167, 1174, 1204, 1216, 1246, 1254, 1255], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 81, 83, 88, 158, 161, 162, 164, 165, 166, 168, 169, 171, 175, 180, 182, 186, 192, 194, 197, 205, 210, 212, 214, 216, 217, 221, 224, 227, 229, 232, 234, 235, 237, 238, 239, 240, 244, 247, 249, 250, 251, 252, 258, 259, 260, 261, 267, 269, 270, 271, 299, 307, 311, 331, 332, 333, 338, 364, 379, 383, 403, 405, 406, 420, 422, 432, 445, 450, 454, 475, 501, 502, 503, 504, 554, 566, 571, 575, 585, 602, 649, 662, 695, 696, 707, 713, 724, 725, 743, 760, 778, 783, 786, 788, 790, 794, 796, 798, 803, 805, 806, 810, 817, 819, 822, 823, 825, 826, 827, 831, 838, 870, 873, 886, 896, 897, 898, 903, 948, 952, 959, 978, 979, 993, 995, 1005, 1046, 1076, 1077, 1078, 1079, 1119, 1120, 1133, 1203, 1246, 1255], "float32": [1, 15, 37, 58, 83, 158, 178, 258, 259, 299, 722, 778, 870, 873, 1027, 1092, 1246], "lazi": [1, 64, 65, 66, 67, 69, 83, 88, 130, 146, 206, 223, 224, 299, 523, 715, 733, 736, 751, 760, 806, 807, 848, 851, 852, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 873, 1254, 1255], "i16": [1, 83, 383, 403, 422, 594, 760, 873, 976, 1225, 1246, 1255], "i32": [1, 83, 105, 108, 112, 145, 146, 240, 299, 331, 332, 333, 348, 387, 390, 391, 393, 395, 400, 424, 573, 594, 750, 760, 827, 870, 896, 897, 898, 959, 963, 965, 973, 997, 1092, 1122, 1246, 1255], "f32": [1, 83, 158, 258, 299, 594, 760, 778, 870, 873, 1092, 1246], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 61, 64, 66, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 130, 157, 159, 160, 161, 165, 167, 168, 171, 172, 174, 175, 180, 181, 183, 184, 185, 186, 192, 194, 196, 198, 200, 202, 205, 206, 209, 210, 215, 216, 217, 222, 223, 224, 226, 229, 230, 232, 233, 234, 238, 240, 244, 247, 248, 250, 252, 255, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 289, 292, 293, 299, 307, 309, 313, 329, 330, 334, 335, 336, 337, 338, 340, 341, 347, 353, 360, 361, 362, 363, 364, 371, 373, 374, 386, 411, 413, 414, 415, 416, 417, 418, 419, 431, 433, 434, 436, 437, 438, 439, 441, 442, 444, 445, 447, 450, 452, 453, 454, 455, 459, 460, 463, 464, 466, 467, 468, 470, 472, 475, 478, 479, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 517, 520, 521, 523, 538, 539, 540, 542, 543, 544, 545, 546, 547, 555, 556, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 572, 573, 574, 575, 589, 591, 592, 594, 595, 596, 600, 601, 602, 629, 630, 650, 655, 656, 658, 659, 660, 661, 662, 668, 669, 670, 672, 675, 683, 688, 690, 692, 695, 696, 697, 698, 709, 710, 711, 712, 713, 717, 719, 720, 721, 722, 724, 725, 726, 727, 730, 731, 735, 739, 740, 743, 744, 745, 750, 756, 760, 776, 779, 781, 782, 785, 786, 787, 790, 791, 793, 794, 795, 796, 797, 798, 803, 806, 807, 808, 810, 812, 813, 816, 817, 818, 820, 821, 823, 824, 825, 827, 829, 831, 834, 835, 837, 838, 840, 841, 842, 843, 846, 849, 850, 851, 852, 855, 856, 857, 858, 859, 862, 865, 866, 870, 873, 875, 876, 879, 899, 900, 901, 902, 903, 905, 911, 923, 926, 930, 931, 932, 933, 939, 940, 955, 984, 986, 987, 988, 989, 990, 991, 992, 1007, 1008, 1010, 1011, 1014, 1015, 1019, 1021, 1032, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1068, 1071, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1087, 1088, 1094, 1099, 1113, 1118, 1119, 1120, 1122, 1126, 1129, 1133, 1137, 1138, 1141, 1145, 1149, 1150, 1154, 1155, 1204, 1215, 1217, 1224, 1230, 1231, 1237, 1246, 1254, 1255], "register_series_namespac": [1, 81, 82, 83], "math": [1, 15, 84, 372, 684, 685, 760, 927, 929, 1151, 1220, 1246], "mathshortcut": [1, 84], "": [1, 2, 16, 37, 39, 40, 45, 58, 64, 67, 72, 84, 105, 112, 116, 117, 118, 119, 121, 127, 131, 132, 135, 136, 148, 157, 158, 167, 170, 175, 180, 185, 186, 188, 189, 196, 202, 205, 206, 215, 222, 224, 230, 232, 237, 240, 241, 248, 257, 263, 265, 266, 267, 268, 273, 274, 299, 386, 409, 412, 431, 437, 471, 492, 521, 523, 532, 539, 548, 549, 555, 556, 568, 573, 574, 602, 606, 614, 615, 616, 629, 635, 636, 638, 646, 647, 648, 652, 653, 656, 658, 677, 678, 679, 680, 686, 691, 694, 697, 698, 701, 702, 711, 714, 715, 724, 725, 726, 727, 730, 731, 739, 740, 742, 743, 744, 750, 756, 760, 776, 778, 786, 787, 797, 798, 800, 801, 807, 816, 827, 828, 835, 840, 841, 842, 843, 846, 847, 853, 858, 870, 873, 875, 876, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 938, 939, 940, 941, 942, 943, 944, 946, 948, 952, 954, 955, 958, 960, 961, 965, 967, 971, 972, 976, 979, 980, 982, 985, 993, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1080, 1081, 1082, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1143, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1180, 1181, 1183, 1185, 1186, 1189, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1213, 1215, 1216, 1217, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1246, 1250], "_": [1, 80, 84, 224, 257, 299, 492, 607, 615, 620, 621, 631, 636, 637, 917, 1161, 1169, 1174, 1175, 1185, 1191, 1223, 1246], "squar": [1, 84, 285, 471, 603, 760, 858, 1047, 1156, 1246], "cube": [1, 84, 351, 560, 760, 919, 1246], "s2": [1, 71, 89, 90, 141, 142, 178, 299, 921, 942, 1000, 1032, 1046, 1055, 1087, 1100, 1228, 1237, 1246], "renam": [1, 108, 116, 117, 155, 176, 179, 187, 188, 189, 190, 195, 231, 240, 241, 253, 273, 274, 278, 280, 299, 309, 314, 365, 366, 367, 368, 369, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 535, 543, 544, 545, 561, 576, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 658, 660, 663, 664, 681, 701, 702, 723, 739, 742, 760, 799, 800, 801, 802, 811, 827, 828, 839, 846, 847, 851, 853, 870, 876, 880, 934, 935, 936, 937, 939, 1029, 1035, 1057, 1070, 1085, 1093, 1113, 1124, 1140, 1142, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1213, 1218, 1219, 1224, 1246], "n2": 1, "in_plac": [1, 194, 246, 271, 299, 1116, 1148, 1155, 1246], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 66, 68, 86, 87, 88, 105, 106, 110, 112, 114, 116, 117, 118, 120, 121, 122, 124, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 147, 148, 152, 154, 157, 158, 159, 160, 164, 169, 174, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 196, 198, 199, 200, 203, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 240, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 308, 309, 310, 311, 312, 313, 314, 325, 327, 328, 337, 342, 343, 345, 346, 348, 360, 361, 362, 363, 364, 371, 378, 380, 383, 386, 389, 398, 399, 402, 403, 405, 406, 407, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 444, 446, 447, 448, 451, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 471, 473, 476, 477, 481, 489, 507, 510, 512, 518, 521, 523, 527, 528, 529, 530, 531, 532, 534, 535, 550, 551, 552, 554, 557, 558, 563, 568, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 594, 599, 601, 602, 605, 606, 607, 609, 610, 612, 617, 619, 628, 636, 637, 639, 646, 647, 648, 650, 652, 656, 658, 670, 673, 676, 677, 678, 679, 680, 681, 683, 686, 687, 691, 704, 706, 707, 713, 719, 725, 733, 736, 742, 747, 750, 751, 760, 776, 778, 779, 780, 781, 782, 789, 791, 793, 797, 798, 799, 800, 801, 802, 806, 807, 809, 811, 812, 816, 821, 825, 827, 829, 833, 835, 840, 841, 842, 843, 846, 852, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 873, 877, 878, 880, 890, 892, 893, 902, 907, 912, 915, 918, 921, 922, 939, 946, 947, 949, 952, 954, 955, 956, 958, 962, 963, 965, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 999, 1000, 1002, 1003, 1004, 1011, 1017, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1056, 1064, 1082, 1085, 1094, 1100, 1106, 1109, 1110, 1113, 1117, 1131, 1140, 1153, 1155, 1159, 1160, 1161, 1163, 1164, 1166, 1171, 1173, 1182, 1190, 1191, 1193, 1200, 1201, 1202, 1204, 1206, 1227, 1228, 1234, 1236, 1237, 1246, 1255], "s3": [1, 39, 120, 131, 132, 135, 136, 299, 1087, 1246], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 64, 69, 70, 77, 80, 81, 83, 84, 88, 138, 144, 146, 158, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 180, 182, 184, 192, 194, 202, 205, 209, 210, 212, 214, 217, 227, 229, 232, 235, 237, 238, 239, 240, 244, 247, 249, 250, 252, 258, 259, 260, 261, 267, 270, 271, 273, 299, 311, 313, 326, 331, 332, 333, 361, 364, 370, 379, 445, 451, 454, 484, 486, 495, 501, 502, 503, 504, 540, 554, 560, 571, 572, 577, 594, 600, 602, 622, 625, 626, 627, 646, 676, 682, 691, 693, 696, 698, 710, 712, 717, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 741, 744, 745, 749, 760, 778, 783, 786, 787, 788, 790, 794, 796, 803, 806, 810, 812, 821, 823, 826, 827, 831, 838, 846, 870, 873, 896, 897, 898, 929, 938, 959, 1020, 1046, 1059, 1061, 1070, 1076, 1077, 1078, 1079, 1108, 1120, 1123, 1125, 1128, 1130, 1132, 1134, 1176, 1179, 1180, 1181, 1200, 1246, 1255], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 64, 69, 80, 88, 138, 162, 164, 178, 187, 192, 197, 209, 234, 236, 237, 240, 251, 252, 267, 271, 273, 292, 299, 307, 311, 313, 326, 331, 332, 333, 336, 337, 361, 364, 372, 379, 437, 445, 454, 460, 470, 484, 499, 507, 542, 554, 565, 571, 575, 577, 583, 585, 596, 600, 615, 649, 657, 689, 695, 696, 748, 760, 799, 803, 805, 810, 825, 827, 838, 846, 865, 870, 873, 894, 895, 896, 897, 898, 901, 902, 940, 952, 963, 965, 973, 979, 993, 994, 1032, 1046, 1059, 1074, 1082, 1120, 1125, 1131, 1133, 1135, 1150, 1169, 1203, 1212, 1246], "27": [1, 84, 292, 364, 397, 404, 421, 760, 865, 1246, 1255], "16": [1, 40, 54, 74, 82, 138, 179, 186, 234, 273, 299, 361, 364, 454, 522, 540, 560, 575, 650, 695, 709, 710, 713, 760, 798, 825, 833, 846, 870, 873, 979, 993, 1093, 1108, 1140, 1151, 1204, 1220, 1246], "64": [1, 53, 56, 76, 82, 84, 137, 154, 358, 540, 560, 760, 1108, 1246], "25": [1, 32, 40, 84, 112, 146, 164, 186, 206, 234, 269, 273, 299, 373, 383, 385, 403, 406, 420, 422, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 669, 704, 705, 707, 708, 709, 715, 725, 747, 748, 760, 798, 807, 814, 825, 844, 846, 870, 873, 940, 941, 954, 979, 993, 999, 1020, 1108, 1113, 1246], "125": [1, 40, 84, 299, 307, 760, 1108, 1246], "inner": [2, 61, 145, 205, 268, 299, 339, 374, 492, 511, 569, 667, 760, 806, 829, 843, 870, 904, 942, 1067, 1086, 1229, 1246], "polarsdatatyp": [2, 61, 116, 117, 130, 143, 144, 145, 146, 148, 155, 158, 209, 299, 314, 348, 431, 519, 521, 522, 523, 570, 617, 618, 681, 711, 722, 723, 724, 725, 733, 736, 751, 756, 760, 778, 870, 873, 880, 912, 1093, 1094, 1119, 1171, 1172, 1246], "pythondatatyp": [2, 61], "width": [2, 31, 40, 116, 117, 130, 225, 299, 302, 511, 870, 1086], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 60, 66, 69, 82, 108, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 155, 157, 159, 164, 170, 173, 174, 176, 180, 182, 184, 191, 192, 193, 195, 196, 201, 203, 204, 206, 208, 209, 210, 212, 217, 219, 220, 231, 232, 235, 238, 243, 244, 245, 247, 249, 250, 252, 253, 258, 261, 263, 267, 270, 272, 275, 276, 283, 293, 299, 307, 332, 341, 347, 370, 373, 428, 429, 430, 434, 435, 436, 442, 444, 445, 447, 449, 450, 451, 475, 481, 484, 489, 490, 491, 500, 505, 506, 509, 510, 511, 512, 554, 556, 559, 560, 563, 566, 569, 571, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 600, 604, 614, 617, 618, 623, 626, 627, 628, 629, 633, 635, 637, 638, 649, 650, 655, 662, 663, 664, 668, 674, 676, 683, 691, 693, 703, 706, 709, 715, 717, 719, 720, 733, 736, 737, 738, 741, 742, 745, 746, 749, 751, 760, 776, 779, 791, 792, 793, 796, 803, 807, 810, 821, 831, 832, 834, 836, 838, 839, 840, 844, 845, 849, 850, 856, 866, 870, 887, 888, 897, 911, 912, 921, 922, 938, 941, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1014, 1015, 1018, 1019, 1020, 1046, 1048, 1049, 1056, 1057, 1058, 1059, 1064, 1065, 1066, 1075, 1080, 1081, 1084, 1085, 1086, 1087, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1112, 1113, 1115, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1145, 1146, 1149, 1154, 1157, 1168, 1171, 1172, 1177, 1180, 1181, 1182, 1183, 1187, 1189, 1191, 1192, 1203, 1204, 1209, 1216, 1217, 1218, 1219, 1225, 1230, 1235, 1246, 1254, 1255], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 760, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246, 1254], "fix": [2, 15, 51, 121, 144, 146, 423, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 709, 760, 996, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "length": [2, 61, 88, 116, 117, 130, 144, 184, 186, 187, 189, 190, 225, 234, 247, 299, 302, 370, 406, 420, 506, 512, 532, 570, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 600, 620, 621, 623, 625, 626, 627, 633, 635, 655, 733, 736, 737, 738, 751, 760, 798, 799, 801, 802, 821, 825, 834, 870, 921, 938, 948, 979, 993, 1081, 1087, 1105, 1119, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1154, 1174, 1175, 1177, 1179, 1180, 1181, 1187, 1189, 1209, 1246], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 64, 65, 66, 67, 69, 72, 80, 81, 82, 83, 84, 86, 87, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 157, 158, 159, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 280, 283, 285, 291, 293, 299, 307, 309, 310, 311, 312, 313, 314, 324, 332, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 353, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 378, 379, 380, 386, 402, 405, 406, 407, 409, 411, 412, 420, 423, 425, 426, 427, 428, 429, 430, 431, 434, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 460, 471, 473, 475, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 534, 538, 540, 543, 544, 545, 550, 551, 554, 555, 556, 559, 560, 561, 563, 564, 566, 568, 569, 570, 571, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 623, 624, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 655, 656, 658, 659, 660, 662, 663, 664, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 760, 776, 778, 779, 781, 782, 785, 786, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 810, 811, 812, 816, 817, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 856, 858, 864, 866, 870, 873, 876, 877, 878, 879, 880, 889, 897, 902, 905, 906, 907, 908, 909, 910, 911, 912, 916, 922, 923, 924, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 947, 948, 949, 955, 975, 978, 979, 980, 982, 984, 985, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1020, 1023, 1024, 1034, 1042, 1043, 1047, 1049, 1055, 1056, 1057, 1058, 1059, 1061, 1064, 1065, 1066, 1067, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1093, 1094, 1108, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1146, 1149, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1209, 1210, 1213, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1234, 1235, 1236, 1237, 1246, 1254], "The": [2, 25, 38, 39, 40, 45, 60, 61, 64, 68, 71, 72, 80, 85, 86, 90, 105, 107, 108, 109, 111, 114, 116, 117, 118, 119, 121, 125, 126, 128, 130, 134, 135, 136, 139, 140, 141, 142, 150, 164, 166, 167, 168, 171, 172, 175, 184, 185, 186, 189, 191, 197, 203, 206, 209, 216, 222, 234, 235, 236, 237, 240, 241, 259, 266, 269, 273, 274, 276, 278, 285, 299, 309, 341, 342, 343, 344, 371, 375, 376, 383, 397, 402, 403, 406, 409, 420, 421, 431, 434, 437, 442, 449, 485, 489, 510, 521, 522, 523, 555, 563, 566, 569, 570, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 596, 599, 605, 610, 611, 614, 617, 618, 624, 626, 627, 634, 640, 641, 642, 643, 644, 645, 646, 715, 725, 737, 738, 739, 742, 750, 752, 753, 755, 756, 760, 761, 762, 765, 767, 768, 769, 787, 790, 794, 798, 801, 803, 805, 807, 810, 812, 817, 821, 825, 827, 828, 829, 842, 846, 847, 850, 851, 858, 870, 876, 879, 906, 907, 908, 922, 939, 940, 943, 944, 952, 970, 975, 976, 979, 982, 993, 994, 1007, 1008, 1011, 1018, 1060, 1064, 1093, 1094, 1113, 1115, 1119, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1150, 1153, 1159, 1164, 1165, 1171, 1172, 1178, 1180, 1181, 1188, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1255], "datatyp": [2, 37, 43, 58, 61, 78, 105, 107, 108, 109, 111, 113, 121, 123, 125, 126, 129, 134, 148, 168, 171, 178, 239, 299, 348, 431, 594, 667, 711, 722, 760, 772, 788, 790, 826, 829, 870, 880, 912, 940, 1034, 1041, 1043, 1045, 1094, 1147, 1229, 1246], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 61, 62, 64, 68, 71, 78, 80, 88, 90, 108, 110, 116, 117, 118, 119, 121, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 164, 167, 169, 172, 173, 174, 175, 179, 184, 186, 189, 191, 192, 197, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 226, 227, 229, 234, 235, 236, 237, 238, 244, 245, 248, 249, 250, 251, 252, 255, 256, 260, 263, 264, 267, 268, 269, 270, 281, 282, 284, 286, 287, 289, 290, 299, 306, 307, 308, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 340, 341, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 364, 370, 371, 373, 375, 376, 379, 383, 397, 403, 421, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485, 488, 490, 491, 493, 494, 496, 497, 498, 500, 505, 508, 509, 512, 513, 515, 517, 518, 521, 522, 523, 524, 525, 526, 537, 538, 539, 540, 541, 548, 549, 550, 551, 553, 555, 556, 559, 560, 563, 564, 566, 569, 570, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 596, 597, 598, 599, 601, 602, 603, 605, 606, 608, 609, 610, 611, 612, 614, 617, 618, 619, 626, 627, 629, 630, 632, 635, 637, 638, 639, 655, 657, 659, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 676, 677, 679, 682, 688, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 712, 713, 718, 719, 721, 722, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 743, 744, 750, 760, 775, 776, 787, 792, 793, 794, 798, 801, 804, 805, 806, 807, 813, 814, 815, 816, 818, 819, 822, 823, 825, 829, 831, 832, 835, 836, 837, 840, 843, 844, 854, 855, 857, 859, 860, 862, 863, 870, 873, 875, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 903, 905, 907, 908, 909, 910, 916, 920, 923, 924, 925, 927, 928, 929, 938, 939, 940, 941, 943, 944, 948, 952, 970, 976, 994, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1048, 1049, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1063, 1065, 1066, 1068, 1069, 1071, 1072, 1073, 1075, 1080, 1083, 1084, 1088, 1093, 1095, 1096, 1098, 1099, 1101, 1103, 1104, 1105, 1107, 1108, 1112, 1113, 1114, 1115, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1150, 1151, 1152, 1153, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1180, 1181, 1183, 1184, 1186, 1189, 1191, 1192, 1193, 1209, 1212, 1216, 1217, 1218, 1219, 1220, 1221, 1227, 1228, 1229, 1232, 1234, 1236, 1237, 1246, 1255], "within": [2, 61, 139, 140, 141, 142, 185, 186, 187, 188, 189, 190, 191, 206, 234, 269, 299, 449, 566, 575, 602, 760, 798, 799, 801, 802, 807, 825, 870, 1018, 1246, 1254], "each": [2, 37, 40, 58, 61, 80, 117, 118, 134, 139, 140, 141, 142, 144, 163, 175, 184, 185, 186, 187, 188, 189, 190, 204, 206, 209, 222, 234, 238, 260, 266, 268, 269, 277, 278, 281, 283, 285, 293, 299, 371, 406, 420, 437, 458, 459, 462, 463, 491, 494, 495, 500, 509, 516, 523, 563, 566, 574, 580, 582, 584, 586, 589, 595, 602, 615, 620, 621, 622, 625, 637, 638, 683, 686, 690, 719, 720, 742, 750, 760, 781, 784, 794, 798, 799, 801, 802, 807, 821, 825, 842, 843, 851, 853, 854, 856, 858, 866, 870, 921, 939, 979, 993, 1029, 1030, 1035, 1036, 1066, 1069, 1070, 1075, 1084, 1113, 1115, 1123, 1137, 1149, 1169, 1174, 1175, 1176, 1179, 1191, 1192, 1215, 1246, 1255], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 760, 772, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1143, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1180, 1181, 1183, 1184, 1185, 1186, 1189, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1215, 1216, 1217, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1246, 1254], "dtype": [2, 15, 40, 48, 71, 72, 83, 89, 90, 105, 107, 109, 111, 112, 116, 117, 118, 119, 125, 126, 127, 130, 143, 144, 145, 146, 148, 154, 158, 186, 187, 189, 190, 206, 234, 258, 259, 260, 267, 276, 299, 314, 348, 349, 363, 364, 423, 431, 444, 480, 489, 510, 517, 519, 521, 522, 523, 568, 569, 575, 578, 579, 580, 581, 582, 584, 585, 586, 594, 617, 618, 646, 661, 663, 667, 672, 681, 683, 692, 711, 715, 719, 720, 722, 723, 724, 725, 733, 736, 742, 751, 760, 778, 798, 799, 801, 802, 807, 825, 850, 870, 873, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 912, 914, 915, 917, 922, 932, 933, 940, 941, 996, 1000, 1001, 1025, 1027, 1031, 1034, 1041, 1043, 1045, 1051, 1052, 1055, 1064, 1086, 1092, 1093, 1121, 1140, 1147, 1171, 1172, 1200, 1216, 1225, 1227, 1228, 1229, 1233, 1246, 1255], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 143, 152, 155, 167, 172, 176, 179, 185, 187, 188, 189, 190, 195, 197, 203, 209, 210, 212, 217, 220, 227, 231, 235, 236, 237, 244, 250, 253, 265, 273, 280, 285, 291, 299, 307, 310, 311, 314, 353, 365, 366, 367, 368, 369, 409, 412, 426, 427, 434, 441, 446, 448, 454, 458, 462, 465, 470, 473, 482, 495, 505, 510, 518, 519, 520, 522, 523, 538, 540, 542, 544, 545, 546, 547, 550, 551, 554, 560, 561, 564, 566, 576, 578, 579, 580, 581, 582, 584, 585, 586, 592, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 642, 643, 644, 645, 649, 655, 659, 660, 663, 664, 669, 671, 676, 691, 725, 734, 752, 753, 755, 756, 760, 761, 762, 765, 766, 767, 768, 769, 772, 782, 785, 787, 799, 800, 801, 802, 805, 811, 822, 831, 839, 841, 846, 853, 858, 864, 870, 879, 880, 923, 934, 935, 936, 937, 982, 985, 1007, 1008, 1023, 1029, 1035, 1057, 1070, 1080, 1085, 1093, 1094, 1114, 1115, 1124, 1130, 1140, 1142, 1145, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1203, 1209, 1218, 1219, 1229, 1236, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253], "attribut": [2, 5, 48, 49, 50, 51, 61, 72, 143, 299, 752, 753, 755, 756, 761, 762, 765, 767, 768, 769, 870, 1238, 1240, 1242, 1247, 1251, 1252, 1253], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 175, 223, 260, 299, 559, 686, 714, 760, 794, 820, 870, 1094, 1227, 1228, 1246], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 118, 162, 175, 223, 260, 299, 559, 760, 794, 820, 870, 1228, 1246, 1254], "order": [5, 15, 40, 58, 59, 60, 64, 66, 80, 86, 108, 118, 137, 139, 140, 157, 167, 175, 185, 186, 187, 188, 189, 190, 205, 222, 223, 224, 234, 238, 242, 248, 259, 263, 265, 269, 299, 324, 337, 340, 350, 375, 376, 437, 485, 500, 507, 513, 566, 575, 579, 580, 581, 582, 584, 586, 589, 590, 591, 601, 602, 632, 642, 643, 644, 645, 658, 670, 671, 673, 686, 750, 760, 771, 776, 787, 794, 797, 798, 799, 800, 801, 802, 806, 816, 825, 830, 835, 840, 841, 870, 889, 902, 905, 916, 918, 943, 944, 1011, 1042, 1060, 1075, 1082, 1088, 1115, 1121, 1137, 1139, 1143, 1155, 1186, 1213, 1231, 1232, 1234, 1246, 1255], "categoricalord": [5, 350, 916], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 60, 62, 64, 65, 66, 67, 69, 80, 87, 90, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 159, 163, 164, 167, 173, 174, 184, 186, 187, 189, 190, 191, 197, 201, 205, 206, 207, 209, 210, 212, 215, 217, 220, 221, 224, 234, 235, 238, 244, 245, 247, 248, 250, 255, 257, 260, 264, 265, 266, 267, 268, 269, 281, 299, 310, 312, 313, 314, 326, 327, 328, 332, 341, 353, 359, 361, 364, 371, 375, 376, 382, 402, 405, 406, 420, 427, 428, 429, 430, 431, 434, 435, 436, 442, 449, 451, 454, 455, 464, 466, 467, 468, 474, 476, 477, 485, 490, 494, 500, 501, 502, 503, 504, 506, 512, 519, 521, 522, 523, 531, 534, 536, 551, 552, 553, 556, 560, 563, 566, 567, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 589, 592, 593, 594, 595, 596, 600, 601, 605, 606, 609, 611, 612, 615, 617, 618, 619, 620, 621, 624, 626, 627, 628, 634, 635, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 650, 652, 655, 656, 657, 658, 667, 677, 678, 679, 680, 681, 683, 688, 690, 692, 694, 698, 704, 705, 706, 707, 708, 709, 711, 712, 719, 721, 722, 723, 724, 725, 727, 731, 736, 737, 738, 742, 744, 746, 747, 748, 750, 760, 779, 780, 782, 784, 787, 792, 793, 798, 799, 801, 802, 805, 806, 807, 809, 811, 812, 816, 819, 825, 829, 831, 832, 833, 834, 835, 841, 842, 843, 848, 853, 854, 858, 870, 873, 877, 878, 880, 887, 888, 892, 893, 897, 922, 923, 939, 940, 942, 943, 944, 951, 960, 961, 962, 967, 978, 979, 993, 998, 999, 1002, 1003, 1004, 1008, 1009, 1010, 1012, 1018, 1020, 1022, 1023, 1024, 1034, 1039, 1040, 1043, 1046, 1047, 1048, 1051, 1052, 1055, 1060, 1065, 1069, 1075, 1076, 1077, 1078, 1079, 1081, 1087, 1093, 1094, 1095, 1096, 1097, 1098, 1102, 1107, 1111, 1113, 1114, 1115, 1119, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1149, 1150, 1153, 1154, 1157, 1159, 1160, 1163, 1165, 1166, 1169, 1171, 1172, 1173, 1174, 1175, 1178, 1180, 1181, 1182, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1204, 1206, 1209, 1212, 1224, 1225, 1226, 1228, 1229, 1235, 1246, 1254], "physic": [5, 71, 90, 116, 117, 206, 299, 350, 667, 760, 777, 806, 807, 870, 916, 917, 1229, 1246], "A": [5, 18, 37, 40, 51, 58, 64, 67, 86, 87, 112, 116, 117, 118, 119, 130, 132, 137, 150, 178, 186, 205, 206, 211, 213, 218, 224, 251, 255, 267, 268, 269, 273, 274, 299, 306, 375, 376, 379, 426, 427, 434, 446, 448, 457, 461, 464, 466, 473, 512, 518, 521, 532, 550, 551, 572, 577, 578, 579, 580, 581, 582, 584, 585, 586, 606, 607, 608, 609, 614, 615, 616, 619, 629, 630, 631, 655, 689, 709, 710, 714, 760, 798, 806, 807, 823, 843, 846, 847, 870, 873, 943, 944, 948, 1008, 1125, 1126, 1127, 1129, 1132, 1133, 1134, 1160, 1161, 1162, 1163, 1168, 1169, 1170, 1173, 1183, 1184, 1185, 1209, 1246, 1254], "encod": [5, 51, 70, 116, 117, 130, 257, 299, 343, 443, 610, 657, 760, 907, 1164], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 80, 81, 106, 108, 111, 116, 117, 118, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 161, 167, 177, 185, 186, 187, 188, 189, 190, 191, 203, 206, 210, 212, 213, 215, 217, 234, 238, 240, 247, 250, 251, 257, 259, 264, 265, 267, 268, 273, 299, 310, 312, 314, 353, 371, 423, 449, 460, 489, 500, 501, 502, 503, 504, 506, 510, 512, 521, 522, 523, 559, 563, 570, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 589, 595, 599, 600, 605, 624, 634, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 673, 677, 679, 683, 687, 704, 705, 707, 708, 712, 719, 720, 721, 733, 736, 737, 738, 742, 747, 748, 750, 751, 760, 772, 781, 787, 789, 797, 798, 799, 800, 801, 802, 806, 807, 811, 812, 816, 825, 827, 829, 834, 841, 843, 846, 853, 858, 870, 877, 878, 918, 923, 939, 996, 1018, 1032, 1064, 1075, 1076, 1077, 1078, 1079, 1081, 1085, 1087, 1093, 1094, 1113, 1119, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1137, 1138, 1142, 1149, 1153, 1154, 1159, 1178, 1188, 1189, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1206, 1227, 1234, 1246, 1255], "lexic": [5, 350, 873, 916, 918], "appear": [5, 40, 108, 299, 671, 760, 1232, 1246], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 60, 80, 87, 88, 105, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 122, 124, 125, 126, 127, 128, 130, 139, 141, 143, 144, 145, 146, 147, 148, 152, 164, 167, 170, 185, 186, 187, 188, 189, 190, 191, 203, 205, 206, 213, 215, 222, 224, 234, 235, 236, 237, 238, 244, 249, 251, 257, 265, 267, 268, 270, 275, 299, 309, 310, 312, 350, 371, 405, 406, 420, 425, 427, 428, 429, 430, 449, 489, 500, 505, 506, 510, 512, 514, 522, 531, 548, 549, 551, 556, 563, 566, 570, 575, 578, 579, 580, 581, 582, 584, 585, 586, 589, 592, 595, 604, 605, 614, 624, 628, 634, 635, 640, 641, 642, 643, 646, 647, 648, 650, 652, 673, 674, 677, 679, 683, 687, 691, 693, 704, 705, 706, 707, 708, 712, 715, 719, 720, 721, 722, 733, 736, 741, 742, 747, 748, 749, 751, 760, 781, 782, 787, 789, 797, 798, 799, 800, 801, 802, 806, 807, 816, 825, 829, 831, 836, 841, 843, 844, 849, 870, 877, 878, 916, 923, 939, 940, 978, 979, 993, 999, 1001, 1002, 1003, 1004, 1018, 1064, 1075, 1080, 1081, 1085, 1087, 1093, 1103, 1104, 1108, 1113, 1115, 1119, 1137, 1145, 1149, 1157, 1159, 1160, 1168, 1178, 1182, 1188, 1189, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1204, 1206, 1234, 1235, 1246, 1255], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 443, 760, 785, 870], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 486, 615, 1061, 1169], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 80, 86, 87, 88, 89, 90, 105, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 157, 158, 159, 160, 164, 169, 174, 175, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 213, 222, 224, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 268, 269, 271, 273, 282, 284, 286, 289, 299, 309, 310, 311, 312, 313, 314, 324, 327, 328, 337, 340, 342, 343, 345, 346, 348, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 389, 405, 407, 420, 425, 426, 427, 428, 429, 430, 446, 448, 451, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 471, 473, 476, 477, 481, 486, 489, 500, 507, 510, 513, 518, 519, 521, 523, 527, 528, 529, 530, 531, 534, 550, 551, 552, 554, 557, 558, 563, 566, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 594, 599, 601, 602, 605, 606, 607, 609, 610, 612, 628, 629, 630, 631, 636, 637, 639, 646, 647, 648, 650, 652, 658, 670, 673, 676, 677, 678, 679, 680, 681, 683, 686, 687, 691, 694, 695, 699, 704, 705, 706, 707, 708, 719, 720, 722, 725, 733, 736, 742, 747, 748, 750, 751, 760, 776, 778, 779, 781, 782, 789, 791, 793, 794, 797, 798, 799, 800, 801, 802, 806, 807, 811, 812, 816, 821, 825, 830, 833, 835, 840, 841, 842, 843, 846, 855, 857, 859, 862, 870, 873, 877, 878, 880, 889, 892, 893, 902, 905, 907, 912, 915, 918, 922, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 958, 978, 980, 993, 999, 1000, 1002, 1003, 1004, 1011, 1017, 1020, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1051, 1052, 1056, 1057, 1058, 1061, 1064, 1075, 1082, 1085, 1088, 1094, 1106, 1109, 1110, 1113, 1115, 1116, 1117, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1140, 1141, 1142, 1143, 1148, 1153, 1155, 1159, 1160, 1161, 1163, 1164, 1166, 1182, 1183, 1184, 1185, 1190, 1191, 1193, 1200, 1201, 1202, 1204, 1206, 1226, 1227, 1228, 1231, 1234, 1236, 1246, 1254], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 259, 299, 587, 649, 760, 870, 1135, 1203, 1246], "temporari": 6, "remov": [6, 9, 91, 116, 117, 130, 154, 165, 210, 212, 217, 250, 257, 299, 314, 420, 431, 520, 523, 543, 624, 634, 640, 641, 642, 643, 644, 645, 711, 760, 786, 870, 939, 979, 993, 1113, 1178, 1188, 1194, 1195, 1196, 1197, 1198, 1199, 1202, 1236, 1246], "onc": [6, 67, 116, 117, 121, 150, 209, 236, 238, 278, 299, 500, 523, 589, 644, 645, 760, 777, 851, 870, 1075, 1094, 1137, 1198, 1199, 1246], "stabil": [6, 191, 299, 449, 760, 1018, 1246], "current": [6, 7, 8, 10, 11, 35, 66, 112, 118, 119, 128, 135, 159, 160, 205, 206, 299, 385, 406, 512, 556, 760, 772, 779, 780, 781, 806, 807, 870, 873, 922, 926, 946, 954, 979, 1108, 1246, 1254], "consid": [6, 87, 89, 90, 116, 117, 130, 136, 139, 140, 141, 142, 167, 169, 179, 202, 209, 215, 236, 265, 267, 268, 299, 314, 353, 370, 406, 451, 521, 523, 578, 579, 580, 581, 582, 584, 585, 586, 695, 713, 756, 760, 782, 787, 803, 810, 816, 841, 843, 858, 870, 915, 918, 923, 938, 979, 1000, 1020, 1034, 1094, 1113, 1138, 1140, 1141, 1246], "beta": 6, "cfg": [7, 9, 22, 152], "previous": [7, 8], "save": [7, 8, 11, 186, 206, 234, 269, 299, 377, 385, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 756, 760, 772, 798, 807, 825, 870, 954, 975, 979, 993], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 80, 116, 118, 120, 121, 122, 124, 128, 131, 132, 133, 135, 136, 138, 143, 144, 145, 146, 147, 148, 149, 186, 201, 206, 215, 255, 259, 264, 268, 299, 471, 576, 578, 579, 580, 581, 582, 584, 585, 586, 599, 607, 631, 635, 673, 722, 742, 750, 760, 772, 798, 806, 807, 816, 829, 843, 870, 873, 1043, 1047, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1153, 1161, 1185, 1189, 1224, 1234, 1246], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 64, 65, 66, 72, 80, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 164, 165, 170, 172, 177, 184, 186, 189, 203, 204, 205, 206, 207, 215, 224, 225, 229, 234, 235, 237, 238, 240, 241, 257, 264, 265, 267, 268, 269, 275, 299, 302, 360, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 431, 443, 454, 471, 500, 512, 523, 548, 549, 551, 556, 559, 563, 565, 575, 577, 578, 579, 581, 584, 585, 586, 589, 602, 614, 615, 617, 618, 628, 642, 643, 644, 645, 646, 647, 648, 652, 671, 684, 685, 688, 703, 704, 705, 706, 707, 709, 736, 746, 747, 748, 756, 759, 760, 778, 785, 786, 791, 798, 801, 806, 807, 816, 823, 825, 827, 828, 841, 843, 848, 849, 870, 873, 939, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1001, 1007, 1043, 1047, 1075, 1087, 1103, 1104, 1105, 1108, 1113, 1125, 1137, 1168, 1169, 1171, 1172, 1182, 1198, 1199, 1200, 1201, 1202, 1206, 1237, 1246, 1254, 1255], "json": [7, 8, 10, 11, 43, 44, 125, 126, 132, 134, 299, 443, 536, 617, 618, 619, 657, 760, 772, 785, 829, 870, 1171, 1172, 1173, 1212], "produc": [7, 8, 145, 146, 148, 205, 299, 482, 483, 531, 724, 806, 811, 812, 870, 1057, 1058], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 299, 536, 785, 829, 870, 1007, 1246], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 299, 536, 591, 619, 760, 785, 829, 833, 870, 1143, 1173, 1246, 1255], "load": [8, 10, 11, 108, 110, 118, 120, 121, 127, 131, 132, 147, 149, 299, 760, 772, 803, 810, 870, 1255], "reset": [9, 152], "state": [9, 86, 87, 98, 695, 699, 772, 781, 782, 789, 791, 821, 833, 870], "note": [9, 15, 25, 39, 40, 64, 68, 69, 71, 80, 87, 89, 90, 105, 106, 107, 109, 111, 112, 116, 118, 119, 120, 121, 125, 126, 128, 131, 132, 136, 139, 141, 144, 146, 148, 150, 152, 154, 157, 162, 164, 173, 186, 187, 189, 190, 191, 201, 202, 203, 205, 206, 209, 220, 223, 224, 234, 235, 236, 237, 244, 256, 259, 263, 264, 268, 269, 273, 275, 276, 299, 353, 363, 364, 375, 376, 398, 399, 402, 406, 420, 449, 455, 464, 466, 470, 486, 489, 505, 510, 512, 523, 542, 544, 545, 546, 547, 561, 570, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 592, 599, 606, 614, 615, 616, 620, 621, 629, 641, 642, 643, 646, 655, 660, 661, 669, 692, 694, 695, 704, 705, 707, 708, 709, 713, 722, 733, 735, 736, 747, 748, 750, 751, 756, 760, 771, 776, 782, 791, 792, 798, 799, 801, 802, 803, 807, 810, 823, 825, 831, 833, 835, 840, 843, 846, 849, 850, 870, 923, 932, 933, 940, 943, 944, 971, 972, 975, 993, 1017, 1018, 1061, 1064, 1080, 1085, 1094, 1119, 1131, 1138, 1141, 1145, 1148, 1153, 1160, 1168, 1169, 1170, 1174, 1175, 1183, 1195, 1196, 1197, 1200, 1209, 1216, 1227, 1246, 1250, 1254], "oper": [9, 39, 40, 71, 88, 90, 95, 96, 105, 107, 108, 109, 110, 111, 116, 118, 128, 155, 160, 172, 175, 178, 185, 188, 195, 196, 207, 209, 216, 220, 222, 223, 228, 232, 234, 237, 238, 244, 254, 259, 260, 264, 267, 277, 278, 299, 307, 308, 311, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 426, 427, 441, 446, 448, 470, 473, 500, 501, 502, 503, 504, 505, 512, 518, 535, 538, 540, 542, 544, 545, 550, 551, 554, 560, 561, 568, 575, 589, 592, 659, 660, 669, 676, 677, 679, 689, 690, 694, 710, 760, 772, 780, 791, 797, 800, 803, 806, 810, 816, 817, 825, 831, 851, 870, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 1007, 1075, 1076, 1077, 1078, 1079, 1080, 1117, 1137, 1145, 1222, 1226, 1227, 1228, 1236, 1246], "environ": [9, 35, 128, 135, 147, 150], "ani": [9, 37, 39, 40, 45, 48, 58, 85, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 143, 145, 146, 148, 152, 155, 162, 167, 172, 174, 175, 178, 201, 203, 204, 209, 213, 222, 223, 225, 235, 236, 237, 251, 255, 256, 259, 260, 265, 267, 268, 276, 299, 307, 310, 311, 314, 348, 407, 426, 427, 436, 437, 441, 444, 446, 448, 460, 473, 480, 486, 518, 519, 521, 522, 523, 535, 538, 540, 544, 545, 550, 551, 554, 555, 559, 561, 570, 571, 576, 577, 590, 605, 607, 628, 642, 643, 644, 645, 646, 647, 648, 650, 652, 659, 660, 663, 669, 676, 677, 680, 681, 691, 722, 725, 750, 760, 787, 793, 794, 820, 841, 843, 850, 870, 873, 877, 880, 980, 1007, 1010, 1014, 1032, 1046, 1055, 1061, 1093, 1094, 1119, 1120, 1124, 1125, 1138, 1139, 1142, 1159, 1161, 1182, 1200, 1201, 1202, 1204, 1206, 1218, 1226, 1227, 1228, 1246, 1254, 1255], "local": [9, 39, 118, 120, 131, 132, 135, 148, 299, 420, 557, 558, 760, 915, 917, 950, 951, 983, 993, 1109, 1110, 1246], "non": [9, 37, 39, 40, 49, 58, 80, 110, 137, 163, 187, 190, 204, 215, 234, 240, 241, 244, 264, 268, 273, 274, 299, 353, 359, 455, 512, 522, 556, 570, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 608, 609, 615, 620, 655, 678, 680, 688, 689, 690, 692, 698, 702, 709, 727, 731, 737, 738, 739, 742, 744, 760, 784, 799, 802, 816, 825, 827, 828, 831, 843, 846, 847, 870, 923, 940, 1024, 1087, 1108, 1119, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1145, 1162, 1163, 1169, 1174, 1209, 1227, 1246], "env": [9, 149], "back": [9, 80, 172, 260, 299, 555, 653, 760, 829, 870, 1007, 1207, 1228, 1246], "contain": [10, 37, 38, 39, 40, 58, 80, 85, 107, 110, 112, 118, 119, 120, 131, 132, 139, 140, 145, 157, 167, 186, 189, 204, 220, 224, 263, 268, 281, 299, 310, 312, 314, 345, 346, 460, 522, 523, 605, 612, 614, 616, 619, 638, 639, 655, 677, 679, 692, 694, 725, 760, 776, 787, 798, 801, 821, 840, 843, 854, 870, 873, 877, 878, 939, 1093, 1100, 1113, 1159, 1166, 1168, 1170, 1173, 1192, 1193, 1209, 1222, 1246], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 299, 829, 870], "leav": [11, 215, 299, 512, 816, 870], "directli": [11, 35, 66, 87, 118, 146, 148, 152, 237, 299, 428, 429, 430, 570, 736, 760, 782, 870, 1002, 1003, 1004, 1119, 1246, 1255], "json_fil": 11, "ascii": [12, 25, 607, 620, 621, 623, 631, 633, 655, 1161, 1174, 1175, 1177, 1185, 1187, 1209], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 116, 117, 119, 130, 299, 402, 613, 615, 620, 621, 623, 624, 625, 626, 627, 633, 634, 636, 637, 640, 641, 642, 643, 644, 645, 655, 821, 870, 873, 975, 1167, 1169, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1187, 1188, 1190, 1191, 1194, 1195, 1196, 1197, 1209], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 184, 299], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 65, 66, 67, 69, 105, 112, 116, 117, 120, 121, 130, 131, 132, 205, 224, 254, 260, 267, 268, 299, 806, 843, 870, 1228, 1246, 1254], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 80, 86, 87, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 157, 158, 159, 160, 164, 169, 178, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 268, 269, 271, 273, 282, 284, 286, 287, 289, 292, 299, 310, 311, 312, 314, 324, 327, 328, 337, 340, 342, 345, 346, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 389, 405, 407, 420, 425, 426, 427, 428, 429, 430, 448, 451, 455, 456, 457, 459, 460, 461, 463, 464, 466, 467, 468, 469, 471, 473, 476, 477, 481, 486, 489, 500, 507, 510, 513, 518, 519, 521, 523, 527, 530, 532, 534, 550, 551, 552, 554, 557, 558, 563, 566, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 594, 599, 601, 602, 605, 606, 607, 609, 612, 617, 628, 629, 630, 631, 636, 637, 639, 646, 647, 648, 650, 670, 673, 676, 677, 678, 679, 680, 683, 686, 687, 691, 694, 695, 699, 704, 705, 706, 707, 708, 719, 720, 722, 733, 736, 742, 747, 748, 750, 751, 760, 776, 778, 779, 780, 781, 782, 789, 791, 797, 798, 799, 800, 801, 802, 806, 807, 809, 811, 812, 821, 825, 830, 833, 835, 840, 841, 843, 846, 855, 857, 859, 860, 862, 865, 870, 873, 877, 878, 889, 892, 893, 902, 905, 912, 915, 918, 921, 922, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 958, 978, 980, 993, 999, 1000, 1002, 1003, 1004, 1011, 1017, 1024, 1025, 1026, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1047, 1051, 1052, 1056, 1061, 1064, 1075, 1082, 1085, 1088, 1100, 1106, 1109, 1110, 1113, 1115, 1116, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1140, 1143, 1148, 1153, 1155, 1159, 1160, 1161, 1163, 1166, 1171, 1182, 1183, 1184, 1185, 1190, 1191, 1193, 1200, 1201, 1202, 1204, 1227, 1228, 1231, 1234, 1236, 1237, 1246, 1254], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 112], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 115, 116, 117, 118, 130, 136, 171, 184, 203, 215, 236, 237, 256, 297, 299, 406, 409, 412, 534, 646, 647, 648, 652, 709, 790, 816, 829, 870, 982, 985, 1200, 1201, 1202, 1206, 1245], "style": [12, 25, 40, 118, 128, 224, 299], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 307, 615, 629, 642, 760, 873, 1169, 1183], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 307, 609, 615, 760, 1163, 1169, 1224, 1246], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 61, 64, 80, 82, 84, 88, 106, 108, 136, 146, 159, 160, 162, 164, 165, 168, 173, 174, 178, 183, 184, 185, 186, 196, 197, 205, 206, 211, 212, 213, 214, 218, 224, 226, 227, 247, 248, 249, 251, 270, 273, 278, 282, 284, 286, 287, 288, 289, 291, 292, 299, 306, 309, 316, 317, 318, 319, 320, 321, 348, 351, 352, 356, 357, 358, 370, 371, 372, 375, 376, 407, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 440, 441, 446, 448, 454, 464, 466, 467, 468, 470, 471, 473, 486, 497, 514, 515, 516, 518, 524, 525, 526, 537, 540, 542, 548, 549, 550, 551, 556, 560, 563, 564, 565, 566, 570, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 597, 598, 599, 603, 604, 665, 666, 669, 674, 684, 685, 688, 689, 691, 693, 710, 711, 725, 728, 729, 740, 741, 749, 756, 760, 779, 786, 792, 793, 797, 798, 805, 806, 807, 814, 815, 822, 835, 836, 844, 846, 848, 851, 855, 857, 859, 860, 861, 862, 864, 865, 870, 873, 881, 882, 883, 884, 885, 886, 919, 920, 927, 928, 929, 938, 939, 940, 943, 944, 980, 1002, 1003, 1004, 1005, 1009, 1013, 1020, 1023, 1061, 1072, 1089, 1090, 1091, 1108, 1113, 1115, 1119, 1125, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1136, 1151, 1152, 1156, 1220, 1221, 1233, 1246, 1255], "multi": [13, 40, 116, 117, 299, 431, 614, 760, 1168], "automat": [13, 66, 69, 105, 107, 108, 109, 111, 112, 116, 117, 118, 119, 121, 125, 126, 130, 134, 146, 148, 150, 240, 273, 299, 521, 522, 570, 641, 642, 643, 760, 827, 846, 870, 1093, 1119, 1195, 1196, 1197, 1246, 1254], "turn": [13, 58, 59, 60, 86, 87, 116, 117, 130, 653, 781, 782, 789, 791, 811, 812, 821, 870, 1207], "struct": [13, 112, 220, 240, 262, 266, 273, 299, 371, 451, 512, 563, 573, 574, 616, 617, 637, 638, 673, 695, 696, 698, 699, 700, 724, 760, 827, 842, 846, 858, 870, 939, 1087, 1113, 1122, 1123, 1170, 1171, 1189, 1191, 1192, 1246], "v": [13, 14, 45, 66, 67, 170, 299, 590, 760, 1139, 1246], "v2": [13, 122, 133], "out": [13, 19, 58, 59, 60, 112, 138, 234, 237, 299, 332, 343, 489, 490, 510, 606, 610, 750, 825, 870, 897, 907, 1064, 1065, 1085, 1160, 1164], "separ": [14, 15, 29, 32, 37, 58, 114, 116, 117, 130, 222, 224, 257, 264, 266, 299, 314, 487, 492, 523, 613, 690, 695, 696, 699, 700, 760, 842, 870, 1062, 1067, 1167, 1215, 1223, 1246], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 60, 64, 117, 185, 186, 187, 188, 189, 190, 204, 220, 222, 224, 234, 237, 267, 269, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299, 308, 370, 433, 439, 444, 447, 486, 521, 523, 531, 533, 555, 566, 574, 575, 601, 602, 606, 614, 615, 616, 629, 673, 725, 760, 797, 798, 799, 800, 801, 802, 825, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870, 873, 938, 1061, 1123, 1160, 1168, 1169, 1170, 1183, 1234, 1246], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 873], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 116, 117, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 299, 371, 428, 429, 430, 455, 501, 502, 503, 504, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 599, 633, 688, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 806, 807, 825, 843, 870, 939, 1002, 1003, 1004, 1024, 1076, 1077, 1078, 1079, 1113, 1139, 1153, 1187, 1246], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 299, 870], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 117, 138, 139, 141, 168, 184, 185, 204, 207, 258, 277, 299, 453, 534, 760, 781, 804, 870, 1032, 1225, 1246, 1255], "876": 14, "543": 14, "010": [14, 650, 1204], "101": [14, 32, 379, 650, 1204, 1255], "000": [14, 15, 32, 40, 299, 1255], "123": [14, 609, 615, 630, 655, 750, 873, 1163, 1169, 1184, 1209, 1224, 1246], "456": [14, 15, 379, 873, 948, 1224, 1246], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 118, 203, 236, 237, 256, 299, 378, 649, 870, 873, 947, 1203], "control": [15, 16, 40, 69, 87, 88, 144, 299, 570, 760, 782, 789, 870, 1119, 1246], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 60, 71, 80, 90, 99, 105, 107, 109, 111, 114, 116, 117, 119, 121, 125, 126, 127, 128, 130, 134, 135, 137, 144, 146, 147, 149, 150, 157, 159, 163, 170, 171, 173, 174, 184, 192, 203, 204, 207, 208, 219, 220, 238, 244, 245, 249, 252, 263, 267, 270, 281, 283, 293, 299, 325, 341, 347, 359, 370, 371, 373, 387, 390, 395, 397, 407, 421, 422, 424, 428, 429, 430, 434, 436, 442, 450, 464, 466, 474, 475, 484, 491, 494, 495, 500, 505, 509, 512, 559, 563, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 592, 593, 595, 604, 620, 621, 622, 625, 629, 637, 638, 649, 662, 668, 674, 691, 692, 693, 694, 709, 717, 737, 738, 741, 745, 749, 760, 776, 779, 784, 790, 791, 792, 793, 803, 810, 821, 831, 832, 836, 838, 840, 844, 854, 856, 866, 870, 911, 922, 938, 939, 941, 956, 959, 968, 970, 980, 994, 995, 997, 1001, 1002, 1003, 1004, 1008, 1010, 1019, 1031, 1048, 1049, 1059, 1066, 1069, 1070, 1075, 1080, 1084, 1087, 1100, 1101, 1113, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1145, 1146, 1149, 1157, 1174, 1175, 1176, 1179, 1183, 1191, 1192, 1203, 1217, 1230, 1235, 1246, 1255], "place": [15, 16, 37, 58, 157, 166, 172, 194, 195, 196, 224, 230, 232, 237, 245, 248, 263, 271, 299, 324, 492, 593, 601, 760, 776, 832, 835, 840, 870, 879, 889, 1007, 1067, 1116, 1146, 1155, 1246], "float": [15, 16, 37, 40, 52, 53, 58, 121, 136, 139, 140, 141, 142, 143, 146, 148, 154, 164, 170, 173, 206, 227, 238, 245, 291, 299, 352, 371, 375, 376, 407, 425, 426, 427, 428, 429, 430, 435, 440, 446, 448, 454, 457, 461, 464, 466, 467, 468, 473, 481, 500, 514, 518, 524, 537, 548, 549, 550, 551, 560, 563, 564, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 669, 734, 736, 760, 792, 807, 822, 832, 833, 864, 870, 873, 912, 920, 939, 940, 942, 943, 944, 961, 962, 980, 999, 1001, 1002, 1003, 1004, 1009, 1013, 1020, 1031, 1047, 1056, 1057, 1058, 1075, 1089, 1103, 1104, 1112, 1113, 1114, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1137, 1139, 1141, 1142, 1153, 1157, 1216, 1227, 1235, 1246, 1255], "point": [15, 16, 40, 52, 53, 146, 148, 173, 186, 189, 207, 299, 352, 371, 375, 407, 435, 440, 464, 466, 500, 523, 587, 589, 760, 792, 798, 801, 811, 812, 823, 870, 920, 939, 943, 980, 1009, 1013, 1031, 1075, 1113, 1135, 1137, 1227, 1246], "standard": [15, 40, 249, 259, 299, 390, 429, 584, 599, 604, 619, 741, 756, 760, 836, 870, 959, 1003, 1153, 1157, 1173, 1246, 1255], "behaviour": [15, 80, 88, 167, 299, 606, 614, 615, 629, 669, 760, 787, 870, 1160, 1168, 1169, 1183], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 60, 69, 71, 72, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 118, 119, 121, 122, 124, 127, 128, 130, 131, 133, 134, 136, 139, 140, 141, 142, 146, 148, 155, 157, 168, 170, 172, 174, 178, 186, 187, 189, 190, 205, 209, 223, 234, 235, 237, 240, 241, 244, 248, 257, 259, 263, 265, 268, 274, 299, 353, 428, 429, 430, 436, 505, 512, 522, 532, 559, 570, 574, 575, 592, 601, 602, 607, 620, 621, 631, 641, 642, 643, 646, 686, 695, 699, 713, 760, 776, 793, 798, 799, 801, 802, 806, 811, 812, 825, 827, 828, 831, 835, 840, 841, 843, 847, 870, 923, 1001, 1002, 1003, 1004, 1007, 1010, 1080, 1093, 1119, 1123, 1138, 1141, 1145, 1161, 1174, 1175, 1185, 1195, 1196, 1197, 1200, 1223, 1246], "larger": [15, 58, 59, 60, 691, 781, 870], "should": [15, 38, 40, 58, 59, 60, 88, 105, 107, 109, 111, 120, 125, 126, 128, 130, 134, 136, 143, 144, 148, 157, 165, 203, 206, 209, 235, 236, 237, 256, 257, 263, 266, 285, 299, 308, 350, 370, 423, 431, 464, 466, 486, 523, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 590, 599, 673, 709, 722, 725, 737, 738, 750, 760, 776, 786, 791, 806, 807, 812, 829, 833, 835, 840, 842, 870, 873, 916, 938, 996, 1061, 1094, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1139, 1153, 1234, 1246], "ensur": [15, 40, 119, 145, 146, 148, 185, 188, 222, 235, 299, 455, 521, 760, 797, 800, 811, 812, 870, 873, 1227, 1246], "awar": [15, 203, 236, 237, 256, 299, 607, 631, 791, 870, 1161, 1185, 1202], "both": [15, 30, 37, 58, 71, 89, 90, 186, 187, 189, 190, 205, 206, 216, 234, 235, 268, 299, 313, 353, 371, 431, 455, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 756, 760, 771, 798, 799, 801, 802, 806, 807, 817, 825, 843, 870, 923, 1024, 1034, 1246], "limit": [15, 16, 60, 118, 119, 130, 174, 299, 341, 354, 355, 436, 442, 760, 793, 803, 870, 924, 925, 1010, 1246], "represent": [15, 43, 44, 258, 299, 350, 383, 387, 390, 391, 393, 395, 397, 400, 403, 404, 407, 421, 422, 424, 667, 760, 789, 809, 870, 916, 917, 952, 956, 958, 959, 963, 965, 968, 970, 973, 976, 977, 980, 994, 995, 997, 1225, 1229, 1246], "look": [15, 186, 299, 342, 512, 521, 760, 798, 870, 906], "appli": [15, 25, 37, 40, 58, 64, 88, 130, 143, 146, 148, 178, 209, 223, 285, 299, 381, 382, 383, 387, 389, 390, 391, 393, 395, 397, 400, 403, 404, 407, 410, 421, 422, 424, 429, 430, 519, 521, 523, 559, 576, 578, 579, 581, 585, 629, 646, 647, 648, 652, 695, 696, 699, 700, 713, 723, 724, 725, 735, 750, 760, 803, 810, 811, 812, 820, 858, 870, 923, 950, 951, 952, 956, 958, 959, 963, 965, 968, 970, 973, 976, 977, 980, 983, 994, 995, 997, 1003, 1004, 1094, 1124, 1126, 1127, 1129, 1133, 1183, 1200, 1201, 1202, 1206, 1246], "float64": [15, 37, 40, 58, 108, 116, 146, 168, 170, 178, 239, 260, 273, 299, 316, 317, 318, 319, 320, 321, 348, 356, 357, 358, 372, 407, 431, 464, 466, 565, 597, 598, 665, 666, 711, 733, 736, 751, 760, 788, 826, 846, 870, 873, 980, 1228, 1233, 1246], "doe": [15, 37, 39, 58, 80, 88, 99, 105, 107, 108, 109, 111, 112, 116, 117, 118, 120, 121, 125, 126, 130, 131, 134, 136, 160, 172, 191, 204, 205, 225, 235, 236, 237, 265, 273, 276, 299, 302, 423, 449, 512, 522, 642, 643, 671, 756, 760, 780, 791, 806, 812, 841, 846, 850, 870, 926, 996, 1007, 1017, 1018, 1093, 1148, 1236, 1246, 1250], "cover": 15, "nativ": [15, 116, 118, 121, 122, 124, 128, 144, 203, 209, 236, 237, 256, 285, 299, 523, 725, 760, 766, 858, 1094, 1246, 1255], "level": [15, 40, 45, 60, 130, 133, 134, 135, 146, 178, 209, 220, 299, 437, 760, 803, 810, 870], "larg": [15, 16, 19, 80, 118], "maximum": [15, 31, 37, 58, 116, 117, 130, 136, 144, 145, 146, 148, 184, 186, 210, 211, 299, 329, 478, 524, 548, 557, 566, 726, 727, 760, 798, 813, 870, 894, 960, 1053, 1095, 1103, 1109, 1115, 1246], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 80, 105, 106, 109, 110, 116, 119, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 158, 164, 165, 167, 184, 186, 204, 206, 215, 222, 224, 225, 257, 259, 260, 267, 269, 299, 302, 372, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 437, 577, 578, 579, 581, 584, 585, 586, 684, 685, 704, 705, 707, 709, 711, 747, 748, 756, 760, 772, 778, 782, 785, 786, 787, 798, 807, 812, 816, 829, 870, 927, 929, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1028, 1033, 1037, 1038, 1043, 1125, 1151, 1220, 1246, 1250, 1255], "pi": [15, 372, 760, 927, 929, 1151, 1220, 1246], "e": [15, 36, 37, 39, 41, 42, 45, 58, 106, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 136, 184, 192, 202, 252, 254, 259, 267, 299, 307, 314, 425, 431, 455, 514, 523, 528, 529, 531, 532, 533, 534, 535, 594, 599, 642, 643, 711, 725, 750, 760, 785, 809, 823, 870, 873, 999, 1000, 1024, 1140, 1153, 1227, 1246, 1255], "const": 15, "15": [15, 40, 138, 145, 186, 196, 209, 234, 299, 370, 373, 399, 406, 420, 559, 575, 585, 618, 696, 747, 760, 798, 825, 870, 938, 941, 979, 993, 1172, 1246], "141592653589793": 15, "718281828459045": [15, 425, 514, 760, 999, 1089, 1246], "align": [15, 20, 21, 40, 80, 88, 299], "numer": [15, 21, 37, 40, 58, 158, 165, 206, 215, 224, 267, 299, 307, 353, 441, 455, 516, 538, 540, 560, 569, 594, 616, 655, 659, 669, 760, 772, 778, 786, 807, 816, 870, 873, 923, 940, 1000, 1024, 1041, 1140, 1147, 1170, 1209, 1227, 1246, 1255], "cleanli": [15, 184, 299], "line": [15, 25, 40, 116, 117, 121, 130, 184, 198, 200, 225, 299, 302, 614, 1168], "up": [15, 40, 72, 116, 117, 119, 130, 203, 206, 236, 237, 256, 299, 314, 352, 523, 760, 806, 807, 812, 870, 873, 920, 1246], "xx": [15, 81, 83, 145, 148, 711, 873], "yy": [15, 81, 83, 145, 148, 873], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 60, 138, 146, 234, 299, 309, 398, 399, 402, 406, 420, 454, 556, 566, 575, 577, 585, 600, 676, 743, 748, 760, 781, 782, 803, 810, 821, 825, 838, 870, 873, 975, 979, 993, 1094, 1125, 1246], "111": 15, "100": [15, 22, 32, 40, 108, 111, 116, 117, 125, 130, 134, 244, 299, 570, 592, 607, 617, 618, 631, 649, 760, 831, 870, 1090, 1119, 1126, 1127, 1129, 1145, 1161, 1171, 1172, 1185, 1203, 1246, 1255], "988": 15, "44": [15, 216, 299, 374, 760, 817, 870], "444": 15, "23": [15, 138, 186, 234, 299, 379, 383, 387, 403, 406, 422, 575, 578, 579, 581, 584, 585, 586, 706, 709, 746, 747, 748, 760, 798, 825, 870, 873, 948, 956, 1255], "789": [15, 873], "fmt": [16, 453, 714, 760, 804, 870], "floatfmt": 16, "mix": [16, 940, 1202, 1246], "how": [16, 39, 40, 80, 88, 108, 111, 119, 128, 135, 167, 205, 224, 267, 268, 299, 350, 373, 405, 406, 420, 454, 482, 483, 484, 555, 569, 583, 617, 618, 646, 648, 706, 750, 760, 787, 806, 843, 870, 916, 941, 978, 979, 993, 1057, 1058, 1059, 1131, 1171, 1172, 1200, 1202, 1246], "full": [16, 48, 80, 85, 88, 116, 117, 120, 130, 131, 132, 136, 186, 187, 189, 190, 234, 299, 575, 646, 647, 648, 652, 760, 798, 799, 801, 802, 811, 812, 825, 870, 873, 1200, 1201, 1202, 1206, 1255], "scientif": 16, "notat": [16, 40, 299], "small": [16, 119, 145, 207, 299, 406, 791, 870, 1255], "2304980958725870923": 16, "1e6": 16, "1e": [16, 139, 140, 141, 142], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 991], "00000001": [16, 676, 760], "plai": [17, 690], "sam": 17, "As": [17, 71, 89, 90, 105, 107, 108, 109, 111, 121, 125, 126, 134, 299, 512, 750, 870], "time": [17, 39, 48, 50, 64, 69, 85, 86, 87, 128, 130, 172, 186, 187, 189, 190, 206, 234, 269, 299, 347, 377, 378, 379, 380, 381, 385, 386, 402, 405, 406, 409, 411, 412, 420, 423, 480, 481, 512, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 595, 646, 648, 652, 667, 668, 689, 690, 704, 705, 706, 707, 708, 709, 715, 747, 748, 760, 781, 782, 798, 799, 801, 802, 807, 821, 825, 870, 873, 911, 946, 947, 948, 949, 954, 955, 975, 978, 979, 982, 984, 985, 993, 996, 1007, 1055, 1057, 1058, 1123, 1149, 1200, 1202, 1206, 1229, 1230, 1246, 1255], "goe": 17, "By": [17, 19, 35, 80, 116, 117, 130, 186, 205, 206, 234, 244, 249, 268, 269, 270, 299, 402, 406, 420, 505, 575, 578, 579, 580, 581, 582, 584, 585, 586, 592, 604, 674, 691, 693, 704, 705, 707, 708, 709, 722, 741, 747, 748, 749, 760, 781, 798, 806, 807, 825, 831, 836, 844, 870, 975, 979, 993, 1080, 1145, 1157, 1227, 1235, 1246], "begin": [17, 40, 299, 428, 429, 430, 614, 760, 1002, 1003, 1004, 1168, 1246], "beauti": 17, "friendship": 17, "len_byt": [17, 621, 622, 1175, 1176], "len": [17, 40, 144, 146, 204, 299, 359, 360, 495, 523, 760, 1070, 1246], "u32": [17, 64, 118, 156, 158, 163, 221, 275, 276, 281, 290, 292, 299, 308, 315, 322, 323, 324, 325, 326, 329, 330, 359, 360, 451, 474, 478, 479, 483, 494, 541, 553, 566, 574, 578, 579, 581, 584, 585, 586, 590, 609, 620, 621, 667, 671, 677, 682, 686, 687, 692, 694, 719, 732, 760, 775, 778, 784, 819, 849, 850, 854, 863, 865, 870, 889, 890, 891, 894, 895, 912, 917, 1020, 1053, 1054, 1058, 1069, 1115, 1123, 1163, 1174, 1175, 1229, 1232, 1234, 1246], "37": 17, "beaut": 17, "48": [17, 234, 299, 575, 760, 825, 870], "fmt_str_length": 17, "50": [17, 32, 40, 164, 172, 184, 299, 353, 406, 420, 760, 923, 940, 993, 1246], "element": [18, 19, 30, 145, 148, 157, 163, 201, 224, 235, 249, 263, 270, 299, 314, 316, 317, 318, 319, 320, 321, 347, 351, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 376, 432, 433, 437, 449, 460, 474, 482, 483, 485, 486, 487, 494, 495, 501, 502, 503, 504, 515, 516, 523, 555, 556, 566, 569, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 596, 597, 598, 603, 604, 637, 638, 649, 665, 666, 668, 674, 691, 693, 737, 738, 741, 749, 760, 776, 784, 835, 836, 840, 844, 870, 880, 881, 882, 883, 884, 885, 886, 911, 919, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 943, 944, 1005, 1006, 1011, 1019, 1032, 1046, 1048, 1049, 1057, 1058, 1060, 1061, 1062, 1069, 1070, 1076, 1077, 1078, 1079, 1090, 1091, 1094, 1108, 1115, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1139, 1150, 1151, 1152, 1156, 1157, 1191, 1192, 1203, 1217, 1220, 1221, 1225, 1230, 1231, 1235, 1246], "empti": [18, 36, 37, 58, 96, 108, 116, 117, 121, 127, 130, 159, 160, 186, 199, 215, 299, 722, 739, 779, 780, 798, 816, 870, 873, 922, 926, 1027, 1246], "alwai": [18, 37, 39, 58, 64, 116, 145, 185, 188, 209, 285, 299, 531, 646, 704, 750, 812, 870, 1094, 1200, 1246, 1254, 1255], "neg": [18, 49, 116, 117, 122, 124, 128, 137, 186, 187, 189, 190, 192, 208, 234, 244, 245, 247, 252, 276, 299, 505, 506, 559, 575, 592, 593, 600, 635, 760, 798, 799, 801, 802, 825, 831, 832, 834, 849, 850, 870, 1019, 1049, 1080, 1081, 1145, 1146, 1154, 1189, 1217, 1246], "result": [18, 37, 43, 44, 45, 58, 59, 60, 80, 88, 109, 111, 118, 119, 120, 121, 130, 133, 135, 136, 148, 172, 186, 189, 191, 205, 220, 224, 234, 237, 244, 245, 260, 269, 276, 278, 299, 406, 409, 412, 420, 428, 429, 430, 434, 449, 471, 511, 512, 521, 523, 555, 563, 570, 571, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 591, 592, 593, 636, 637, 648, 669, 694, 695, 696, 699, 700, 704, 705, 706, 707, 708, 709, 724, 733, 736, 737, 738, 751, 760, 777, 781, 798, 799, 801, 802, 806, 811, 812, 821, 825, 829, 831, 832, 850, 851, 870, 879, 939, 979, 982, 985, 993, 1002, 1003, 1004, 1007, 1018, 1047, 1086, 1094, 1113, 1119, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1143, 1145, 1146, 1190, 1191, 1202, 1227, 1246, 1254, 1255], "being": [18, 87, 116, 117, 118, 130, 136, 158, 171, 257, 267, 268, 299, 314, 370, 406, 451, 578, 579, 580, 581, 582, 584, 585, 586, 710, 760, 778, 782, 790, 791, 843, 870, 918, 938, 979, 1020, 1113, 1246, 1255], "content": [18, 595, 760, 1149, 1246], "final": [18, 40, 80, 135, 299, 428, 429, 430, 760, 791, 870, 1002, 1003, 1004, 1246], "item": [18, 88, 117, 184, 235, 238, 299, 332, 373, 433, 481, 484, 490, 492, 500, 589, 638, 760, 897, 941, 1006, 1056, 1059, 1065, 1067, 1075, 1137, 1192, 1246], "num": [18, 40, 262, 299, 455, 760, 1024, 1246], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 60, 64, 80, 88, 112, 119, 130, 138, 146, 148, 160, 172, 183, 184, 186, 192, 194, 196, 197, 202, 219, 223, 224, 226, 230, 232, 234, 240, 252, 273, 278, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 309, 313, 322, 323, 324, 326, 353, 361, 364, 373, 377, 379, 381, 382, 385, 387, 391, 393, 395, 398, 399, 400, 405, 406, 407, 410, 420, 423, 449, 450, 454, 460, 470, 475, 484, 491, 506, 509, 515, 531, 533, 542, 556, 559, 570, 575, 600, 650, 662, 676, 688, 695, 704, 707, 710, 713, 715, 717, 722, 724, 745, 748, 760, 781, 782, 798, 803, 805, 810, 820, 821, 825, 827, 837, 838, 846, 851, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 873, 923, 941, 946, 948, 954, 978, 993, 996, 999, 1019, 1032, 1049, 1059, 1066, 1081, 1084, 1090, 1094, 1108, 1119, 1138, 1141, 1204, 1217, 1246, 1255], "size": [19, 45, 60, 116, 117, 118, 144, 145, 146, 148, 150, 170, 267, 299, 571, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 683, 719, 720, 737, 738, 760, 781, 870, 1001, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1246, 1255], "overwrit": [19, 38, 39, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 134, 154, 268, 299, 309, 760, 791, 870], "chunk": [19, 60, 114, 116, 117, 128, 130, 133, 134, 135, 146, 148, 172, 204, 219, 299, 313, 567, 760, 870, 879, 921, 1007, 1016, 1100, 1116, 1222, 1246], "stream": [19, 41, 42, 58, 59, 60, 86, 87, 124, 157, 185, 188, 205, 263, 265, 299, 521, 760, 776, 781, 782, 789, 791, 797, 800, 806, 811, 812, 816, 821, 833, 835, 840, 841, 870], "engin": [19, 38, 118, 119, 121, 150, 185, 188, 205, 209, 265, 285, 299, 521, 760, 797, 800, 806, 811, 812, 816, 841, 858, 870, 1094, 1246], "determin": [19, 37, 40, 58, 78, 80, 88, 108, 111, 116, 117, 118, 121, 127, 128, 130, 135, 137, 155, 165, 178, 186, 189, 203, 204, 209, 224, 234, 264, 269, 299, 350, 389, 405, 406, 420, 451, 512, 522, 531, 563, 569, 570, 578, 579, 580, 581, 582, 584, 585, 586, 599, 607, 617, 618, 646, 648, 649, 706, 733, 736, 751, 760, 798, 801, 825, 870, 916, 958, 978, 979, 993, 1020, 1087, 1093, 1113, 1119, 1153, 1161, 1171, 1172, 1200, 1202, 1203, 1246], "schema": [19, 33, 36, 38, 39, 64, 81, 82, 83, 88, 100, 101, 103, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 128, 129, 130, 134, 135, 144, 146, 155, 159, 160, 168, 170, 204, 209, 216, 220, 259, 299, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 382, 511, 512, 531, 617, 618, 676, 742, 760, 779, 780, 788, 811, 812, 817, 829, 853, 858, 870, 873, 903, 926, 1171, 1172, 1246], "thread": [19, 37, 58, 87, 114, 116, 117, 119, 150, 299, 314, 486, 523, 760, 782, 870, 1061], "pool": [19, 87, 150, 782, 870], "For": [19, 39, 40, 116, 117, 119, 120, 121, 130, 131, 132, 167, 172, 205, 206, 225, 234, 285, 299, 302, 428, 429, 430, 512, 523, 532, 568, 599, 606, 614, 615, 616, 629, 695, 699, 709, 713, 714, 756, 760, 787, 807, 825, 858, 870, 1002, 1003, 1004, 1007, 1034, 1117, 1153, 1160, 1168, 1169, 1170, 1183, 1227, 1246, 1250], "some": [19, 35, 40, 71, 90, 108, 116, 117, 118, 121, 130, 154, 167, 299, 756, 787, 870, 1032, 1246, 1255], "dataset": [19, 45, 51, 116, 117, 128, 130, 136, 205, 299, 471, 760, 772, 806, 811, 812, 870, 1047, 1246], "esp": 19, "have": [19, 35, 39, 40, 48, 71, 80, 90, 106, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 172, 203, 205, 228, 234, 236, 237, 256, 276, 299, 370, 428, 429, 430, 523, 532, 566, 570, 575, 616, 760, 785, 806, 816, 825, 833, 849, 850, 870, 873, 938, 940, 1002, 1003, 1004, 1007, 1017, 1115, 1119, 1202, 1246, 1255], "too": [19, 574, 760, 791, 870], "optimist": 19, "lead": [19, 45, 112, 136, 186, 187, 189, 190, 213, 234, 244, 251, 299, 444, 447, 505, 521, 523, 575, 591, 592, 624, 640, 641, 643, 663, 691, 760, 798, 799, 801, 802, 811, 812, 825, 831, 853, 858, 870, 1080, 1094, 1143, 1145, 1178, 1194, 1195, 1197, 1246], "memori": [19, 60, 88, 105, 106, 109, 110, 111, 116, 117, 118, 121, 122, 128, 130, 133, 134, 135, 154, 172, 209, 237, 246, 285, 299, 555, 567, 594, 760, 781, 870, 1007, 1094, 1116, 1147, 1148, 1246], "error": [19, 39, 87, 116, 117, 130, 158, 224, 235, 299, 309, 343, 348, 470, 489, 492, 510, 542, 606, 610, 614, 616, 617, 619, 646, 647, 648, 652, 760, 778, 782, 853, 858, 870, 907, 912, 1064, 1067, 1085, 1160, 1164, 1168, 1170, 1171, 1173, 1200, 1201, 1202, 1206, 1246], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 60, 80, 81, 83, 88, 97, 99, 104, 108, 109, 111, 112, 116, 117, 118, 121, 122, 124, 125, 128, 130, 133, 134, 135, 136, 139, 140, 144, 146, 155, 157, 159, 167, 172, 175, 178, 180, 184, 185, 186, 188, 191, 192, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 215, 220, 237, 238, 247, 252, 253, 256, 258, 263, 265, 267, 268, 275, 276, 281, 283, 285, 293, 299, 325, 433, 445, 450, 475, 487, 512, 555, 556, 571, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 600, 602, 613, 617, 618, 662, 664, 683, 686, 692, 694, 699, 700, 713, 717, 719, 720, 735, 737, 738, 745, 750, 760, 776, 779, 781, 787, 791, 794, 795, 796, 798, 803, 806, 807, 808, 810, 812, 816, 834, 838, 839, 840, 841, 843, 849, 850, 854, 856, 858, 866, 870, 1006, 1007, 1015, 1019, 1062, 1108, 1120, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1154, 1167, 1171, 1172, 1217, 1219, 1246, 1255], "per": [19, 37, 40, 58, 144, 146, 157, 184, 220, 221, 241, 248, 263, 274, 288, 290, 291, 299, 314, 332, 486, 489, 490, 510, 523, 602, 673, 686, 760, 776, 828, 835, 840, 847, 861, 863, 864, 870, 897, 1061, 1064, 1065, 1085, 1234, 1246], "everi": [19, 37, 58, 116, 117, 130, 180, 186, 189, 253, 256, 269, 299, 327, 328, 329, 330, 332, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 406, 420, 433, 445, 478, 479, 484, 487, 490, 491, 501, 506, 509, 574, 613, 664, 695, 696, 699, 700, 760, 791, 796, 798, 801, 839, 870, 892, 893, 894, 895, 897, 930, 931, 932, 933, 934, 935, 936, 937, 938, 979, 993, 1006, 1015, 1017, 1053, 1054, 1059, 1062, 1065, 1066, 1076, 1081, 1084, 1123, 1167, 1219, 1246], "process": [19, 37, 58, 59, 60, 116, 117, 118, 130, 150, 299, 781, 870], "liter": [20, 21, 25, 39, 118, 121, 147, 148, 149, 240, 241, 244, 268, 273, 274, 299, 309, 342, 353, 379, 426, 427, 434, 441, 446, 448, 455, 473, 518, 522, 538, 540, 550, 551, 560, 570, 606, 609, 629, 630, 659, 669, 678, 680, 688, 689, 690, 698, 702, 703, 706, 722, 727, 731, 739, 742, 744, 746, 760, 793, 827, 828, 831, 843, 846, 847, 870, 873, 906, 923, 948, 1008, 1024, 1119, 1138, 1141, 1145, 1160, 1163, 1183, 1184, 1246], "left": [20, 21, 40, 66, 80, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 299, 371, 428, 429, 430, 454, 455, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 623, 667, 688, 695, 696, 699, 700, 704, 705, 707, 708, 713, 735, 747, 748, 750, 760, 798, 799, 801, 802, 806, 807, 825, 843, 870, 939, 1002, 1003, 1004, 1024, 1113, 1139, 1177, 1229, 1246], "center": [20, 21, 40, 299, 428, 429, 430, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 760, 1002, 1003, 1004, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "cell": [20, 21, 40, 299], "valueerror": [20, 25], "recognis": [20, 21, 25, 143], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 80, 112, 121, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 269, 299, 302, 377, 378, 379, 380, 381, 383, 385, 386, 387, 389, 390, 391, 393, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 481, 575, 578, 579, 580, 581, 582, 584, 585, 586, 646, 648, 667, 704, 705, 707, 708, 709, 715, 722, 747, 748, 760, 778, 798, 799, 801, 802, 807, 825, 870, 873, 945, 946, 947, 948, 949, 950, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1043, 1056, 1057, 1058, 1103, 1104, 1142, 1200, 1202, 1229, 1246], "date": [21, 40, 48, 80, 116, 117, 119, 121, 127, 130, 136, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 299, 302, 378, 379, 380, 383, 386, 389, 390, 397, 398, 399, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 481, 575, 578, 579, 580, 581, 582, 584, 585, 586, 646, 647, 667, 704, 705, 707, 708, 715, 722, 746, 760, 778, 798, 799, 801, 802, 807, 825, 870, 873, 947, 948, 949, 952, 955, 956, 958, 959, 960, 962, 963, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1043, 1056, 1057, 1058, 1103, 1104, 1142, 1200, 1201, 1229, 1246], "333": [21, 588, 760, 1136, 1246], "mno": [21, 25], "2023": [21, 40, 112, 138, 204, 299, 379, 709, 722, 873, 948], "29": [21, 146, 377, 398, 946, 971], "2001": [21, 378, 383, 386, 389, 397, 402, 403, 404, 406, 411, 420, 421, 422, 423, 578, 579, 581, 584, 585, 586, 646, 760, 873, 947, 952, 955, 956, 958, 960, 961, 962, 963, 965, 967, 968, 970, 973, 975, 976, 977, 979, 984, 993, 994, 995, 996, 997, 1200], "null": [21, 37, 39, 58, 66, 80, 88, 108, 116, 117, 126, 130, 136, 154, 157, 159, 163, 164, 167, 169, 174, 178, 179, 197, 205, 212, 213, 214, 221, 224, 227, 244, 245, 248, 249, 250, 251, 255, 260, 263, 266, 268, 270, 273, 281, 299, 310, 312, 313, 314, 324, 327, 328, 332, 341, 343, 353, 359, 361, 364, 373, 375, 376, 402, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 430, 431, 434, 435, 436, 442, 454, 464, 466, 467, 468, 474, 476, 477, 484, 485, 488, 489, 490, 493, 494, 501, 502, 503, 504, 505, 510, 512, 523, 551, 552, 553, 556, 567, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 592, 593, 594, 596, 601, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 619, 620, 621, 626, 627, 628, 635, 637, 638, 639, 650, 655, 656, 657, 658, 667, 677, 678, 679, 680, 688, 689, 690, 692, 694, 698, 711, 722, 727, 731, 737, 738, 742, 744, 750, 760, 776, 779, 784, 787, 793, 805, 806, 819, 829, 831, 832, 835, 840, 842, 843, 846, 848, 854, 870, 877, 878, 880, 889, 892, 893, 897, 907, 922, 923, 941, 943, 944, 986, 987, 988, 989, 990, 991, 992, 1000, 1002, 1003, 1004, 1008, 1010, 1017, 1023, 1039, 1040, 1048, 1051, 1052, 1055, 1059, 1060, 1063, 1064, 1065, 1068, 1069, 1077, 1079, 1080, 1085, 1087, 1094, 1107, 1108, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1140, 1145, 1146, 1150, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1180, 1181, 1182, 1189, 1191, 1192, 1193, 1204, 1209, 1225, 1227, 1228, 1229, 1236, 1246, 1254, 1255], "07": [21, 116, 379, 405, 406, 420, 646, 704, 707, 715, 873, 948, 978, 1200], "05": [21, 136, 139, 140, 141, 142, 146, 158, 206, 269, 299, 379, 380, 381, 382, 387, 391, 393, 395, 400, 405, 407, 409, 410, 412, 413, 704, 707, 778, 807, 870, 873, 948, 949, 950, 951, 978, 979, 982, 983, 985, 986, 993], "visibl": [22, 170, 299, 1001, 1246], "eg": [22, 30, 40, 88, 119, 152, 299, 406, 646, 648, 669, 760, 1017, 1200, 1202, 1246], "low": [22, 118, 150, 563, 760, 1113, 1246], "rang": [22, 40, 118, 119, 164, 170, 186, 204, 299, 372, 383, 397, 403, 404, 406, 420, 421, 454, 683, 689, 703, 704, 705, 706, 707, 708, 719, 720, 746, 747, 748, 760, 798, 870, 940, 952, 970, 976, 977, 979, 993, 994, 1001, 1108, 1246], "98": [22, 196, 299, 347, 444, 447, 601, 649, 668, 760, 1203], "99": [22, 40, 173, 174, 196, 199, 268, 299, 308, 347, 434, 436, 444, 447, 601, 668, 750, 760, 792, 793, 843, 870, 999, 1008, 1246], "tbl_col": 22, "95": [22, 308, 760], "96": [22, 308, 760], "97": [22, 196, 299, 308, 760], "move": [23, 237, 299, 428, 429, 430, 578, 579, 581, 585, 760, 1002, 1003, 1004, 1126, 1127, 1129, 1133, 1246], "inlin": [23, 237, 299, 606, 614, 615, 629, 1160, 1168, 1169, 1183], "parenthes": 23, "inform": [24, 28, 38, 85, 120, 128, 131, 132, 135, 139, 141, 162, 164, 225, 299, 302, 471, 599, 606, 614, 615, 629, 760, 821, 870, 917, 1047, 1153, 1160, 1168, 1169, 1183, 1246, 1250], "below": [24, 39, 120, 131, 132, 167, 186, 224, 299, 436, 704, 705, 707, 708, 747, 748, 750, 756, 760, 787, 798, 870], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 80, 112], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 614, 619, 1168, 1173], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 85, 118, 120, 131, 132, 146, 157, 164, 170, 222, 237, 263, 264, 267, 268, 299, 371, 407, 451, 455, 563, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 636, 637, 641, 642, 695, 699, 737, 738, 760, 776, 840, 843, 870, 873, 939, 940, 980, 1001, 1020, 1024, 1113, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1190, 1191, 1195, 1236, 1246], "divid": [25, 371, 406, 420, 428, 429, 430, 471, 563, 760, 939, 979, 993, 1002, 1003, 1004, 1047, 1113, 1246], "same": [25, 39, 40, 68, 71, 80, 86, 87, 88, 89, 90, 122, 130, 139, 140, 141, 142, 144, 152, 175, 185, 205, 209, 224, 237, 248, 265, 273, 274, 278, 285, 299, 306, 313, 339, 375, 376, 437, 444, 447, 511, 527, 530, 555, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 602, 620, 658, 760, 781, 782, 794, 797, 806, 811, 812, 835, 841, 846, 847, 851, 870, 875, 880, 904, 939, 943, 944, 948, 1086, 1094, 1113, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1174, 1237, 1246], "dens": [25, 184, 299, 566, 760, 1115, 1246], "space": [25, 186, 299, 798, 870], "horizont": [25, 88, 178, 194, 210, 211, 212, 213, 217, 218, 250, 251, 267, 299, 678, 680, 689, 690, 695, 696, 698, 699, 700, 702, 710, 713, 727, 731, 735, 744], "markdown": 25, "compat": [25, 40, 45, 60, 299, 606, 608, 609, 614, 615, 616, 629, 630, 870, 873, 1160, 1162, 1163, 1168, 1169, 1170, 1183, 1184], "utf8": [25, 116, 117, 130], "No": [25, 653, 1207], "round": [25, 40, 82, 112, 118, 299, 352, 358, 440, 588, 665, 760, 920, 1013, 1136, 1246], "corner": [25, 40, 112, 299], "op": [25, 148, 299, 569, 760, 870, 1202, 1246], "one": [25, 37, 38, 40, 58, 69, 80, 97, 105, 107, 108, 109, 110, 111, 116, 117, 121, 125, 126, 127, 130, 147, 148, 149, 152, 174, 175, 184, 185, 186, 187, 189, 190, 203, 215, 224, 234, 235, 236, 242, 244, 259, 262, 279, 299, 308, 371, 436, 437, 444, 447, 505, 512, 516, 574, 575, 592, 601, 615, 631, 725, 740, 750, 756, 760, 793, 794, 797, 798, 799, 801, 802, 816, 825, 830, 831, 848, 852, 870, 879, 939, 1010, 1043, 1080, 1087, 1091, 1113, 1123, 1145, 1169, 1185, 1210, 1246, 1250], "more": [25, 40, 43, 45, 60, 69, 80, 88, 89, 90, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 139, 141, 146, 148, 152, 162, 164, 175, 202, 203, 207, 209, 215, 220, 225, 235, 236, 238, 259, 265, 285, 299, 302, 311, 314, 340, 437, 471, 500, 513, 516, 521, 523, 554, 589, 599, 615, 620, 646, 647, 648, 670, 711, 740, 750, 760, 816, 841, 870, 873, 880, 905, 917, 940, 1043, 1047, 1075, 1088, 1094, 1137, 1153, 1169, 1174, 1200, 1201, 1202, 1231, 1246, 1250, 1255], "semigraph": 25, "box": [25, 209, 299], "draw": [25, 30, 145, 1255], "found": [25, 37, 40, 58, 66, 92, 101, 103, 108, 112, 168, 299, 590, 619, 644, 645, 646, 648, 760, 870, 1139, 1173, 1198, 1199, 1200, 1202, 1246, 1254], "unicod": 25, "block": [25, 87, 185, 188, 265, 299, 750, 782, 797, 800, 823, 841, 849, 850, 858, 870, 1138, 1141, 1246], "http": [25, 40, 41, 42, 106, 118, 119, 154, 162, 299, 614, 616, 1168, 1170], "en": [25, 40, 299], "wikipedia": 25, "org": [25, 41, 42, 106, 118, 119, 154, 162, 299], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 299], "etc": [26, 39, 40, 116, 120, 122, 124, 131, 132, 133, 299, 760, 873, 1138, 1141, 1246], "between": [29, 88, 143, 144, 146, 148, 162, 227, 291, 299, 348, 373, 374, 455, 484, 492, 501, 502, 503, 504, 556, 563, 564, 582, 605, 684, 685, 691, 693, 734, 737, 738, 760, 822, 864, 870, 912, 917, 941, 942, 1024, 1059, 1067, 1076, 1077, 1078, 1079, 1108, 1113, 1114, 1130, 1159, 1246], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 60, 64, 150, 164, 174, 185, 211, 224, 234, 299, 354, 361, 366, 436, 512, 555, 566, 570, 575, 578, 591, 638, 727, 740, 760, 793, 797, 825, 870, 924, 930, 934, 940, 1010, 1087, 1115, 1126, 1143, 1192, 1246], "tbl_row": 30, "also": [32, 37, 40, 58, 69, 71, 108, 118, 121, 127, 130, 144, 145, 146, 147, 148, 152, 168, 185, 186, 187, 189, 190, 216, 220, 234, 236, 240, 248, 268, 273, 276, 299, 361, 364, 402, 405, 437, 455, 523, 566, 570, 578, 579, 580, 581, 582, 584, 585, 586, 602, 641, 642, 695, 696, 699, 700, 704, 713, 715, 735, 750, 759, 760, 766, 797, 798, 799, 801, 802, 817, 825, 827, 835, 843, 846, 848, 850, 870, 873, 978, 1024, 1115, 1119, 1162, 1163, 1195, 1246, 1250], "char": [32, 615, 1169], "omit": [32, 108, 112, 144, 146, 148, 152, 220, 237, 299, 719, 747, 748, 873], "set_decimal_separ": 32, "x": [32, 66, 67, 72, 80, 88, 106, 112, 116, 117, 119, 130, 144, 146, 154, 170, 194, 198, 200, 205, 215, 224, 225, 236, 237, 267, 299, 302, 307, 309, 311, 372, 426, 427, 441, 446, 448, 449, 473, 480, 492, 516, 518, 520, 521, 523, 538, 540, 543, 544, 545, 546, 547, 550, 551, 554, 560, 561, 569, 570, 574, 596, 599, 637, 659, 660, 667, 669, 676, 678, 680, 684, 685, 695, 696, 698, 713, 722, 724, 727, 731, 735, 744, 750, 760, 806, 812, 816, 834, 870, 873, 917, 1010, 1045, 1094, 1119, 1150, 1153, 1191, 1229, 1246, 1254], "1234567": 32, "987654": [32, 873], "10101": 32, "y": [32, 72, 80, 88, 106, 112, 144, 146, 154, 170, 198, 200, 205, 215, 224, 225, 236, 237, 267, 299, 302, 307, 309, 311, 409, 412, 426, 427, 446, 448, 473, 480, 492, 518, 520, 523, 543, 544, 545, 546, 547, 550, 551, 554, 561, 569, 570, 574, 646, 647, 648, 660, 669, 676, 678, 680, 684, 685, 698, 709, 722, 727, 731, 744, 760, 806, 816, 834, 870, 873, 917, 982, 985, 1119, 1200, 1201, 1202, 1246], "1234": [32, 588, 760, 1136, 1246], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 146, 186, 206, 269, 299, 377, 378, 380, 385, 398, 399, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 578, 579, 581, 584, 585, 586, 646, 648, 652, 707, 709, 747, 748, 760, 798, 807, 870, 873, 946, 947, 949, 950, 951, 954, 955, 956, 962, 963, 968, 971, 972, 973, 975, 978, 979, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1200, 1202, 1206], "321": [32, 1255], "strip": [33, 624, 634, 641, 642, 643, 644, 645, 1178, 1188, 1195, 1196, 1197], "trail": [33, 184, 299, 634, 640, 641, 642, 1188, 1194, 1195, 1196], "zero": [33, 40, 105, 106, 115, 116, 117, 122, 124, 128, 145, 154, 174, 203, 235, 254, 260, 299, 436, 512, 516, 590, 599, 655, 669, 760, 779, 793, 870, 922, 1010, 1087, 1153, 1209, 1222, 1227, 1228, 1246], "enabl": [33, 34, 71, 89, 90, 139, 140, 141, 142, 151, 240, 273, 299, 310, 312, 570, 591, 607, 631, 673, 756, 760, 781, 827, 846, 870, 877, 878, 1119, 1143, 1161, 1185, 1234, 1246], "d": [33, 36, 37, 39, 40, 41, 42, 45, 108, 136, 184, 186, 191, 192, 196, 205, 252, 254, 267, 271, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 307, 309, 386, 409, 412, 455, 559, 594, 609, 615, 637, 646, 647, 648, 688, 709, 715, 760, 798, 806, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 917, 955, 982, 985, 1024, 1055, 1163, 1169, 1191, 1200, 1201, 1202, 1246], "01": [33, 80, 146, 158, 164, 184, 186, 234, 269, 299, 377, 378, 379, 380, 381, 382, 386, 387, 390, 391, 393, 395, 397, 398, 399, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 575, 578, 579, 581, 584, 585, 586, 646, 647, 648, 652, 704, 705, 707, 709, 760, 778, 798, 825, 870, 873, 947, 948, 949, 950, 951, 955, 956, 962, 963, 968, 971, 972, 973, 975, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1200, 1201, 1202, 1206], "6789": 33, "scale": [33, 49, 170, 299, 523, 559, 649, 760, 1001, 1203, 1246], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 108, 120, 121, 131, 132, 144, 165, 167, 171, 185, 188, 222, 240, 241, 242, 248, 266, 273, 274, 278, 299, 307, 385, 431, 434, 555, 602, 606, 614, 615, 629, 686, 688, 689, 690, 711, 739, 742, 760, 786, 790, 797, 800, 827, 828, 830, 835, 842, 846, 847, 851, 870, 946, 954, 1008, 1160, 1168, 1169, 1183, 1246, 1250], "verbos": [34, 139, 141, 152, 615, 1169], "debug": [34, 781, 791, 811, 812, 870, 1255], "log": [34, 82, 347, 425, 516, 540, 560, 668, 760, 911, 999, 1230, 1246], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 67, 81, 83, 85, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146, 177, 203, 222, 229, 235, 236, 237, 239, 255, 256, 264, 299, 522, 574, 760, 823, 826, 870, 1093, 1246], "show": [35, 40, 68, 164, 167, 184, 207, 221, 299, 451, 760, 787, 821, 833, 870, 1020, 1246], "variabl": [35, 61, 66, 128, 135, 147, 150, 215, 257, 299, 816, 870, 1223, 1246, 1254], "chang": [35, 80, 87, 116, 117, 118, 136, 267, 268, 269, 275, 299, 314, 370, 371, 373, 406, 451, 522, 523, 556, 563, 574, 578, 579, 580, 581, 582, 584, 585, 586, 711, 760, 782, 843, 849, 870, 917, 918, 938, 939, 979, 1020, 1093, 1108, 1113, 1123, 1148, 1246], "restrict": [35, 638, 1192], "dictionari": [35, 40, 72, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 129, 130, 134, 203, 222, 235, 236, 237, 255, 256, 299, 522, 760, 870, 1093, 1246], "those": [35, 40, 116, 121, 237, 268, 299, 566, 614, 711, 725, 760, 843, 870, 873, 1115, 1168, 1246], "been": [35, 40, 154, 155, 176, 179, 187, 188, 189, 190, 195, 231, 253, 280, 299, 314, 365, 366, 367, 368, 369, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 523, 561, 566, 576, 578, 579, 580, 581, 582, 584, 585, 586, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 660, 663, 664, 681, 701, 702, 723, 760, 799, 800, 801, 802, 811, 839, 853, 870, 880, 934, 935, 936, 937, 1029, 1035, 1057, 1070, 1085, 1093, 1115, 1124, 1140, 1142, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1218, 1219, 1246], "set_fmt_float": 35, "via": [35, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 203, 236, 299, 314, 523, 616, 760, 785, 870, 1170], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 115, 116, 121, 122, 124, 127, 299], "bytesio": [36, 37, 40, 41, 42, 45, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 299, 785, 870], "compress": [36, 41, 42, 45, 59, 60, 299, 870], "avrocompress": [36, 299], "uncompress": [36, 41, 42, 45, 60, 122, 133, 299, 870], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 117, 122, 152, 299, 353, 536, 760, 809, 833, 870, 923, 1246], "apach": [36, 41, 42, 45, 115, 118, 119, 132, 299, 772], "avro": [36, 115, 299, 772], "writeabl": [36, 37, 41, 42, 43, 44, 45, 299], "like": [36, 37, 39, 41, 42, 43, 44, 45, 87, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 186, 198, 200, 205, 259, 299, 377, 486, 535, 566, 614, 642, 643, 673, 756, 760, 782, 785, 798, 870, 946, 1061, 1115, 1168, 1234, 1246], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 72, 88, 106, 107, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 144, 146, 148, 154, 185, 186, 188, 189, 206, 207, 234, 237, 259, 260, 299, 704, 705, 707, 708, 722, 747, 748, 772, 785, 798, 799, 801, 802, 807, 825, 870, 873, 913, 945, 1050, 1158, 1222, 1246], "snappi": [36, 45, 60, 299, 870], "deflat": [36, 299], "pathlib": [36, 37, 41, 42, 45, 130, 299], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 191, 192, 193, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 243, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 270, 271, 272, 277, 299, 349, 371, 402, 445, 450, 453, 475, 527, 530, 531, 532, 533, 534, 535, 563, 571, 605, 609, 611, 613, 615, 616, 632, 636, 638, 641, 642, 643, 644, 645, 651, 654, 662, 682, 691, 693, 712, 716, 717, 721, 726, 728, 729, 730, 732, 734, 739, 741, 745, 749, 750, 756, 760, 778, 783, 786, 787, 788, 794, 804, 805, 806, 819, 823, 826, 827, 841, 842, 845, 848, 870, 873, 914, 939, 975, 1067, 1113, 1120, 1163, 1165, 1167, 1169, 1170, 1186, 1192, 1198, 1199, 1205, 1208, 1246], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 192, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 265, 266, 270, 271, 277, 299, 349, 453, 527, 528, 529, 530, 531, 532, 533, 534, 535, 599, 609, 611, 613, 615, 616, 632, 636, 638, 644, 645, 682, 691, 693, 712, 717, 721, 726, 728, 729, 730, 732, 739, 741, 745, 749, 750, 756, 760, 778, 783, 786, 787, 788, 794, 804, 805, 806, 819, 823, 826, 827, 841, 842, 845, 870, 873, 914, 1067, 1153, 1163, 1165, 1167, 1169, 1170, 1186, 1192, 1198, 1199, 1246], "ham": [36, 37, 39, 41, 42, 45, 158, 161, 162, 165, 166, 167, 168, 169, 175, 182, 191, 192, 194, 205, 210, 212, 214, 217, 221, 227, 229, 232, 235, 238, 239, 240, 247, 249, 250, 252, 257, 258, 259, 260, 261, 265, 270, 271, 299, 349, 534, 778, 783, 786, 787, 788, 794, 806, 819, 823, 826, 827, 841, 848, 870, 914], "dirpath": [36, 37, 41, 42, 45, 130, 299], "new_fil": [36, 37, 41, 42, 45, 299], "textiowrapp": [37, 299], "include_bom": [37, 58, 299, 870], "include_head": [37, 40, 58, 117, 264, 299, 870], "line_termin": [37, 58, 299, 870], "quote_char": [37, 58, 116, 117, 130, 299, 870], "batch_siz": [37, 58, 116, 117, 118, 134, 136, 299, 870], "1024": [37, 45, 58, 60, 116, 117, 118, 134, 299, 870], "datetime_format": [37, 58, 299, 870], "date_format": [37, 58, 299, 870], "time_format": [37, 58, 299, 870], "null_valu": [37, 58, 116, 117, 130, 299, 870], "quote_styl": [37, 58, 299, 870], "csvquotestyl": [37, 58, 299, 870], "comma": [37, 299], "csv": [37, 58, 59, 60, 116, 117, 121, 130, 299, 772, 870], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 60, 64, 71, 85, 87, 88, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 147, 154, 155, 157, 167, 172, 184, 186, 187, 189, 190, 192, 201, 202, 203, 206, 208, 209, 213, 220, 224, 234, 236, 237, 238, 244, 247, 251, 252, 256, 257, 259, 263, 264, 265, 267, 268, 299, 310, 312, 314, 379, 398, 399, 437, 451, 471, 500, 505, 506, 512, 521, 523, 534, 555, 563, 566, 568, 570, 571, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 592, 595, 599, 600, 605, 615, 616, 617, 618, 624, 634, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 652, 655, 673, 677, 679, 681, 683, 687, 691, 692, 694, 695, 704, 705, 707, 708, 709, 712, 713, 719, 720, 721, 722, 725, 733, 736, 737, 738, 742, 747, 748, 750, 751, 760, 776, 781, 782, 787, 789, 798, 799, 801, 802, 806, 807, 812, 816, 823, 825, 829, 831, 834, 840, 841, 843, 853, 858, 870, 873, 877, 878, 880, 923, 939, 948, 971, 972, 1007, 1017, 1019, 1020, 1046, 1047, 1049, 1075, 1080, 1081, 1087, 1094, 1113, 1115, 1117, 1119, 1120, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1137, 1139, 1143, 1145, 1149, 1153, 1154, 1159, 1169, 1170, 1171, 1172, 1178, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1206, 1209, 1217, 1222, 1227, 1234, 1236, 1246, 1254], "instead": [37, 43, 44, 64, 68, 80, 87, 88, 116, 117, 118, 121, 127, 128, 130, 136, 146, 184, 186, 202, 203, 209, 220, 222, 225, 235, 236, 237, 240, 241, 244, 245, 260, 273, 274, 275, 299, 302, 324, 354, 355, 371, 382, 384, 388, 392, 394, 396, 401, 405, 408, 420, 431, 505, 521, 563, 592, 593, 620, 621, 624, 634, 640, 641, 642, 643, 644, 645, 646, 648, 655, 675, 683, 687, 704, 705, 706, 707, 708, 709, 712, 719, 720, 721, 733, 736, 742, 747, 748, 751, 760, 782, 792, 798, 827, 828, 829, 831, 832, 846, 847, 849, 870, 873, 889, 924, 925, 939, 951, 953, 957, 964, 966, 969, 974, 978, 981, 993, 1025, 1031, 1034, 1041, 1043, 1045, 1080, 1113, 1138, 1141, 1145, 1146, 1174, 1175, 1178, 1188, 1194, 1195, 1196, 1197, 1200, 1202, 1209, 1228, 1246, 1250, 1254], "whether": [37, 58, 109, 111, 148, 151, 157, 169, 179, 202, 242, 263, 299, 310, 312, 327, 328, 389, 407, 476, 477, 591, 760, 776, 811, 812, 830, 835, 840, 870, 873, 877, 878, 892, 893, 915, 918, 958, 980, 1000, 1051, 1052, 1140, 1246, 1254], "utf": [37, 58, 70, 299, 870], "bom": [37, 58, 299, 870], "header": [37, 40, 45, 58, 60, 112, 116, 117, 121, 130, 168, 224, 264, 299, 870], "field": [37, 39, 58, 72, 101, 103, 108, 259, 266, 299, 512, 573, 615, 616, 617, 637, 638, 658, 695, 696, 699, 700, 724, 742, 760, 842, 870, 939, 1087, 1113, 1122, 1170, 1189, 1191, 1192, 1213, 1215, 1246], "symbol": [37, 58, 116, 117, 130, 299, 760, 870], "end": [37, 40, 58, 116, 117, 128, 130, 186, 299, 342, 345, 346, 377, 406, 431, 455, 506, 606, 612, 615, 626, 635, 639, 642, 645, 683, 704, 705, 707, 708, 711, 719, 720, 747, 748, 750, 760, 798, 803, 810, 821, 870, 873, 909, 946, 979, 1024, 1081, 1166, 1169, 1180, 1189, 1193, 1246], "byte": [37, 45, 58, 60, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 170, 299, 620, 622, 870, 1001, 1174, 1176, 1246], "quot": [37, 38, 58, 116, 117, 119, 130, 299, 870], "specifi": [37, 40, 58, 80, 92, 101, 103, 121, 127, 146, 157, 158, 165, 170, 171, 174, 185, 186, 187, 188, 189, 190, 205, 222, 234, 235, 237, 240, 241, 242, 244, 248, 263, 266, 273, 274, 278, 299, 353, 428, 429, 430, 431, 436, 555, 569, 570, 578, 579, 580, 581, 582, 584, 585, 586, 592, 602, 686, 688, 689, 690, 704, 705, 707, 708, 711, 739, 742, 747, 748, 760, 776, 778, 786, 790, 793, 797, 798, 799, 800, 801, 802, 806, 825, 827, 828, 830, 831, 835, 840, 842, 846, 847, 851, 870, 923, 1001, 1002, 1003, 1004, 1010, 1119, 1145, 1246], "defin": [37, 40, 48, 58, 118, 143, 144, 146, 155, 158, 167, 171, 186, 187, 189, 190, 209, 220, 223, 234, 268, 280, 285, 299, 314, 455, 489, 510, 523, 559, 563, 574, 575, 578, 579, 580, 581, 582, 584, 585, 586, 681, 704, 705, 707, 708, 722, 725, 742, 747, 748, 760, 778, 787, 790, 798, 799, 801, 802, 820, 825, 843, 853, 858, 870, 873, 880, 1024, 1064, 1094, 1113, 1123, 1246], "chrono": [37, 58, 299, 409, 412, 646, 647, 648, 652, 870, 982, 985, 1200, 1201, 1202, 1206], "rust": [37, 45, 58, 98, 118, 122, 124, 128, 209, 285, 299, 616, 870, 1094, 1170, 1246], "crate": [37, 58, 299, 606, 608, 609, 614, 615, 616, 629, 630, 646, 647, 648, 652, 870, 873, 1160, 1162, 1163, 1168, 1169, 1170, 1183, 1184, 1200, 1201, 1202, 1206], "fraction": [37, 58, 139, 140, 141, 142, 238, 299, 407, 500, 556, 589, 646, 648, 760, 870, 980, 1075, 1108, 1137, 1200, 1202, 1246], "second": [37, 58, 139, 140, 141, 142, 145, 186, 206, 234, 269, 299, 387, 391, 393, 395, 400, 402, 406, 419, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 646, 648, 704, 705, 706, 707, 708, 709, 746, 747, 748, 750, 760, 798, 807, 825, 870, 873, 975, 979, 992, 993, 1200, 1202, 1255], "infer": [37, 58, 72, 105, 107, 108, 109, 110, 111, 116, 117, 118, 121, 125, 126, 128, 130, 134, 135, 155, 209, 299, 420, 571, 617, 618, 646, 647, 648, 649, 652, 736, 760, 870, 979, 993, 1120, 1171, 1172, 1200, 1201, 1202, 1203, 1206, 1246], "timeunit": [37, 48, 50, 58, 299, 378, 379, 411, 423, 648, 704, 705, 706, 707, 708, 709, 870, 873, 947, 948, 984, 996, 1202], "frame": [37, 38, 40, 58, 64, 65, 66, 67, 68, 69, 80, 87, 88, 108, 117, 121, 127, 139, 140, 146, 158, 159, 203, 204, 209, 216, 220, 223, 235, 236, 237, 260, 267, 268, 299, 778, 779, 817, 820, 843, 870, 873, 922, 1246, 1254, 1255], "repres": [37, 40, 58, 62, 78, 105, 107, 109, 110, 111, 118, 121, 249, 270, 277, 299, 464, 466, 521, 604, 674, 677, 691, 693, 709, 711, 722, 724, 725, 737, 738, 741, 749, 756, 760, 836, 844, 870, 1138, 1142, 1157, 1235, 1246], "necessari": [37, 58, 71, 90, 121, 259, 299, 870], "non_numer": [37, 58, 299, 870], "never": [37, 58, 118, 164, 205, 235, 299, 806, 870], "strategi": [37, 58, 80, 88, 116, 143, 144, 145, 146, 148, 174, 186, 189, 205, 206, 219, 268, 299, 314, 436, 512, 523, 760, 793, 798, 801, 806, 807, 843, 870, 1010, 1087, 1246], "put": [37, 58, 299, 870], "around": [37, 58, 299, 870], "thei": [37, 40, 58, 71, 87, 88, 89, 90, 108, 130, 152, 207, 237, 299, 631, 642, 643, 760, 782, 870, 873], "record": [37, 42, 58, 124, 136, 206, 259, 299, 807, 870], "termin": [37, 58, 299, 870], "indistinguish": [37, 58, 299, 870], "even": [37, 58, 116, 299, 559, 563, 760, 870, 1113, 1246], "invalid": [37, 58, 116, 117, 130, 299, 617, 619, 650, 669, 760, 870, 1171, 1173, 1204], "g": [37, 58, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 154, 202, 259, 267, 299, 307, 314, 431, 523, 594, 711, 760, 785, 823, 870, 1000, 1140, 1227, 1246, 1255], "pars": [37, 58, 64, 116, 117, 119, 121, 126, 130, 133, 134, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 278, 299, 353, 455, 522, 555, 570, 602, 617, 618, 628, 649, 650, 678, 680, 686, 688, 689, 690, 698, 702, 715, 727, 731, 739, 740, 742, 744, 750, 760, 776, 797, 800, 827, 828, 831, 835, 840, 846, 847, 851, 870, 923, 1024, 1119, 1145, 1171, 1172, 1182, 1202, 1203, 1204, 1246], "valid": [37, 40, 48, 51, 58, 64, 118, 122, 124, 128, 148, 152, 170, 205, 299, 370, 606, 608, 609, 614, 615, 616, 619, 629, 630, 750, 760, 806, 870, 873, 938, 1001, 1017, 1160, 1162, 1163, 1168, 1169, 1170, 1173, 1183, 1184, 1246], "integ": [37, 40, 54, 55, 56, 57, 58, 74, 75, 76, 77, 137, 144, 146, 147, 149, 167, 186, 234, 257, 299, 311, 352, 407, 440, 441, 554, 563, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 628, 650, 676, 683, 715, 719, 720, 736, 760, 787, 798, 825, 870, 873, 920, 980, 1013, 1034, 1113, 1117, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1138, 1142, 1182, 1204, 1246, 1254, 1255], "aren": [37, 58, 299, 870], "t": [37, 39, 58, 66, 67, 88, 116, 121, 127, 130, 186, 209, 223, 265, 267, 299, 314, 370, 377, 385, 405, 425, 428, 429, 430, 486, 523, 555, 559, 614, 643, 646, 648, 750, 760, 798, 820, 841, 870, 873, 938, 978, 999, 1000, 1002, 1003, 1004, 1061, 1094, 1140, 1168, 1196, 1197, 1200, 1202, 1227, 1236, 1246], "strictli": [37, 58, 71, 90, 299, 791, 870], "table_nam": [38, 40, 299], "connect": [38, 116, 118, 119, 122, 124, 128, 133, 135, 136, 299, 773], "if_table_exist": [38, 299], "dbwritemod": [38, 299], "fail": [38, 39, 106, 120, 122, 126, 128, 131, 135, 139, 140, 154, 265, 299, 325, 410, 512, 646, 647, 648, 652, 760, 841, 870, 1094, 1200, 1201, 1202, 1206, 1246], "dbwriteengin": [38, 299], "sqlalchemi": [38, 118, 138, 299], "databas": [38, 118, 119, 299, 772], "qualifi": [38, 299], "creat": [38, 40, 71, 90, 105, 109, 111, 116, 117, 118, 119, 122, 124, 128, 131, 132, 144, 145, 146, 147, 148, 149, 159, 160, 186, 187, 190, 221, 224, 225, 234, 269, 273, 276, 299, 379, 406, 420, 512, 567, 575, 578, 579, 581, 584, 585, 586, 635, 689, 703, 704, 705, 706, 707, 708, 709, 746, 747, 748, 756, 760, 779, 780, 789, 798, 799, 802, 825, 846, 850, 870, 922, 926, 939, 948, 979, 993, 1105, 1113, 1116, 1189, 1227, 1246, 1254, 1255], "append": [38, 39, 146, 172, 205, 206, 299, 567, 750, 760, 806, 807, 870, 1007, 1246], "your": [38, 40, 71, 80, 90, 116, 117, 118, 119, 121, 136, 203, 209, 236, 237, 240, 256, 273, 278, 285, 299, 314, 523, 616, 646, 647, 648, 655, 725, 760, 803, 810, 812, 827, 846, 851, 858, 870, 1094, 1170, 1200, 1201, 1202, 1209, 1246, 1255], "special": [38, 116, 117, 119, 130, 276, 299, 577, 615, 760, 850, 870, 880, 1094, 1125, 1169, 1246], "uri": [38, 39, 118, 119, 120, 131, 132, 299], "postgresql": [38, 118, 119, 299, 555, 760], "user": [38, 118, 119, 155, 209, 223, 280, 285, 299, 314, 521, 523, 559, 591, 681, 725, 760, 820, 853, 858, 870, 880, 1094, 1143, 1246], "pass": [38, 39, 40, 45, 67, 80, 107, 118, 119, 121, 128, 130, 135, 136, 139, 141, 144, 146, 148, 157, 162, 165, 185, 186, 189, 192, 208, 222, 223, 225, 234, 240, 244, 248, 252, 263, 269, 273, 278, 299, 302, 314, 386, 402, 405, 434, 453, 505, 522, 523, 555, 559, 570, 575, 578, 579, 580, 581, 582, 584, 585, 586, 592, 602, 641, 642, 643, 677, 686, 692, 694, 704, 715, 742, 750, 756, 760, 776, 786, 797, 798, 799, 801, 802, 804, 811, 812, 820, 825, 827, 831, 833, 835, 840, 846, 851, 858, 870, 880, 955, 978, 1008, 1019, 1049, 1080, 1093, 1094, 1119, 1145, 1195, 1196, 1197, 1217, 1246, 1250], "server": [38, 118, 119, 299], "port": [38, 116, 118, 119, 122, 124, 133, 299], "sqlite": [38, 118, 299], "db": [38, 119, 299], "replac": [38, 39, 116, 117, 130, 173, 174, 231, 232, 264, 273, 274, 299, 379, 405, 521, 522, 630, 631, 760, 792, 846, 847, 870, 948, 978, 1093, 1138, 1141, 1142, 1184, 1185, 1246], "insert": [38, 116, 117, 122, 124, 128, 130, 133, 134, 135, 195, 196, 230, 264, 266, 299, 590, 605, 655, 760, 842, 870, 1139, 1159, 1209, 1246], "mode": [38, 39, 58, 59, 60, 64, 139, 141, 224, 299, 615, 733, 736, 751, 760, 781, 870, 1169, 1246, 1254], "new": [38, 39, 40, 121, 130, 152, 180, 194, 195, 196, 209, 220, 221, 229, 230, 253, 264, 266, 267, 268, 273, 274, 299, 309, 379, 433, 445, 454, 520, 543, 570, 574, 629, 630, 637, 638, 656, 658, 664, 756, 760, 772, 796, 823, 839, 842, 843, 846, 847, 853, 858, 870, 876, 948, 1006, 1015, 1105, 1118, 1119, 1123, 1183, 1184, 1191, 1192, 1210, 1213, 1219, 1224, 1246, 1254], "alreadi": [38, 39, 299, 370, 486, 673, 760, 938, 1061, 1234, 1246], "adbc": [38, 118, 119, 299], "affect": [38, 139, 140, 141, 142, 299], "driver": [38, 118, 119, 299], "provid": [38, 40, 67, 116, 117, 119, 120, 128, 130, 131, 132, 135, 146, 148, 175, 201, 299, 343, 344, 431, 451, 512, 521, 523, 610, 611, 614, 617, 619, 642, 643, 644, 645, 715, 742, 760, 772, 794, 870, 907, 908, 1020, 1046, 1094, 1164, 1165, 1168, 1171, 1173, 1246, 1254, 1255], "otherwis": [38, 85, 118, 121, 145, 150, 209, 216, 237, 240, 285, 299, 343, 353, 371, 428, 429, 430, 512, 523, 531, 559, 563, 568, 579, 580, 581, 582, 584, 586, 606, 610, 677, 692, 694, 725, 750, 760, 817, 827, 858, 870, 907, 923, 939, 1002, 1003, 1004, 1087, 1094, 1113, 1117, 1138, 1141, 1160, 1164, 1246], "deltalak": [39, 120, 131, 138, 299], "deltat": [39, 299], "ignor": [39, 145, 146, 148, 212, 213, 250, 251, 268, 299, 310, 312, 373, 405, 428, 429, 430, 484, 548, 549, 605, 677, 679, 760, 877, 878, 941, 978, 1002, 1003, 1004, 1059, 1103, 1104, 1159, 1246], "merg": [39, 216, 299, 817, 870], "overwrite_schema": [39, 299], "storage_opt": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 299], "delta_write_opt": [39, 299], "delta_merge_opt": [39, 299], "tablemerg": [39, 299], "delta": [39, 50, 120, 131, 249, 270, 299, 584, 586, 604, 674, 691, 693, 737, 738, 741, 749, 760, 772, 836, 844, 870, 1132, 1134, 1157, 1235, 1246], "handl": [39, 88, 112, 116, 117, 130, 136, 299, 373, 484, 655, 760, 781, 870, 941, 1059, 1209, 1246], "throw": [39, 158, 299, 348, 617, 619, 760, 778, 870, 912, 1171, 1173, 1246], "add": [39, 40, 117, 172, 186, 189, 209, 273, 274, 275, 276, 299, 371, 544, 545, 561, 563, 660, 709, 713, 750, 760, 798, 801, 806, 846, 847, 848, 849, 850, 870, 1007, 1246], "anyth": [39, 235, 299], "updat": [39, 164, 299, 870], "extra": [39, 45, 60, 116, 117, 120, 121, 122, 124, 130, 131, 132, 133, 172, 186, 299, 760, 798, 870, 1007, 1246], "storag": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 299], "backend": [39, 118, 119, 120, 131, 132, 299], "cloud": [39, 118, 120, 128, 131, 132, 135, 136, 299], "configur": [39, 120, 131, 132, 152, 299], "authent": [39, 120, 131, 132, 299], "see": [39, 40, 41, 42, 48, 118, 119, 120, 121, 128, 131, 132, 135, 139, 140, 141, 142, 146, 148, 162, 186, 205, 223, 224, 225, 299, 302, 353, 436, 471, 521, 599, 606, 614, 615, 629, 704, 705, 707, 708, 735, 747, 748, 756, 760, 781, 798, 870, 873, 917, 923, 1047, 1153, 1160, 1168, 1169, 1183, 1246, 1250, 1255], "here": [39, 40, 45, 105, 107, 108, 109, 111, 118, 119, 120, 125, 126, 128, 131, 132, 134, 135, 144, 146, 148, 299, 523, 616, 619, 760, 870, 1173], "gc": [39, 120, 131, 132, 299], "azur": [39, 120, 128, 131, 132, 135, 299], "keyword": [39, 67, 120, 128, 131, 162, 223, 235, 240, 241, 273, 274, 278, 299, 437, 559, 739, 742, 750, 760, 820, 827, 828, 846, 847, 851, 870, 1246], "argument": [39, 45, 90, 116, 120, 128, 130, 131, 162, 165, 171, 185, 186, 187, 188, 189, 190, 210, 212, 217, 222, 223, 224, 234, 240, 241, 242, 248, 250, 260, 266, 269, 273, 274, 278, 299, 406, 420, 431, 437, 455, 555, 559, 575, 578, 579, 580, 581, 582, 584, 585, 586, 602, 641, 642, 643, 677, 684, 685, 686, 688, 689, 690, 692, 694, 711, 739, 742, 750, 760, 786, 790, 797, 798, 799, 800, 801, 802, 820, 825, 827, 828, 830, 835, 842, 846, 847, 851, 870, 979, 993, 1024, 1195, 1196, 1197, 1228, 1246], "while": [39, 87, 117, 120, 121, 131, 146, 148, 152, 203, 215, 264, 268, 299, 621, 782, 816, 843, 870, 1017, 1175, 1246], "lake": [39, 120, 131, 299, 772], "typeerror": [39, 299], "unsupport": [39, 299], "arrowinvaliderror": [39, 299], "could": [39, 78, 93, 158, 299, 348, 695, 699, 709, 713, 760, 778, 787, 870, 912, 1017, 1246], "primit": [39, 299, 460, 760, 1227, 1246], "tablenotfounderror": [39, 299], "doesn": [39, 116, 130, 186, 299, 425, 760, 798, 870, 999, 1236, 1246], "action": [39, 299], "trigger": [39, 260, 299, 760, 1228, 1246], "categor": [39, 51, 71, 89, 90, 139, 140, 141, 142, 205, 257, 299, 349, 350, 371, 563, 570, 667, 760, 873, 913, 914, 915, 916, 917, 918, 939, 1113, 1119, 1229, 1246], "protocol": [39, 106, 119, 154, 299], "nullabl": [39, 299], "To": [39, 87, 173, 210, 212, 217, 250, 299, 353, 375, 376, 436, 606, 614, 615, 629, 642, 643, 644, 645, 653, 760, 792, 870, 923, 943, 944, 1017, 1160, 1168, 1169, 1183, 1207, 1227, 1246], "pyarrow": [39, 45, 105, 110, 116, 119, 120, 122, 124, 128, 131, 136, 138, 254, 259, 260, 299, 773, 1222, 1226, 1227, 1228, 1246], "ha": [39, 40, 80, 87, 118, 121, 130, 154, 155, 176, 179, 186, 187, 188, 189, 190, 195, 231, 234, 253, 269, 275, 280, 299, 314, 347, 365, 366, 367, 368, 369, 370, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 532, 561, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 660, 663, 664, 668, 681, 701, 702, 712, 721, 723, 756, 760, 782, 798, 799, 800, 801, 802, 811, 825, 839, 849, 853, 858, 870, 880, 911, 922, 934, 935, 936, 937, 938, 940, 1017, 1029, 1031, 1035, 1057, 1070, 1085, 1093, 1124, 1140, 1142, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1218, 1219, 1230, 1246], "last": [39, 139, 140, 141, 142, 157, 192, 206, 208, 224, 237, 248, 252, 263, 265, 293, 299, 324, 332, 370, 383, 398, 403, 421, 462, 463, 470, 490, 509, 512, 542, 544, 545, 546, 547, 561, 601, 638, 660, 662, 711, 745, 760, 776, 807, 835, 838, 840, 841, 866, 870, 873, 889, 897, 938, 952, 971, 976, 994, 1019, 1035, 1036, 1049, 1065, 1084, 1192, 1217, 1246], "filesystem": [39, 120, 131, 132, 299], "table_path": [39, 120, 131, 132, 299], "match": [39, 40, 48, 88, 99, 105, 107, 108, 109, 111, 125, 126, 134, 139, 140, 141, 142, 174, 205, 206, 235, 268, 299, 529, 570, 583, 606, 607, 608, 609, 612, 614, 615, 617, 619, 629, 630, 631, 639, 646, 647, 648, 711, 750, 760, 793, 806, 807, 843, 870, 873, 1034, 1043, 1119, 1131, 1160, 1161, 1162, 1163, 1166, 1168, 1169, 1171, 1173, 1183, 1184, 1185, 1193, 1200, 1201, 1202, 1246], "version": [39, 85, 90, 120, 121, 131, 138, 154, 155, 176, 179, 186, 187, 188, 189, 190, 191, 195, 210, 212, 217, 231, 245, 250, 253, 275, 280, 299, 314, 354, 355, 365, 366, 367, 368, 369, 382, 384, 388, 392, 394, 396, 398, 399, 401, 405, 408, 420, 449, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 561, 576, 593, 607, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 646, 648, 660, 663, 664, 675, 681, 701, 702, 704, 706, 711, 723, 735, 760, 798, 799, 800, 801, 802, 811, 832, 839, 849, 853, 870, 880, 924, 925, 934, 935, 936, 937, 939, 951, 953, 957, 964, 966, 969, 971, 972, 974, 978, 979, 981, 993, 1018, 1025, 1029, 1031, 1034, 1035, 1041, 1043, 1045, 1057, 1070, 1085, 1093, 1113, 1124, 1140, 1142, 1146, 1161, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1200, 1202, 1218, 1219, 1236, 1246], "old": [39, 229, 299, 570, 760, 823, 870, 1119, 1246], "existing_table_path": [39, 299], "store": [39, 116, 128, 132, 172, 203, 236, 299, 349, 914, 1007, 1246], "bucket": [39, 120, 131, 132, 135, 299, 406, 420, 451, 760, 979, 993, 1020, 1246], "prefix": [39, 152, 299, 309, 346, 520, 543, 545, 546, 547, 639, 643, 644, 655, 660, 760, 873, 910, 1193, 1198, 1209], "aws_region": [39, 131, 135, 299], "the_aws_region": [39, 299], "aws_access_key_id": [39, 120, 131, 135, 299], "the_aws_access_key_id": [39, 120, 131, 132, 299], "aws_secret_access_kei": [39, 120, 131, 135, 299], "the_aws_secret_access_kei": [39, 120, 131, 132, 299], "pa": [39, 105, 136, 299], "check": [39, 48, 116, 117, 130, 139, 140, 141, 142, 151, 169, 179, 186, 187, 189, 190, 199, 201, 205, 234, 299, 342, 345, 346, 455, 460, 481, 575, 606, 612, 639, 760, 798, 799, 801, 802, 806, 811, 812, 825, 870, 906, 909, 910, 1000, 1025, 1027, 1031, 1032, 1034, 1041, 1042, 1043, 1045, 1046, 1056, 1140, 1160, 1166, 1193, 1246], "doc": [39, 41, 42, 119, 139, 141, 162, 299], "evolut": [39, 299], "yet": [39, 299], "packag": [39, 118, 121, 299], "therefor": [39, 170, 299, 523, 750, 760, 1001, 1246], "effect": [39, 40, 178, 186, 189, 259, 299, 385, 523, 704, 705, 760, 798, 801, 849, 850, 870, 946, 954], "predic": [39, 58, 59, 60, 86, 87, 130, 133, 134, 135, 136, 175, 201, 235, 299, 437, 675, 713, 750, 760, 781, 782, 789, 791, 794, 811, 812, 821, 823, 833, 849, 850, 870, 1011, 1138, 1141, 1246], "source_alia": [39, 299], "target_alia": [39, 299], "when_matched_update_al": [39, 299], "when_not_matched_insert_al": [39, 299], "execut": [39, 65, 66, 68, 71, 88, 118, 207, 299, 486, 673, 760, 777, 811, 812, 821, 870, 1061, 1234, 1246, 1254], "workbook": [40, 121, 299], "worksheet": [40, 121, 127, 299], "posit": [40, 165, 171, 185, 188, 222, 240, 241, 242, 244, 248, 266, 273, 274, 278, 299, 428, 429, 430, 431, 505, 555, 563, 592, 602, 616, 628, 650, 684, 685, 686, 688, 689, 690, 711, 739, 742, 760, 786, 790, 797, 800, 827, 828, 830, 831, 835, 842, 846, 847, 851, 870, 1002, 1003, 1004, 1080, 1113, 1145, 1170, 1182, 1204, 1246], "tupl": [40, 119, 121, 127, 155, 203, 209, 235, 236, 237, 243, 277, 299, 571, 760, 821, 833, 870, 873, 1120, 1246], "a1": [40, 81, 83, 299], "table_styl": [40, 299], "column_format": [40, 299], "columnformatdict": [40, 299], "dtype_format": [40, 299], "oneormoredatatyp": [40, 144, 299, 1043, 1246], "conditional_format": [40, 299], "conditionalformatdict": [40, 299], "header_format": [40, 299], "column_tot": [40, 299], "columntotalsdefinit": [40, 299], "column_width": [40, 299], "columnwidthsdefinit": [40, 299], "row_tot": [40, 299], "rowtotalsdefinit": [40, 299], "row_height": [40, 299], "sparklin": [40, 299], "sequenc": [40, 72, 80, 105, 107, 108, 109, 111, 116, 117, 118, 121, 125, 126, 127, 130, 134, 144, 145, 146, 157, 164, 171, 172, 205, 206, 215, 220, 222, 223, 224, 237, 248, 257, 263, 267, 268, 269, 299, 371, 460, 512, 519, 521, 559, 563, 570, 602, 644, 645, 658, 681, 686, 695, 696, 699, 700, 713, 715, 723, 724, 725, 735, 740, 760, 776, 790, 806, 807, 816, 820, 835, 840, 843, 870, 939, 940, 1007, 1087, 1113, 1119, 1142, 1213, 1246], "formula": [40, 299, 425, 760, 999, 1246], "autofilt": [40, 299], "autofit": [40, 299], "hidden_column": [40, 299], "selectortyp": [40, 299, 711, 873], "hide_gridlin": [40, 299], "sheet_zoom": [40, 299], "freeze_pan": [40, 299], "excel": [40, 121, 299], "open": [40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 299, 785, 870], "xlsxwriter": [40, 138, 299], "close": [40, 118, 186, 187, 189, 190, 234, 299, 371, 455, 516, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 599, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 825, 870, 939, 1024, 1113, 1153, 1246], "xlsx": [40, 121, 299], "work": [40, 49, 51, 117, 136, 230, 241, 274, 299, 310, 312, 314, 340, 352, 353, 431, 440, 486, 513, 523, 555, 574, 620, 621, 670, 760, 828, 847, 870, 873, 877, 878, 905, 920, 923, 1013, 1061, 1088, 1174, 1175, 1231, 1246], "directori": [40, 45, 128, 299], "sheet1": [40, 299], "medium": [40, 299], "kei": [40, 80, 85, 88, 128, 132, 135, 186, 203, 205, 206, 216, 222, 224, 229, 233, 236, 237, 268, 299, 437, 523, 570, 742, 760, 791, 798, 806, 807, 817, 823, 824, 843, 870, 1119, 1246], "follow": [40, 45, 85, 116, 117, 120, 130, 131, 132, 139, 186, 206, 209, 223, 234, 269, 299, 402, 406, 420, 559, 566, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 658, 669, 704, 705, 707, 708, 725, 747, 748, 750, 752, 753, 755, 760, 761, 762, 765, 767, 768, 769, 798, 807, 820, 825, 870, 975, 979, 993, 1115, 1138, 1141, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253, 1255], "first_column": [40, 299], "last_column": [40, 299], "banded_column": [40, 299], "banded_row": [40, 299], "sheet": [40, 121, 127, 299], "chart": [40, 299, 821, 870], "subsequ": [40, 69, 228, 260, 299, 512, 750, 789, 870], "colnam": [40, 130, 146, 168, 299, 750, 788, 870], "given": [40, 64, 65, 80, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 130, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 155, 157, 170, 171, 173, 186, 187, 189, 190, 201, 209, 222, 223, 234, 235, 237, 244, 245, 248, 263, 268, 299, 353, 377, 380, 409, 411, 412, 425, 451, 455, 481, 505, 512, 514, 523, 555, 559, 566, 569, 571, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 592, 593, 615, 616, 626, 627, 646, 648, 655, 658, 681, 711, 723, 724, 725, 736, 737, 738, 760, 776, 790, 798, 799, 801, 802, 811, 812, 820, 825, 831, 832, 835, 840, 843, 853, 858, 870, 873, 880, 923, 946, 949, 982, 984, 985, 999, 1001, 1020, 1024, 1046, 1056, 1080, 1087, 1089, 1092, 1094, 1105, 1115, 1120, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1139, 1145, 1146, 1169, 1170, 1180, 1181, 1200, 1202, 1209, 1233, 1237, 1246, 1254, 1255], "dd": [40, 299], "mm": [40, 299], "yyyi": [40, 299], "overridden": [40, 105, 107, 109, 111, 125, 126, 150, 299, 870], "basi": [40, 146, 299], "param": [40, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 145, 146, 148, 235, 299, 870], "It": [40, 71, 90, 164, 216, 223, 276, 285, 299, 531, 574, 756, 760, 811, 812, 817, 850, 858, 870, 1138, 1141, 1246], "float_dtyp": [40, 299], "simplifi": [40, 58, 59, 60, 86, 87, 299, 781, 782, 789, 791, 821, 833, 870], "uniform": [40, 299, 563, 760, 1113, 1246], "condit": [40, 167, 175, 235, 299, 437, 612, 639, 687, 713, 750, 760, 787, 794, 870], "suppli": [40, 105, 107, 108, 109, 111, 118, 125, 126, 134, 175, 235, 299, 437, 559, 760, 794, 870], "typenam": [40, 299], "3_color_scal": [40, 299], "data_bar": [40, 299], "make": [40, 72, 88, 105, 110, 116, 117, 122, 124, 128, 133, 216, 220, 228, 269, 299, 429, 430, 451, 546, 547, 555, 569, 637, 760, 817, 870, 1003, 1004, 1020, 1191, 1246, 1255], "icon": [40, 299], "multipl": [40, 67, 86, 87, 88, 116, 117, 121, 127, 130, 133, 134, 135, 144, 148, 157, 165, 170, 172, 175, 185, 186, 194, 204, 222, 224, 237, 240, 242, 248, 263, 268, 273, 278, 299, 489, 510, 528, 532, 539, 540, 555, 570, 571, 574, 578, 579, 580, 581, 582, 584, 585, 586, 602, 686, 699, 700, 713, 723, 724, 726, 730, 735, 740, 743, 750, 756, 760, 776, 781, 782, 786, 794, 797, 798, 827, 830, 835, 840, 843, 846, 851, 858, 870, 879, 1001, 1007, 1064, 1085, 1099, 1119, 1120, 1246], "singl": [40, 65, 80, 87, 88, 116, 117, 118, 119, 121, 128, 130, 135, 144, 158, 165, 166, 167, 172, 181, 191, 201, 205, 209, 222, 235, 237, 248, 299, 314, 353, 402, 444, 447, 449, 482, 483, 489, 510, 521, 523, 567, 570, 571, 602, 605, 675, 681, 686, 689, 690, 720, 724, 725, 740, 748, 760, 778, 781, 786, 787, 806, 835, 870, 923, 975, 1007, 1018, 1057, 1058, 1064, 1116, 1119, 1120, 1159, 1222, 1246], "across": [40, 80, 119, 191, 211, 213, 218, 251, 299, 449, 678, 680, 695, 696, 698, 702, 727, 731, 744, 760, 1018, 1246], "heatmap": [40, 299], "min": [40, 45, 60, 164, 174, 218, 224, 234, 299, 355, 362, 367, 436, 555, 566, 575, 581, 731, 739, 760, 793, 825, 870, 925, 931, 935, 940, 1010, 1115, 1129, 1246, 1255], "entir": [40, 299, 781, 870], "made": [40, 118, 299, 1227, 1246], "abov": [40, 139, 224, 299, 750], "than": [40, 58, 59, 60, 104, 109, 111, 116, 117, 118, 121, 127, 130, 136, 146, 148, 159, 185, 188, 203, 206, 209, 222, 235, 236, 238, 267, 285, 299, 446, 448, 473, 500, 518, 523, 534, 563, 574, 589, 599, 620, 626, 627, 638, 655, 691, 704, 725, 760, 781, 797, 800, 807, 858, 870, 1075, 1094, 1113, 1123, 1137, 1153, 1174, 1180, 1181, 1192, 1209, 1246, 1255], "bold": [40, 299], "font_color": [40, 299], "702963": [40, 299], "total": [40, 170, 281, 299, 384, 388, 392, 394, 396, 401, 408, 413, 414, 415, 416, 417, 418, 419, 474, 494, 692, 694, 760, 854, 953, 957, 964, 966, 969, 974, 981, 986, 987, 988, 989, 990, 991, 992, 1001, 1048, 1069, 1246], "export": [40, 203, 204, 236, 237, 256, 259, 299, 756], "associ": [40, 65, 67, 80, 119, 145, 237, 299], "sum": [40, 64, 170, 178, 185, 186, 201, 224, 234, 251, 278, 299, 363, 364, 369, 425, 437, 512, 523, 531, 533, 534, 535, 570, 575, 585, 675, 677, 695, 697, 698, 699, 701, 702, 713, 725, 735, 744, 760, 781, 782, 785, 789, 791, 797, 798, 819, 821, 825, 829, 833, 851, 870, 873, 932, 933, 937, 999, 1001, 1133, 1246], "must": [40, 106, 107, 120, 131, 132, 136, 164, 171, 186, 187, 189, 190, 206, 216, 234, 235, 299, 371, 512, 521, 563, 570, 575, 578, 579, 580, 581, 582, 584, 585, 586, 750, 760, 790, 798, 799, 801, 802, 807, 811, 812, 817, 825, 870, 939, 940, 1113, 1119, 1246], "funcnam": [40, 299], "averag": [40, 299, 428, 429, 430, 566, 760, 1002, 1003, 1004, 1115, 1246], "count_num": [40, 299], "count": [40, 64, 136, 156, 164, 186, 206, 220, 221, 224, 234, 264, 269, 275, 276, 285, 290, 299, 315, 360, 365, 402, 451, 474, 482, 483, 494, 523, 531, 533, 541, 553, 575, 578, 579, 580, 581, 582, 584, 585, 586, 608, 609, 671, 673, 682, 694, 719, 732, 760, 775, 798, 807, 819, 825, 849, 850, 858, 863, 870, 940, 975, 1020, 1048, 1057, 1058, 1069, 1101, 1107, 1162, 1163, 1232, 1234, 1246], "std_dev": [40, 299], "var": [40, 149, 299, 586, 760, 870, 1246], "pixel": [40, 299], "unit": [40, 48, 50, 139, 140, 141, 142, 146, 148, 170, 299, 378, 379, 386, 411, 423, 517, 532, 646, 648, 672, 704, 705, 706, 707, 708, 709, 715, 760, 821, 870, 873, 947, 948, 955, 984, 996, 1001, 1092, 1200, 1202, 1233, 1246, 1255], "hand": [40, 116, 117, 130, 299, 501, 502, 503, 504, 1076, 1077, 1078, 1079], "side": [40, 186, 187, 189, 190, 234, 299, 455, 501, 502, 503, 504, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 825, 870, 1024, 1076, 1077, 1078, 1079, 1139, 1246], "call": [40, 68, 71, 90, 117, 118, 139, 140, 141, 142, 146, 148, 152, 185, 186, 189, 207, 209, 234, 298, 299, 314, 361, 364, 470, 523, 542, 544, 545, 546, 547, 561, 595, 660, 756, 760, 773, 797, 798, 799, 801, 802, 825, 869, 870, 873, 880, 1094, 1149, 1246], "ad": [40, 108, 121, 186, 189, 264, 268, 273, 274, 299, 313, 434, 695, 696, 699, 700, 760, 798, 801, 843, 846, 847, 870, 939, 1008, 1113, 1246], "wise": [40, 80, 118, 178, 299, 316, 317, 318, 319, 320, 321, 356, 357, 358, 432, 515, 596, 597, 598, 665, 666, 699, 700, 713, 735, 760, 881, 882, 883, 884, 885, 886, 927, 928, 929, 1005, 1090, 1091, 1150, 1151, 1152, 1220, 1221, 1246], "particip": [40, 299], "distinct": [40, 148, 222, 299, 340, 458, 459, 462, 463, 513, 566, 574, 709, 760, 905, 1029, 1030, 1035, 1036, 1088, 1115, 1123, 1246, 1255], "referenc": [40, 299, 658], "differ": [40, 116, 136, 139, 141, 172, 186, 191, 203, 234, 236, 237, 256, 264, 299, 373, 383, 402, 403, 405, 421, 427, 449, 484, 501, 503, 512, 523, 548, 549, 551, 570, 646, 671, 712, 715, 721, 760, 789, 798, 825, 870, 873, 917, 941, 952, 975, 976, 978, 994, 1000, 1007, 1018, 1059, 1076, 1078, 1094, 1103, 1104, 1119, 1140, 1200, 1246], "row_index": [40, 299], "height": [40, 167, 299], "intersect": [40, 299, 502, 873, 1077], "bodi": [40, 299], "start": [40, 115, 116, 117, 118, 119, 122, 124, 127, 128, 130, 133, 134, 135, 150, 180, 185, 186, 188, 189, 207, 247, 253, 269, 275, 276, 299, 342, 345, 346, 383, 397, 403, 406, 420, 421, 431, 445, 455, 506, 578, 579, 581, 584, 585, 586, 600, 606, 612, 615, 627, 635, 639, 643, 644, 655, 664, 683, 695, 699, 704, 705, 707, 708, 713, 719, 720, 747, 748, 750, 760, 796, 797, 798, 800, 801, 821, 834, 839, 849, 850, 870, 873, 910, 947, 949, 952, 955, 956, 963, 965, 968, 970, 973, 976, 979, 984, 993, 994, 1015, 1024, 1081, 1154, 1166, 1169, 1181, 1189, 1193, 1209, 1219, 1246, 1255], "unless": [40, 80, 107, 260, 299, 641, 642, 736, 870, 1195, 1228, 1236, 1246], "marker": [40, 299], "compliant": [40, 299], "case": [40, 71, 80, 87, 105, 107, 108, 109, 111, 118, 125, 126, 134, 135, 150, 155, 172, 186, 187, 189, 190, 203, 209, 234, 236, 237, 256, 299, 377, 520, 521, 531, 532, 543, 575, 606, 607, 615, 629, 631, 760, 782, 798, 799, 801, 802, 825, 870, 873, 946, 1007, 1160, 1161, 1169, 1183, 1185, 1246], "three": [40, 262, 299, 371, 563, 590, 760, 939, 1087, 1113, 1246], "avail": [40, 114, 118, 119, 120, 131, 132, 144, 152, 224, 298, 299, 566, 752, 753, 755, 759, 760, 761, 762, 765, 766, 767, 768, 769, 772, 773, 791, 869, 870, 873, 940, 1115, 1238, 1240, 1242, 1246, 1247, 1251, 1252, 1253], "insert_befor": [40, 299], "insert_aft": [40, 299], "respect": [40, 299, 607, 631, 873, 1161, 1185], "direct": [40, 119, 128, 132, 135, 139, 244, 267, 299, 505, 592, 760, 831, 870, 1080, 1145, 1246], "far": [40, 299], "strongli": [40, 150, 209, 235, 285, 299, 523, 760, 1094, 1246], "advis": [40, 71, 90, 207, 299], "structur": [40, 96, 100, 102, 172, 223, 237, 259, 299, 559, 760, 820, 870, 1007, 1246], "wherev": [40, 209, 285, 299, 523, 760, 1094, 1246], "possibl": [40, 116, 157, 185, 188, 203, 209, 236, 263, 265, 285, 299, 517, 523, 531, 577, 638, 672, 760, 776, 797, 800, 835, 840, 841, 870, 1094, 1125, 1192, 1246], "simpl": [40, 148, 220, 299, 711], "colx": [40, 69, 299, 546, 547, 873, 1255], "coli": [40, 299, 546, 547, 873, 1255], "after": [40, 69, 88, 108, 115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 266, 298, 299, 431, 522, 555, 566, 655, 760, 842, 870, 1007, 1093, 1115, 1209, 1246], "befor": [40, 116, 118, 121, 130, 136, 139, 140, 141, 142, 150, 152, 172, 186, 189, 206, 266, 299, 363, 364, 370, 522, 555, 556, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 655, 661, 737, 738, 760, 798, 801, 804, 807, 842, 870, 932, 933, 938, 1007, 1093, 1108, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1209, 1216, 1246], "most": [40, 66, 105, 116, 117, 119, 130, 139, 140, 141, 142, 299, 532, 539, 556, 638, 760, 1099, 1108, 1192, 1246, 1254], "mandatori": [40, 299], "return_dtyp": [40, 155, 209, 299, 314, 519, 521, 522, 523, 570, 681, 723, 724, 725, 760, 880, 1093, 1094, 1119, 1246], "latter": [40, 172, 299, 1007, 1246], "appropri": [40, 136, 259, 299, 566, 760, 1115, 1246], "pure": [40, 299, 1227, 1246], "actual": [40, 108, 146, 148, 237, 299, 1148, 1246], "indic": [40, 115, 116, 117, 118, 122, 124, 128, 130, 135, 143, 144, 148, 186, 187, 189, 190, 234, 237, 242, 244, 257, 299, 325, 444, 451, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 489, 505, 510, 527, 528, 529, 530, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 592, 596, 663, 686, 687, 760, 798, 799, 801, 802, 825, 830, 831, 870, 873, 1014, 1020, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1064, 1080, 1085, 1138, 1139, 1142, 1145, 1150, 1218, 1223, 1246, 1255], "calcul": [40, 80, 186, 249, 270, 299, 373, 428, 429, 430, 471, 484, 501, 517, 583, 599, 604, 672, 674, 691, 693, 737, 738, 741, 749, 760, 798, 836, 844, 870, 941, 1002, 1003, 1004, 1047, 1059, 1076, 1131, 1153, 1157, 1235, 1246], "individu": [40, 60, 146, 152, 234, 259, 299, 523, 615, 760, 781, 825, 870, 921, 1169, 1246], "gridlin": [40, 299], "zoom": [40, 299], "freez": [40, 299], "pane": [40, 299], "top": [40, 263, 299, 840, 870], "index": [40, 106, 110, 113, 116, 117, 122, 124, 128, 130, 133, 134, 135, 138, 154, 176, 180, 182, 186, 187, 189, 190, 195, 196, 201, 203, 206, 224, 231, 232, 234, 235, 236, 244, 247, 253, 259, 261, 268, 269, 275, 276, 299, 308, 322, 323, 324, 326, 329, 330, 332, 402, 444, 445, 447, 478, 479, 489, 490, 505, 506, 510, 512, 575, 578, 579, 580, 581, 582, 584, 585, 586, 590, 592, 600, 614, 635, 663, 664, 692, 719, 760, 796, 798, 799, 801, 802, 807, 825, 831, 834, 839, 843, 849, 850, 870, 887, 888, 889, 890, 891, 894, 895, 897, 975, 1014, 1015, 1046, 1053, 1054, 1064, 1065, 1080, 1081, 1085, 1087, 1105, 1138, 1139, 1142, 1145, 1154, 1168, 1189, 1218, 1219, 1246], "thu": [40, 172, 299, 691, 1007, 1246], "altern": [40, 299, 756], "a2": [40, 81, 83, 299], "occur": [40, 86, 87, 299, 482, 483, 539, 566, 760, 781, 782, 789, 791, 821, 833, 870, 1057, 1058, 1099, 1115, 1246], "equival": [40, 105, 107, 108, 109, 111, 120, 125, 126, 134, 186, 201, 220, 299, 307, 311, 426, 427, 441, 446, 448, 473, 518, 538, 540, 550, 551, 554, 560, 621, 659, 669, 676, 760, 798, 870, 1046, 1175, 1205, 1207, 1208, 1246], "top_row": [40, 299], "top_col": [40, 299], "base": [40, 46, 167, 175, 186, 187, 189, 190, 234, 299, 377, 385, 425, 428, 429, 430, 437, 451, 514, 515, 563, 570, 575, 628, 650, 760, 787, 794, 798, 799, 801, 802, 825, 870, 873, 946, 954, 999, 1002, 1003, 1004, 1020, 1089, 1090, 1113, 1119, 1182, 1204, 1237, 1246, 1255], "scroll": [40, 299], "region": [40, 132, 299], "initit": [40, 299], "5th": [40, 299], "properti": [40, 154, 161, 168, 177, 193, 225, 239, 243, 272, 276, 299, 783, 788, 826, 845, 850, 870, 873, 1255], "readthedoc": [40, 299], "io": [40, 116, 123, 128, 129, 132, 299, 785, 829, 870], "html": [40, 41, 42, 106, 118, 154, 162, 299], "definit": [40, 144, 299, 471, 760, 1047, 1246], "take": [40, 121, 127, 146, 152, 178, 180, 186, 189, 213, 216, 223, 224, 253, 259, 299, 402, 437, 444, 445, 489, 602, 664, 704, 705, 710, 712, 721, 760, 796, 798, 801, 817, 839, 870, 975, 1014, 1015, 1064, 1219, 1237, 1246], "care": [40, 299, 314, 523, 591, 760, 1143, 1246], "rel": [40, 119, 120, 131, 132, 139, 140, 141, 142, 299, 402, 428, 429, 430, 580, 582, 584, 586, 760, 975, 1002, 1003, 1004, 1246], "working_with_conditional_format": [40, 299], "similarli": [40, 108, 186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "well": [40, 116, 117, 118, 130, 224, 299, 455, 760, 1024, 1246], "adjac": [40, 299], "two": [40, 69, 71, 89, 90, 107, 109, 111, 119, 178, 215, 216, 224, 262, 279, 285, 299, 308, 374, 379, 444, 447, 512, 563, 601, 684, 685, 691, 693, 737, 738, 760, 816, 817, 852, 858, 870, 942, 948, 1087, 1113, 1246], "help": [40, 139, 140, 141, 142, 225, 299, 302, 791, 870, 1250], "where": [40, 64, 80, 118, 119, 145, 167, 172, 186, 203, 215, 236, 249, 268, 270, 299, 325, 422, 425, 427, 551, 569, 590, 599, 602, 604, 631, 674, 687, 691, 693, 737, 738, 741, 749, 750, 760, 787, 798, 816, 836, 843, 844, 870, 890, 995, 999, 1007, 1139, 1153, 1157, 1185, 1235, 1237, 1246, 1254], "working_with_sparklin": [40, 299], "inject": [40, 80, 299], "locat": [40, 172, 231, 232, 261, 266, 299, 590, 760, 842, 870, 1007, 1014, 1138, 1139, 1142, 1218, 1246], "syntax": [40, 175, 209, 220, 299, 606, 614, 615, 629, 719, 756, 794, 833, 870, 1160, 1168, 1169, 1183, 1246], "correctli": [40, 121, 299], "microsoft": [40, 299], "com": [40, 119, 299, 428, 429, 430, 614, 615, 616, 760, 1002, 1003, 1004, 1168, 1169, 1170, 1246], "u": [40, 48, 50, 67, 135, 299, 378, 379, 386, 411, 423, 646, 648, 704, 705, 706, 707, 708, 709, 715, 873, 947, 948, 955, 984, 996, 1200, 1202], "offic": [40, 299], "f5ed2452": [40, 299], "2337": [40, 299], "4f71": [40, 299], "bed3": [40, 299], "c8ae6d2b276": [40, 299], "instanti": [40, 118, 240, 273, 299, 827, 846, 870], "basic": [40, 299, 1255], "random": [40, 41, 137, 144, 146, 148, 191, 238, 299, 449, 500, 566, 589, 595, 673, 760, 772, 1018, 1075, 1115, 1137, 1149, 1234, 1246], "dtm": [40, 299, 379, 873, 948], "500": [40, 268, 299, 381, 382, 387, 391, 393, 395, 400, 407, 410, 791, 843, 870, 963, 965, 973, 1126, 1127, 1129, 1246], "val": [40, 233, 299, 523, 559, 667, 750, 760, 824, 870], "10_000": [40, 299], "20_000": [40, 299], "30_000": [40, 299], "increas": [40, 80, 116, 128, 135, 299, 370, 574, 760, 938, 1123, 1246], "b4": [40, 299], "light": [40, 299], "twice": [40, 121, 299], "titl": [40, 64, 299], "explicit": [40, 118, 130, 144, 268, 299, 735, 843, 870], "integr": [40, 299, 1255], "multi_fram": [40, 299], "wb": [40, 299], "coordin": [40, 299], "advanc": [40, 121, 224, 299, 512, 1087, 1255], "min_color": [40, 299], "76933c": [40, 299], "mid_color": [40, 299], "c4d79b": [40, 299], "max_color": [40, 299], "ebf1d": [40, 299], "data_bar_2010": [40, 299], "bar_color": [40, 299], "9bbb59": [40, 299], "bar_negative_color_sam": [40, 299], "bar_negative_border_color_sam": [40, 299], "white": [40, 299], "w": [40, 66, 67, 186, 189, 237, 299, 609, 614, 616, 678, 680, 798, 801, 870, 873, 1163, 1168, 1170, 1196], "get_worksheet_by_nam": [40, 299], "fmt_titl": [40, 299], "add_format": [40, 299], "4f6228": [40, 299], "font_siz": [40, 299], "12": [40, 80, 112, 116, 145, 146, 186, 202, 206, 234, 245, 269, 299, 309, 354, 355, 363, 377, 379, 383, 397, 398, 399, 402, 403, 404, 406, 420, 421, 422, 470, 520, 556, 561, 565, 575, 585, 593, 594, 609, 623, 633, 649, 660, 696, 703, 704, 705, 706, 707, 708, 724, 747, 748, 760, 798, 803, 807, 810, 825, 832, 833, 838, 870, 873, 924, 925, 946, 948, 970, 979, 993, 1094, 1135, 1146, 1163, 1177, 1187, 1203, 1246, 1255], "ital": [40, 299], "customis": [40, 299], "trend": [40, 299], "win_loss": [40, 299], "subtl": [40, 299], "tone": [40, 299], "hidden": [40, 299], "id": [40, 88, 116, 132, 264, 276, 285, 299, 574, 629, 630, 671, 760, 850, 858, 870, 1123, 1232, 1246, 1255], "q1": [40, 299], "55": [40, 82, 299], "20": [40, 116, 146, 172, 194, 196, 216, 223, 226, 230, 232, 299, 322, 323, 324, 373, 381, 382, 387, 391, 393, 395, 400, 406, 407, 410, 420, 449, 454, 559, 578, 579, 581, 675, 711, 715, 722, 747, 760, 817, 820, 870, 873, 941, 951, 979, 993, 1005, 1246], "35": [40, 299, 373, 760, 941, 1246], "q2": [40, 299], "30": [40, 172, 186, 194, 223, 230, 232, 255, 273, 299, 322, 323, 324, 373, 379, 381, 382, 387, 391, 393, 395, 397, 398, 400, 404, 405, 406, 407, 410, 413, 420, 421, 449, 594, 722, 747, 760, 798, 820, 846, 870, 873, 941, 948, 971, 978, 979, 986, 993, 1246, 1255], "60": [40, 172, 299, 387, 393, 395, 407, 419, 585, 646, 760, 976, 980, 992, 1200], "q3": [40, 299], "40": [40, 138, 172, 223, 299, 406, 420, 449, 649, 760, 820, 870, 959, 993, 1203], "80": [40, 299], "q4": [40, 299], "75": [40, 164, 299, 311, 554, 563, 578, 579, 580, 581, 584, 585, 586, 725, 760, 940, 1020, 1113, 1246, 1255], "account": [40, 112, 119, 132, 299, 402, 428, 429, 430, 760, 975, 1002, 1003, 1004, 1246], "flavour": [40, 118, 299], "integer_dtyp": [40, 240, 299, 827, 870, 873], "0_": [40, 299], "just": [40, 130, 215, 299, 816, 870], "unifi": [40, 299, 873], "2_color_scal": [40, 299], "95b3d7": [40, 299], "ffffff": [40, 299], "standardis": [40, 299], "z": [40, 66, 72, 88, 112, 144, 146, 170, 198, 200, 205, 215, 236, 237, 267, 299, 307, 309, 311, 449, 480, 520, 523, 543, 544, 545, 546, 547, 554, 561, 569, 570, 607, 615, 631, 646, 648, 660, 678, 680, 698, 727, 731, 736, 744, 760, 806, 816, 834, 870, 873, 1010, 1119, 1161, 1169, 1185, 1200, 1202, 1246, 1254], "score": [40, 299], "conjunct": [40, 89, 121, 127, 299, 692, 719], "a123": [40, 299], "b345": [40, 299], "c567": [40, 299], "d789": [40, 299], "e101": [40, 299], "45": [40, 138, 234, 299, 379, 406, 420, 575, 585, 609, 615, 657, 684, 685, 722, 747, 760, 825, 870, 873, 948, 979, 993, 1163, 1169, 1212, 1255], "85": [40, 299, 1255], "font": [40, 299], "consola": [40, 299], "stdev": [40, 299], "ipccompress": [41, 42, 299], "arrow": [41, 42, 59, 105, 118, 119, 122, 124, 133, 203, 236, 237, 254, 256, 299, 870, 1222, 1227, 1246], "ipc": [41, 42, 59, 122, 123, 124, 133, 136, 299, 772, 870], "binari": [41, 118, 121, 299, 342, 344, 345, 346, 873, 906, 909, 910], "feather": [41, 122, 133, 299, 772], "access": [41, 81, 82, 83, 84, 128, 132, 135, 154, 203, 235, 236, 299, 616, 848, 870, 1170, 1255], "python": [41, 42, 63, 106, 116, 117, 118, 138, 139, 141, 154, 203, 209, 236, 237, 256, 285, 299, 314, 379, 519, 521, 523, 616, 704, 705, 707, 708, 747, 748, 750, 760, 766, 858, 880, 948, 960, 961, 962, 967, 1094, 1170, 1226, 1246], "lz4": [41, 42, 45, 59, 60, 299, 870], "zstd": [41, 42, 45, 59, 60, 299, 870], "batch": [42, 114, 117, 118, 124, 134, 136, 299, 781, 811, 812, 870], "iobas": [43, 44, 125, 126, 299, 536, 785, 829, 870], "pretti": [43, 299], "row_ori": [43, 299], "serial": [43, 44, 299, 785, 870], "orient": [43, 81, 83, 109, 111, 299, 870], "slower": [43, 109, 111, 121, 185, 188, 209, 222, 269, 285, 299, 523, 725, 760, 797, 800, 858, 870, 1094, 1246], "common": [43, 80, 86, 87, 88, 268, 299, 520, 543, 760, 766, 781, 782, 789, 791, 821, 833, 843, 870], "write_ndjson": [43, 299], "bit_set": [43, 299, 829, 870], "newlin": [44, 126, 134, 299], "delimit": [44, 58, 126, 134, 224, 257, 299, 605, 870, 1159, 1223, 1246], "parquetcompress": [45, 299], "compression_level": [45, 60, 299, 870], "statist": [45, 60, 116, 117, 128, 135, 164, 299, 429, 430, 471, 578, 579, 580, 581, 582, 583, 584, 585, 586, 599, 760, 870, 940, 1003, 1004, 1047, 1131, 1153, 1246], "row_group_s": [45, 60, 299, 870], "data_page_s": [45, 299], "use_pyarrow": [45, 116, 122, 124, 128, 259, 299, 1226, 1227, 1246], "pyarrow_opt": [45, 120, 128, 131, 299], "parquet": [45, 60, 128, 129, 135, 299, 772, 870], "gzip": [45, 60, 299, 870], "lzo": [45, 60, 299, 870], "brotli": [45, 60, 299, 870], "choos": [45, 59, 60, 186, 224, 299, 798, 870], "good": [45, 59, 60, 203, 299, 870], "perform": [45, 59, 60, 80, 96, 106, 116, 117, 118, 122, 128, 130, 133, 134, 135, 154, 157, 185, 186, 187, 188, 189, 190, 206, 209, 210, 212, 217, 228, 234, 237, 250, 263, 285, 299, 314, 512, 523, 555, 575, 607, 620, 621, 631, 646, 647, 648, 760, 776, 798, 799, 801, 802, 807, 825, 835, 840, 849, 850, 870, 1094, 1161, 1174, 1175, 1185, 1200, 1201, 1202, 1246], "fast": [45, 59, 60, 147, 149, 299, 434, 591, 760, 870, 1008, 1143, 1246, 1255], "decompress": [45, 59, 60, 299, 870], "backward": [45, 60, 174, 206, 299, 341, 399, 436, 760, 793, 807, 870, 972, 1010, 1246], "guarante": [45, 60, 116, 117, 164, 191, 265, 299, 449, 760, 791, 841, 870, 1017, 1018, 1246], "deal": [45, 60, 203, 299, 310, 312, 405, 406, 420, 566, 646, 648, 677, 679, 706, 760, 870, 877, 878, 978, 979, 993, 1115, 1200, 1202, 1246], "older": [45, 60, 299, 870], "reader": [45, 60, 114, 116, 117, 122, 124, 128, 299, 773, 870], "higher": [45, 60, 227, 291, 299, 564, 582, 734, 760, 822, 864, 870, 1114, 1130, 1246], "mean": [45, 60, 116, 117, 122, 128, 130, 164, 174, 185, 186, 206, 213, 224, 234, 269, 278, 299, 402, 406, 420, 433, 436, 575, 578, 579, 580, 581, 582, 584, 585, 586, 599, 614, 704, 705, 707, 708, 709, 747, 748, 750, 760, 793, 797, 798, 807, 811, 812, 825, 851, 870, 940, 975, 979, 993, 1006, 1010, 1017, 1127, 1153, 1168, 1246], "smaller": [45, 60, 170, 299, 791, 870, 1001, 1246], "disk": [45, 58, 59, 60, 122, 299, 833, 870], "22": [45, 60, 145, 299, 383, 403, 406, 420, 422, 423, 577, 578, 579, 581, 584, 585, 586, 646, 760, 870, 873, 979, 993, 996, 1125, 1200, 1246, 1255], "comput": [45, 60, 86, 88, 93, 170, 185, 206, 260, 265, 278, 291, 299, 306, 316, 317, 318, 319, 320, 321, 334, 335, 338, 351, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 425, 432, 471, 496, 497, 498, 501, 502, 503, 504, 514, 515, 516, 539, 555, 556, 562, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 596, 597, 598, 599, 603, 665, 666, 673, 678, 680, 684, 685, 686, 691, 693, 710, 737, 738, 750, 760, 781, 797, 804, 806, 807, 841, 848, 851, 864, 870, 875, 881, 882, 883, 884, 885, 886, 899, 900, 903, 919, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 942, 999, 1001, 1005, 1047, 1071, 1072, 1073, 1076, 1077, 1078, 1079, 1089, 1090, 1091, 1099, 1108, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1150, 1151, 1152, 1153, 1156, 1220, 1221, 1228, 1234, 1246], "512": [45, 118, 203, 299, 560, 760, 1108, 1246], "page": [45, 60, 122, 128, 133, 135, 299, 760, 772, 870, 1246], "implement": [45, 106, 118, 154, 191, 209, 225, 285, 299, 302, 449, 470, 523, 542, 544, 545, 546, 547, 561, 660, 725, 760, 858, 1018, 1094, 1138, 1141, 1246, 1250], "At": [45, 299], "moment": [45, 162, 299, 471, 599, 760, 1047, 1153, 1246], "write_t": [45, 299], "partition_col": [45, 119, 299], "write_to_dataset": [45, 299], "similar": [45, 150, 178, 206, 244, 299, 409, 412, 505, 555, 592, 692, 750, 760, 791, 807, 831, 870, 982, 985, 1080, 1145, 1246], "spark": [45, 299], "partit": [45, 119, 120, 128, 131, 135, 136, 204, 222, 299], "we": [45, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 164, 186, 206, 234, 269, 299, 402, 406, 420, 451, 486, 512, 521, 523, 575, 578, 579, 580, 581, 582, 584, 585, 586, 616, 628, 650, 704, 705, 707, 708, 722, 747, 748, 750, 760, 785, 798, 807, 811, 812, 825, 870, 880, 975, 979, 993, 1020, 1061, 1094, 1170, 1182, 1204, 1246], "use_pyarrow_write_to_dataset": [45, 299], "first": [45, 80, 116, 117, 121, 122, 124, 125, 128, 130, 134, 139, 140, 141, 142, 145, 155, 184, 186, 189, 192, 206, 208, 209, 219, 223, 224, 252, 257, 258, 264, 265, 269, 276, 283, 299, 324, 326, 332, 370, 373, 399, 402, 406, 450, 458, 459, 475, 484, 486, 490, 491, 512, 522, 532, 559, 590, 602, 614, 617, 619, 629, 630, 688, 695, 711, 713, 717, 750, 760, 781, 798, 801, 803, 807, 810, 820, 841, 848, 850, 856, 870, 873, 889, 897, 938, 940, 941, 972, 975, 979, 1019, 1029, 1030, 1049, 1059, 1061, 1065, 1066, 1087, 1093, 1139, 1168, 1170, 1171, 1173, 1183, 1184, 1217, 1225, 1246, 1255], "watermark": [45, 299], "partitioned_object": [45, 299], "calendar": [47, 48, 186, 206, 234, 269, 299, 390, 402, 406, 420, 424, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 959, 975, 979, 993, 997], "time_unit": [48, 50, 378, 379, 386, 411, 423, 648, 704, 705, 706, 707, 708, 709, 715, 873, 947, 948, 955, 984, 996, 1202], "time_zon": [48, 380, 382, 405, 648, 704, 705, 706, 707, 708, 873, 946, 949, 954, 978, 1202], "timezon": [48, 382, 873], "m": [48, 50, 67, 205, 299, 377, 378, 379, 385, 386, 409, 411, 412, 423, 614, 646, 647, 648, 652, 704, 705, 706, 707, 708, 709, 715, 806, 870, 873, 946, 947, 948, 954, 955, 982, 984, 985, 996, 1168, 1200, 1201, 1202, 1206], "zone": [48, 377, 380, 405, 648, 704, 705, 706, 707, 708, 873, 946, 949, 978, 1202], "zoneinfo": [48, 873], "run": [48, 58, 59, 60, 86, 87, 147, 149, 185, 188, 207, 209, 224, 241, 265, 274, 285, 299, 314, 370, 486, 521, 523, 573, 574, 621, 739, 760, 781, 782, 789, 791, 797, 800, 811, 812, 816, 821, 828, 833, 841, 847, 870, 873, 938, 1061, 1094, 1122, 1123, 1175, 1246, 1254, 1255], "available_timezon": [48, 873], "128": [49, 82, 1108, 1246], "bit": [49, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 568, 606, 760, 1117, 1160, 1246], "experiment": [49, 51, 87, 136, 267, 268, 299, 370, 406, 451, 523, 578, 579, 580, 581, 582, 584, 585, 586, 760, 782, 843, 870, 918, 938, 979, 1020, 1113, 1246], "progress": [49, 51], "expect": [49, 51, 97, 99, 104, 116, 118, 130, 512, 523, 722, 760, 809, 811, 812, 870], "categori": [51, 71, 90, 257, 299, 349, 350, 371, 451, 563, 760, 914, 916, 939, 1020, 1113, 1246], "iter": [51, 86, 87, 88, 105, 118, 147, 149, 157, 175, 185, 186, 187, 188, 189, 190, 202, 203, 204, 234, 235, 236, 237, 240, 241, 242, 248, 263, 264, 273, 274, 277, 278, 299, 370, 437, 555, 602, 678, 680, 686, 688, 689, 690, 698, 702, 727, 731, 739, 742, 744, 750, 756, 760, 776, 794, 797, 798, 799, 800, 801, 802, 825, 827, 828, 830, 835, 840, 846, 847, 851, 870, 938, 1138, 1246, 1255], "32": [52, 55, 75, 82, 201, 234, 299, 540, 575, 594, 760, 825, 870, 942, 976, 1108, 1130, 1246], "sign": [54, 55, 56, 57, 402, 568, 655, 760, 873, 975, 1034, 1117, 1209, 1246], "maintain_ord": [58, 59, 60, 157, 185, 188, 222, 224, 263, 265, 269, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 308, 340, 444, 447, 513, 523, 670, 760, 776, 782, 789, 791, 797, 800, 821, 833, 835, 840, 841, 852, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 905, 1088, 1231, 1246], "type_coercion": [58, 59, 60, 86, 87, 781, 782, 789, 791, 821, 833, 870], "predicate_pushdown": [58, 59, 60, 86, 87, 781, 782, 789, 791, 811, 812, 821, 833, 870], "projection_pushdown": [58, 59, 60, 86, 87, 781, 782, 789, 791, 811, 812, 821, 833, 870], "simplify_express": [58, 59, 60, 86, 87, 781, 782, 789, 791, 821, 833, 870], "slice_pushdown": [58, 59, 60, 86, 87, 781, 782, 789, 791, 811, 812, 821, 833, 870], "no_optim": [58, 59, 60, 86, 87, 781, 782, 791, 811, 812, 821, 870], "evalu": [58, 59, 60, 173, 175, 206, 299, 311, 325, 327, 328, 370, 437, 453, 476, 477, 512, 554, 677, 679, 683, 687, 704, 705, 707, 708, 710, 719, 720, 733, 736, 742, 747, 748, 750, 751, 760, 781, 794, 804, 806, 807, 870, 890, 892, 893, 938, 1051, 1052, 1237, 1246], "queri": [58, 59, 60, 64, 66, 86, 87, 118, 119, 122, 130, 133, 134, 135, 172, 207, 223, 299, 521, 523, 619, 760, 781, 782, 789, 791, 803, 810, 821, 833, 849, 850, 853, 858, 870, 1007, 1094, 1173, 1246, 1254], "ram": [58, 59, 60, 870], "maintain": [58, 59, 60, 157, 263, 299, 340, 513, 590, 670, 760, 776, 835, 840, 870, 905, 1088, 1139, 1231, 1246], "slightli": [58, 59, 60, 121, 870], "faster": [58, 59, 60, 118, 172, 259, 267, 299, 314, 523, 671, 760, 870, 880, 1007, 1094, 1246], "coercion": [58, 59, 60, 86, 87, 569, 760, 781, 782, 789, 791, 821, 833, 870], "optim": [58, 59, 60, 86, 87, 128, 130, 133, 134, 135, 203, 207, 223, 228, 236, 265, 299, 781, 782, 789, 791, 811, 812, 821, 833, 841, 849, 850, 858, 870, 919, 1138, 1246], "pushdown": [58, 59, 60, 86, 87, 781, 782, 789, 791, 811, 812, 821, 823, 833, 849, 850, 870, 1138, 1141, 1246], "project": [58, 59, 60, 86, 87, 130, 132, 133, 134, 135, 314, 601, 602, 760, 781, 782, 789, 791, 811, 812, 821, 823, 829, 833, 870], "slice": [58, 59, 60, 81, 86, 87, 170, 192, 204, 252, 299, 491, 509, 523, 531, 533, 576, 578, 579, 580, 581, 582, 584, 585, 586, 760, 781, 782, 789, 791, 811, 812, 821, 833, 870, 1001, 1019, 1066, 1084, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1217, 1246], "off": [58, 59, 60, 86, 87, 116, 117, 130, 781, 782, 789, 791, 811, 812, 821, 870], "certain": [58, 59, 60, 87, 95, 120, 131, 195, 196, 269, 299, 642, 643, 781, 782, 821, 870, 1246], "lf": [58, 59, 60, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 805, 806, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 829, 831, 833, 834, 835, 836, 837, 838, 840, 841, 843, 844, 845, 846, 848, 849, 850, 854, 870, 1254, 1255], "scan_csv": [58, 59, 60, 116, 117, 870], "my_larger_than_ram_fil": [58, 59, 60, 870], "data_pagesize_limit": [60, 870], "reduc": [60, 116, 117, 128, 130, 133, 134, 135, 286, 287, 289, 292, 594, 696, 713, 760, 859, 860, 862, 865, 870, 1096, 1112, 1147, 1216, 1246], "pressur": [60, 116, 117, 128, 130, 134, 135, 594, 760, 870, 1147, 1246], "improv": [60, 122, 133, 870], "speed": [60, 314, 523, 760, 870, 1255], "integer_list": 61, "float_list": 61, "wrap": [63, 112, 455, 760], "arbitrari": [63, 146, 873], "eager": [64, 65, 66, 67, 68, 69, 186, 224, 267, 299, 378, 380, 383, 386, 398, 399, 402, 403, 405, 406, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 578, 579, 581, 584, 585, 586, 683, 687, 704, 705, 707, 708, 715, 719, 720, 733, 736, 742, 747, 748, 751, 759, 760, 798, 812, 870, 946, 947, 949, 952, 954, 955, 956, 962, 963, 965, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 1254], "against": [64, 118, 486, 870, 1061, 1254, 1255], "eagerli": [64, 512], "unset": [64, 145, 405, 512, 978], "init": [64, 152], "eager_execut": [64, 1254], "itself": [64, 144, 225, 299, 302, 523, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 737, 738, 760, 809, 870, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1246, 1250, 1254], "impact": [64, 186, 189, 299, 798, 801, 870, 1254], "declar": [64, 105, 107, 108, 109, 111, 118, 125, 126, 134, 299, 870], "godfath": 64, "1972": 64, "6_000_000": 64, "134_821_952": 64, "dark": 64, "knight": 64, "2008": 64, "185_000_000": 64, "533_316_061": 64, "schindler": 64, "1993": 64, "22_000_000": 64, "96_067_179": 64, "pulp": 64, "fiction": 64, "1994": 64, "8_000_000": 64, "107_930_000": 64, "shawshank": 64, "redempt": 64, "25_000_000": 64, "28_341_469": 64, "release_year": 64, "budget": 64, "gross": 64, "imdb_scor": 64, "ctx": [64, 65, 66, 67, 68, 69], "film": 64, "1990": [64, 116], "BY": [64, 66], "desc": [64, 66], "AS": [64, 740, 1254], "decad": 64, "total_gross": 64, "n_film": 64, "2000": [64, 389, 398, 399, 402, 873, 958, 971, 972, 975, 980], "533316061": 64, "232338648": 64, "1970": [64, 136], "134821952": 64, "register_glob": [65, 67, 69, 1254], "register_mani": [65, 66, 69], "unregist": [65, 66, 67, 1254], "frame_data": [65, 68], "collect": [65, 66, 69, 83, 86, 87, 130, 131, 132, 136, 146, 148, 165, 167, 207, 224, 254, 265, 266, 299, 431, 460, 523, 689, 711, 715, 742, 760, 775, 776, 778, 782, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 805, 806, 807, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 827, 829, 831, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 873, 1032, 1246, 1254, 1255], "global": [66, 71, 89, 90, 137, 146, 151, 259, 299, 570, 760, 915, 917, 1119, 1246, 1254], "scope": [66, 69, 152, 771, 873, 1254], "map": [66, 67, 72, 107, 108, 116, 117, 118, 119, 122, 123, 128, 129, 130, 133, 158, 168, 177, 203, 209, 229, 235, 236, 237, 255, 299, 309, 406, 420, 520, 521, 522, 523, 542, 555, 570, 673, 724, 760, 778, 788, 823, 870, 873, 940, 979, 993, 1093, 1094, 1119, 1234, 1246, 1254], "recent": [66, 139, 140, 141, 142, 556, 760, 1108, 1246, 1254], "df1": [66, 68, 69, 80, 88, 139, 140, 169, 172, 216, 260, 271, 299, 817, 870], "df2": [66, 68, 69, 80, 88, 139, 140, 169, 172, 260, 271, 299], "join": [66, 71, 80, 86, 87, 88, 90, 175, 206, 268, 299, 437, 454, 555, 760, 781, 782, 789, 791, 794, 807, 821, 833, 843, 848, 870], "named_fram": [67, 1254], "lf1": [67, 69], "o": [67, 122, 133, 347, 370, 613, 668, 760, 911, 938, 1167, 1195, 1230, 1246], "lf2": [67, 69, 870], "p": [67, 82, 223, 299, 559, 742, 760, 820, 870], "q": [67, 237, 299, 742], "r": [67, 116, 117, 130, 559, 609, 613, 614, 615, 616, 629, 760, 873, 1163, 1167, 1168, 1169, 1170, 1183], "lf3": [67, 870], "lf4": [67, 870], "either": [67, 72, 146, 201, 205, 206, 207, 210, 212, 217, 222, 234, 235, 250, 259, 299, 563, 570, 575, 646, 677, 686, 692, 742, 760, 806, 807, 809, 825, 870, 873, 1113, 1119, 1200, 1246, 1255], "tbl1": [67, 69], "tbl2": [67, 69], "tbl3": 67, "tbl4": 67, "statement": [68, 750], "hello_world": 68, "baz": [68, 196, 197, 224, 266, 299, 616, 636, 638, 756, 805, 842, 870, 873, 1170, 1192], "hello_data": 68, "foo_bar": [68, 527, 530, 636, 722], "registr": [69, 772], "lifetim": [69, 152, 771], "context": [69, 71, 89, 90, 150, 220, 299, 308, 314, 437, 486, 521, 523, 531, 601, 602, 673, 681, 692, 694, 712, 715, 721, 725, 736, 739, 759, 760, 771, 772, 848, 870, 1061, 1234, 1246, 1254], "manag": [69, 71, 89, 90, 771, 772, 1254], "often": [69, 119, 152, 186, 187, 189, 190, 234, 299, 482, 483, 569, 575, 760, 798, 799, 801, 802, 825, 870, 1057, 1058], "want": [69, 87, 108, 172, 209, 220, 299, 437, 521, 523, 574, 578, 579, 580, 581, 582, 584, 585, 586, 607, 620, 631, 695, 704, 713, 733, 736, 751, 760, 782, 803, 810, 870, 873, 1007, 1094, 1123, 1161, 1174, 1185, 1246], "df0": [69, 216, 299, 817, 870], "exit": [69, 71, 89, 152, 1254], "construct": [69, 71, 89, 90, 105, 107, 108, 109, 110, 111, 118, 299, 443, 733, 736, 751, 756, 760, 785, 870, 915, 1246], "persist": [69, 870], "through": [69, 106, 118, 756, 873, 1246], "tbl0": 69, "remain": [69, 116, 117, 130, 167, 170, 175, 299, 375, 376, 437, 485, 570, 637, 638, 760, 787, 794, 811, 812, 870, 943, 944, 1001, 1011, 1060, 1119, 1191, 1192, 1246], "text": [69, 118, 620, 621, 629, 630, 632, 740, 1174, 1175, 1186, 1255], "misc": 69, "testing1234": 69, "test1": 69, "test2": 69, "test3": 69, "disabl": [71, 89, 90, 203, 299, 781, 870], "cach": [71, 86, 87, 89, 90, 122, 130, 133, 135, 139, 140, 141, 142, 151, 570, 578, 579, 580, 581, 582, 584, 585, 586, 646, 647, 648, 652, 760, 771, 781, 782, 789, 791, 821, 833, 870, 915, 1119, 1200, 1201, 1202, 1206, 1246], "under": [71, 81, 82, 83, 84, 89, 90, 752, 753, 755, 756, 761, 762, 765, 767, 768, 769, 1238, 1240, 1242, 1247, 1251, 1252, 1253], "equal": [71, 90, 116, 117, 118, 130, 139, 140, 141, 142, 157, 179, 186, 189, 206, 216, 263, 299, 371, 420, 426, 427, 446, 473, 512, 551, 563, 569, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 626, 627, 655, 737, 738, 750, 756, 760, 776, 798, 801, 807, 817, 835, 840, 870, 939, 979, 1087, 1113, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1140, 1180, 1181, 1209, 1246, 1255], "concaten": [71, 88, 89, 90, 178, 223, 299, 559, 689, 690, 760, 820, 870, 921, 1100, 1246], "introduc": [71, 90, 646, 647, 648, 1200, 1201, 1202], "overhead": [71, 90, 130, 133, 134, 135], "amount": [71, 90, 314, 523, 709, 760], "depend": [71, 85, 90, 118, 138, 329, 330, 478, 479, 523, 531, 563, 566, 709, 712, 715, 721, 760, 894, 895, 1053, 1054, 1113, 1115, 1246, 1255], "nest": [71, 112, 128, 170, 299, 772, 1001, 1246, 1254, 1255], "clear": [71, 89, 160, 299, 780, 870, 926, 1246], "outermost": 71, "s1": [71, 89, 90, 141, 142, 178, 299, 1000, 1046, 1055, 1087, 1228, 1237, 1246], "color": [71, 89, 90, 285, 342, 344, 345, 346, 673, 760, 858, 1234, 1246], "red": [71, 89, 90, 285, 673, 760, 858, 1234, 1246], "green": [71, 89, 90, 285, 673, 760, 858, 1234, 1246], "blue": [71, 89, 90, 342, 344, 345, 346, 673, 760, 1234, 1246], "concat": [71, 89, 90, 117, 921, 1100, 1246], "cat": [71, 89, 90, 371, 563, 606, 609, 651, 654, 667, 690, 755, 760, 873, 939, 1020, 1113, 1160, 1163, 1205, 1208, 1242, 1246], "decor": [71, 81, 82, 83, 84, 146, 148, 209, 299, 523, 760, 771, 772, 1094, 1246], "dure": [71, 116, 117, 130, 152, 172, 299, 1007, 1246], "afterward": [71, 750], "construct_categor": 71, "schemadict": [72, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 127, 130, 299, 742, 811, 812, 853, 858, 870], "composit": [72, 145, 1255], "initi": [72, 152, 695, 699, 713, 750], "dai": [73, 186, 189, 204, 206, 234, 269, 299, 398, 399, 402, 403, 406, 413, 420, 422, 575, 578, 579, 580, 581, 582, 584, 585, 586, 703, 704, 705, 706, 707, 708, 709, 747, 748, 760, 798, 801, 807, 825, 870, 873, 971, 972, 975, 976, 979, 986, 993, 995], "unsign": [74, 75, 76, 77, 568, 760, 873, 1034, 1117, 1246], "static": [78, 853, 858], "frametyp": [80, 1254], "joinstrategi": [80, 205, 299, 806, 870], "outer": [80, 88, 205, 268, 299, 806, 843, 870], "descend": [80, 157, 242, 248, 263, 299, 324, 337, 507, 566, 591, 601, 602, 673, 686, 760, 776, 830, 835, 840, 870, 889, 902, 1042, 1082, 1115, 1143, 1155, 1234, 1246], "fill": [80, 88, 159, 173, 174, 244, 245, 267, 299, 341, 361, 364, 435, 436, 442, 454, 578, 579, 581, 585, 592, 593, 623, 633, 714, 733, 736, 751, 760, 792, 793, 831, 832, 848, 870, 1009, 1010, 1023, 1105, 1126, 1127, 1129, 1132, 1133, 1134, 1145, 1146, 1177, 1187, 1246], "sort": [80, 81, 139, 140, 145, 157, 186, 187, 189, 190, 206, 216, 223, 224, 234, 242, 263, 269, 283, 293, 299, 324, 350, 437, 523, 555, 575, 578, 579, 580, 581, 582, 584, 585, 586, 591, 602, 673, 675, 686, 725, 760, 776, 789, 798, 799, 801, 802, 807, 817, 820, 821, 825, 830, 833, 840, 856, 866, 870, 873, 889, 916, 1042, 1143, 1231, 1234, 1246, 1255], "origin": [80, 116, 117, 130, 167, 175, 265, 299, 375, 376, 405, 406, 420, 437, 470, 485, 522, 542, 555, 568, 569, 570, 571, 608, 609, 614, 619, 684, 685, 760, 787, 794, 841, 870, 939, 943, 944, 978, 979, 993, 1011, 1060, 1093, 1113, 1119, 1120, 1162, 1163, 1168, 1173, 1246], "In": [80, 87, 118, 120, 131, 132, 135, 146, 148, 152, 170, 172, 186, 187, 189, 190, 209, 220, 234, 259, 299, 523, 575, 704, 760, 782, 798, 799, 801, 802, 825, 870, 1001, 1007, 1116, 1246], "duplic": [80, 94, 198, 205, 206, 265, 268, 299, 309, 456, 470, 542, 563, 760, 806, 807, 841, 843, 870, 1026, 1113, 1246], "suitabl": [80, 88, 118, 144, 209, 299, 523, 590, 760, 1094, 1139, 1246, 1255], "get": [80, 87, 113, 123, 129, 136, 150, 157, 161, 168, 177, 181, 183, 186, 187, 189, 190, 192, 193, 198, 200, 201, 208, 211, 218, 219, 224, 234, 235, 239, 243, 247, 252, 263, 272, 283, 293, 299, 308, 322, 323, 324, 326, 331, 333, 340, 349, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 386, 438, 444, 450, 469, 472, 475, 488, 493, 513, 524, 525, 526, 531, 533, 537, 548, 549, 557, 558, 564, 573, 574, 575, 600, 604, 661, 662, 670, 674, 712, 717, 721, 725, 726, 727, 728, 729, 730, 731, 741, 745, 749, 760, 776, 781, 782, 783, 788, 795, 798, 799, 801, 802, 803, 808, 810, 825, 826, 834, 838, 840, 845, 856, 866, 870, 887, 888, 889, 890, 891, 896, 898, 905, 914, 921, 930, 931, 932, 933, 934, 935, 936, 937, 955, 1016, 1019, 1024, 1026, 1044, 1049, 1063, 1068, 1088, 1095, 1097, 1098, 1100, 1103, 1104, 1109, 1110, 1114, 1122, 1123, 1154, 1157, 1217, 1222, 1223, 1231, 1235, 1236, 1246], "speedup": [80, 203, 209, 299, 523, 760, 1094, 1246], "receiv": [80, 118, 130, 209, 223, 285, 299, 523, 559, 760, 820, 870, 1255], "now": [80, 234, 299, 420, 711, 825, 870, 979, 993, 1202], "One": [80, 164, 220, 224, 299, 311, 554, 711, 740, 760, 873, 940, 1246], "whose": [80, 206, 224, 299, 431, 711, 760, 807, 870, 873], "uniqu": [80, 143, 144, 145, 148, 156, 200, 205, 220, 224, 237, 290, 299, 315, 326, 371, 469, 541, 563, 646, 647, 648, 652, 671, 673, 682, 732, 760, 775, 806, 863, 870, 891, 939, 940, 1044, 1101, 1113, 1200, 1201, 1202, 1206, 1232, 1234, 1246], "post": 80, "constrain": [80, 167, 299, 787, 870], "newli": 80, "boolean": [80, 157, 175, 178, 207, 248, 263, 299, 310, 311, 312, 327, 328, 342, 345, 346, 389, 437, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 476, 477, 481, 552, 554, 557, 558, 602, 617, 675, 676, 686, 687, 742, 750, 760, 776, 780, 794, 809, 835, 840, 870, 873, 877, 878, 890, 892, 893, 906, 908, 958, 1011, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1051, 1052, 1056, 1106, 1109, 1110, 1141, 1160, 1227, 1237, 1246], "know": [80, 118, 224, 299, 512, 521, 760, 1236, 1246], "2022": [80, 158, 164, 184, 299, 379, 406, 420, 646, 704, 705, 707, 709, 715, 778, 870, 873, 948, 959, 979, 993, 1200], "df3": [80, 299], "set_tbl_format": 80, "09": [80, 116, 146, 234, 299, 379, 398, 399, 575, 649, 704, 748, 760, 825, 870, 873, 1203], "02": [80, 158, 184, 186, 234, 269, 299, 378, 379, 386, 398, 399, 402, 405, 411, 414, 417, 419, 423, 575, 578, 579, 581, 584, 585, 586, 587, 646, 647, 648, 652, 704, 705, 707, 709, 760, 778, 798, 825, 870, 873, 947, 948, 950, 951, 955, 956, 962, 963, 968, 971, 972, 973, 978, 979, 983, 984, 987, 990, 992, 993, 1087, 1200, 1201, 1202, 1206], "03": [80, 112, 116, 158, 186, 234, 269, 299, 378, 379, 380, 386, 398, 399, 402, 405, 406, 409, 411, 412, 413, 414, 417, 419, 420, 423, 575, 578, 579, 581, 584, 585, 586, 647, 652, 704, 705, 707, 709, 760, 778, 798, 825, 870, 947, 948, 949, 955, 956, 962, 963, 971, 972, 973, 978, 979, 982, 984, 985, 986, 987, 990, 992, 1201, 1206], "af1": 80, "af2": 80, "af3": 80, "keep": [80, 116, 117, 130, 265, 268, 269, 299, 470, 522, 535, 543, 570, 688, 760, 841, 843, 870, 1093, 1119, 1246], "easili": [80, 118, 240, 273, 278, 299, 742, 827, 846, 851, 870], "dot": [80, 760, 833, 870, 1246], "product": [80, 162, 205, 299, 363, 368, 374, 760, 791, 806, 870, 932, 936, 942, 1246], "fill_nul": [80, 173, 299, 760, 792, 848, 870, 1246], "sum_horizont": [80, 250, 299, 743], "167": 80, "47": 80, "callabl": [81, 82, 83, 84, 130, 155, 178, 209, 223, 280, 285, 299, 314, 512, 519, 520, 521, 523, 543, 559, 576, 577, 681, 695, 696, 699, 700, 713, 723, 724, 725, 735, 760, 811, 812, 820, 853, 858, 870, 880, 1087, 1094, 1124, 1125, 1246], "by_first_letter_of_column_nam": 81, "f": [81, 117, 184, 204, 254, 264, 267, 299, 307, 512, 594, 613, 646, 648, 681, 689, 723, 760, 1087, 1167, 1200, 1202], "fromkei": [81, 83], "by_first_letter_of_column_valu": 81, "starts_with": [81, 342, 345, 606, 612, 873, 1166], "to_seri": [81, 181, 299, 646, 687, 736, 1200], "xy": [81, 83], "yz": [81, 83], "b1": [81, 83], "b2": [81, 83], "pow_n": 82, "powersofn": 82, "next": [82, 186, 206, 234, 269, 299, 341, 402, 406, 420, 566, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993, 1115, 1246], "ceil": [82, 760, 1246], "previou": [82, 152, 544, 545, 556, 561, 658, 660, 760, 1108, 1246], "floor": [82, 760, 1246], "nearest": [82, 206, 227, 291, 299, 352, 440, 454, 564, 582, 734, 760, 807, 822, 864, 870, 920, 1013, 1023, 1114, 1130, 1246], "24": [82, 150, 170, 186, 206, 209, 234, 269, 299, 363, 370, 383, 402, 403, 406, 414, 420, 422, 540, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 938, 975, 979, 987, 993, 1046, 1246], "001": [82, 655, 709, 988, 989, 991, 1209], "next_pow2": 82, "prev_pow2": 82, "nearest_pow2": 82, "split_by_column_dtyp": 83, "collect_al": [83, 87, 781, 782, 870], "31": [84, 146, 379, 383, 398, 402, 413, 646, 703, 706, 715, 722, 873, 946, 948, 952, 971, 986, 1200, 1255], "42": [84, 191, 216, 234, 299, 575, 760, 817, 825, 870, 1018, 1246], "961": 84, "1764": 84, "4160": 84, "build": [85, 106, 873, 1255], "wa": [85, 139, 570, 631, 760, 1119, 1185, 1246], "compil": [85, 329, 330, 478, 479, 894, 895, 1053, 1054], "gate": 85, "info": [85, 120, 131, 132, 138, 225, 299, 302, 1250], "host": [85, 116, 122, 124, 133, 135], "git": 85, "lazy_fram": [86, 87], "comm_subplan_elim": [86, 87, 781, 782, 789, 791, 821, 833, 870], "comm_subexpr_elim": [86, 87, 781, 782, 789, 791, 821, 833, 870], "graph": [86, 207, 299, 781, 804, 848, 870], "parallel": [86, 88, 114, 119, 128, 135, 186, 189, 206, 207, 223, 241, 274, 299, 370, 486, 673, 750, 760, 772, 798, 801, 806, 807, 828, 847, 858, 870, 938, 1061, 1234, 1246], "threadpool": [86, 150], "Will": [86, 87, 781, 782, 789, 791, 821, 833, 870, 1246], "try": [86, 87, 100, 102, 116, 117, 122, 128, 130, 133, 135, 781, 782, 789, 791, 821, 833, 870], "branch": [86, 87, 781, 782, 789, 791, 821, 833, 870], "subplan": [86, 87, 781, 782, 789, 791, 821, 833, 870], "union": [86, 87, 88, 504, 781, 782, 789, 791, 821, 833, 870, 873, 1079], "subexpress": [86, 87, 781, 782, 789, 791, 821, 833, 870], "reus": [86, 87, 781, 782, 789, 791, 821, 833, 870], "part": [86, 87, 105, 121, 146, 615, 637, 638, 782, 789, 791, 821, 833, 848, 870, 1169, 1191, 1192], "fashion": [86, 87, 205, 299, 782, 789, 791, 821, 833, 870], "alpha": [86, 87, 314, 428, 429, 430, 760, 781, 782, 789, 791, 821, 833, 870, 1002, 1003, 1004, 1246], "gevent": [87, 138, 782, 870], "await": [87, 782, 870], "_geventdataframeresult": [87, 782, 870], "asynchron": [87, 782, 870], "them": [87, 105, 107, 108, 109, 111, 119, 125, 126, 127, 128, 130, 134, 135, 171, 172, 186, 206, 216, 234, 269, 299, 455, 492, 548, 549, 555, 575, 689, 704, 705, 707, 708, 747, 748, 760, 782, 790, 798, 807, 817, 825, 870, 873, 1007, 1067, 1103, 1104, 1246], "schedul": [87, 782, 870], "insid": [87, 782, 870], "almost": [87, 209, 285, 299, 646, 647, 648, 782, 870, 1094, 1200, 1201, 1202, 1246], "instantli": [87, 782, 870], "asyncio": [87, 782, 870], "releas": [87, 314, 523, 760, 782, 870, 1255], "greenlet": [87, 782, 870], "task": [87, 782, 870], "wrapper": [87, 782, 870], "event": [87, 782, 870], "asyncresult": [87, 782, 870], "timeout": [87, 782, 870], "break": [87, 136, 267, 268, 299, 314, 370, 371, 406, 451, 578, 579, 580, 581, 582, 584, 585, 586, 760, 782, 843, 870, 918, 938, 939, 979, 1020, 1113, 1246], "collect_async": [87, 870], "set_except": [87, 782, 870], "futur": [87, 154, 164, 210, 212, 217, 250, 299, 704, 782, 870, 1236, 1246], "rerais": [87, 782, 870], "polarstyp": 88, "concatmethod": 88, "vertic": [88, 172, 210, 212, 217, 250, 267, 271, 299, 605, 1159], "rechunk": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 299, 760, 921, 1007, 1100, 1246], "combin": [88, 100, 102, 175, 186, 191, 206, 234, 269, 299, 311, 325, 420, 554, 570, 575, 624, 634, 640, 641, 642, 643, 704, 705, 707, 708, 747, 748, 750, 760, 798, 807, 825, 833, 870, 979, 993, 1119, 1178, 1188, 1194, 1195, 1196, 1197, 1246], "vertical_relax": 88, "diagon": [88, 264, 299], "diagonal_relax": 88, "vstack": [88, 172, 299], "addition": [88, 235, 299], "coerc": [88, 569, 760], "supertyp": [88, 174, 299, 313, 760, 793, 870], "mismatch": [88, 100, 126, 139, 141], "find": [88, 176, 182, 299, 590, 607, 760, 1139, 1161, 1246], "miss": [88, 116, 117, 130, 173, 299, 341, 428, 429, 430, 442, 464, 466, 512, 760, 792, 870, 1002, 1003, 1004, 1236, 1246], "stack": [88, 194, 271, 299], "don": [88, 186, 209, 265, 267, 299, 314, 370, 486, 523, 555, 760, 798, 841, 870, 873, 938, 1000, 1061, 1094, 1140, 1236, 1246], "auto": [88, 105, 107, 108, 109, 111, 125, 126, 128, 134, 135, 264, 299, 420, 870, 979, 993, 1255], "logic": [88, 209, 225, 285, 299, 302, 310, 312, 523, 667, 677, 679, 725, 760, 785, 806, 829, 858, 870, 877, 878, 1094, 1229, 1246, 1250], "align_fram": 88, "pattern": [88, 116, 117, 130, 133, 134, 135, 203, 299, 529, 606, 607, 608, 609, 614, 615, 616, 629, 630, 631, 858, 873, 1138, 1141, 1160, 1161, 1162, 1163, 1168, 1169, 1170, 1183, 1184, 1185, 1246], "collis": 88, "need": [88, 112, 116, 117, 119, 186, 187, 189, 190, 234, 237, 246, 259, 299, 512, 575, 594, 649, 709, 733, 736, 751, 760, 798, 799, 801, 802, 825, 870, 1147, 1203, 1246, 1255], "sure": [88, 105, 110, 116, 117, 122, 124, 128, 186, 187, 189, 190, 228, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "contigu": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 228, 299], "relev": 88, "df_h1": 88, "l1": 88, "l2": 88, "df_h2": 88, "r1": 88, "r2": 88, "r3": 88, "df_d1": 88, "df_d2": 88, "df_a1": 88, "df_a2": 88, "df_a3": 88, "enable_string_cach": 89, "stringcach": [89, 90, 205, 299, 772, 915, 917], "reliabl": [89, 90], "wai": [89, 90, 105, 107, 108, 109, 111, 125, 126, 134, 185, 204, 223, 248, 278, 299, 555, 559, 602, 614, 756, 760, 797, 820, 835, 851, 858, 870, 1168], "until": [89, 207, 299, 626, 627, 655, 1180, 1181, 1209], "deprec": [90, 91, 155, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 275, 280, 299, 314, 354, 355, 365, 366, 367, 368, 369, 382, 384, 388, 392, 394, 396, 401, 405, 408, 420, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 561, 576, 593, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 646, 648, 660, 663, 664, 675, 681, 701, 702, 704, 706, 723, 760, 798, 799, 800, 801, 802, 811, 832, 839, 849, 853, 870, 880, 924, 925, 934, 935, 936, 937, 939, 951, 953, 957, 964, 966, 969, 974, 978, 979, 981, 993, 1025, 1029, 1031, 1034, 1035, 1041, 1043, 1045, 1057, 1070, 1085, 1093, 1113, 1124, 1140, 1142, 1146, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1200, 1202, 1218, 1219, 1236, 1246], "sinc": [90, 120, 131, 155, 157, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 263, 275, 280, 299, 314, 354, 355, 365, 366, 367, 368, 369, 382, 384, 386, 388, 392, 394, 396, 401, 405, 408, 420, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 561, 576, 593, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 646, 648, 660, 663, 664, 675, 681, 701, 702, 704, 706, 715, 723, 760, 776, 798, 799, 800, 801, 802, 811, 832, 835, 839, 840, 849, 853, 870, 880, 924, 925, 934, 935, 936, 937, 939, 951, 953, 955, 957, 964, 966, 969, 974, 978, 979, 981, 993, 1025, 1029, 1031, 1034, 1035, 1041, 1043, 1045, 1057, 1070, 1085, 1093, 1113, 1124, 1140, 1142, 1146, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1200, 1202, 1218, 1219, 1236, 1246], "19": [90, 121, 138, 155, 176, 179, 186, 187, 188, 189, 190, 195, 206, 210, 212, 217, 231, 234, 245, 250, 253, 280, 299, 314, 354, 355, 365, 366, 367, 368, 369, 384, 388, 392, 394, 396, 401, 405, 406, 408, 420, 458, 462, 465, 470, 482, 495, 510, 519, 520, 522, 561, 575, 576, 579, 581, 593, 608, 618, 622, 623, 624, 625, 628, 633, 634, 640, 646, 648, 649, 660, 663, 664, 681, 701, 702, 704, 706, 723, 760, 798, 799, 800, 801, 802, 807, 811, 825, 832, 839, 853, 870, 880, 924, 925, 934, 935, 936, 937, 939, 953, 957, 964, 966, 969, 974, 978, 979, 981, 993, 1025, 1029, 1031, 1034, 1035, 1041, 1043, 1045, 1057, 1070, 1085, 1093, 1113, 1124, 1140, 1142, 1146, 1162, 1172, 1176, 1177, 1178, 1179, 1182, 1187, 1188, 1194, 1200, 1202, 1203, 1218, 1219, 1236, 1246], "longer": [90, 116, 130], "accept": [90, 115, 116, 117, 120, 122, 124, 128, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 278, 299, 307, 353, 431, 455, 522, 555, 570, 602, 676, 678, 680, 686, 688, 689, 690, 698, 702, 727, 731, 739, 742, 744, 750, 760, 776, 797, 800, 827, 828, 831, 835, 840, 846, 847, 851, 870, 923, 1024, 1119, 1145, 1246], "disable_string_cach": 90, "finish": [93, 172, 299, 1007, 1246], "least": [97, 146, 556, 760, 1108, 1246], "unexpect": [98, 299, 521, 523, 760, 1094, 1246], "caus": [98, 106, 116, 117, 130, 139, 154, 172, 299, 1007, 1246], "panic": 98, "incompat": 102, "arrai": [105, 109, 116, 117, 128, 170, 254, 259, 260, 299, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 480, 496, 497, 498, 499, 508, 511, 515, 521, 578, 579, 581, 585, 591, 710, 760, 870, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 924, 925, 930, 931, 932, 933, 934, 935, 936, 937, 942, 1001, 1055, 1071, 1072, 1073, 1074, 1082, 1083, 1086, 1090, 1091, 1126, 1127, 1129, 1132, 1133, 1134, 1143, 1148, 1222, 1227, 1228, 1236, 1246], "chunkedarrai": [105, 219, 299], "recordbatch": [105, 204, 299], "schemadefinit": [105, 107, 108, 109, 111, 125, 126, 134, 299, 870], "schema_overrid": [105, 107, 108, 109, 110, 111, 118, 119, 121, 125, 126, 127, 204, 259, 299, 870, 873, 905], "copi": [105, 106, 154, 159, 160, 204, 254, 260, 273, 299, 434, 760, 779, 780, 846, 870, 922, 926, 1008, 1222, 1227, 1228, 1246], "closest": 105, "pair": [105, 107, 108, 109, 111, 125, 126, 134, 145, 229, 299, 823, 870, 1255], "sever": [105, 107, 108, 109, 111, 125, 126, 134, 299, 870, 1255], "form": [105, 107, 108, 109, 111, 125, 126, 134, 203, 236, 267, 299, 556, 760, 870, 1108, 1246], "dimens": [105, 107, 109, 111, 125, 126, 134, 299, 571, 760, 870, 1120, 1246], "supportsinterchang": 106, "allow_copi": [106, 154], "interchang": [106, 154], "__dataframe__": 106, "convers": [106, 121, 154, 203, 204, 236, 237, 256, 259, 260, 299, 646, 647, 648, 652, 772, 1017, 1200, 1201, 1202, 1206, 1226, 1227, 1228, 1246], "detail": [106, 118, 119, 139, 141, 154, 299, 870, 1255], "latest": [106, 120, 131, 154, 405, 406, 420, 442, 532, 646, 648, 706, 760, 978, 979, 993, 1200, 1202], "from_panda": 106, "from_arrow": 106, "effici": [106, 118, 121, 202, 204, 299], "convert": [106, 110, 120, 121, 127, 131, 154, 255, 256, 257, 258, 259, 262, 299, 339, 372, 380, 409, 412, 511, 512, 520, 521, 543, 565, 616, 628, 646, 647, 648, 649, 650, 652, 657, 760, 870, 904, 917, 949, 982, 985, 1086, 1087, 1170, 1182, 1200, 1201, 1202, 1203, 1204, 1206, 1212, 1215, 1225, 1226, 1227, 1228, 1236, 1246], "panda": [106, 110, 138, 186, 260, 299, 398, 399, 667, 760, 798, 870, 971, 972, 1228, 1229, 1246], "pd": [106, 110, 667, 760, 1228, 1229, 1246], "df_pd": 106, "dfi": [106, 154], "clone": [107, 108, 109, 110, 111, 159, 259, 260, 299, 779, 870, 922, 1226, 1227, 1228, 1236, 1246], "dimension": [107, 109, 111, 259, 299, 870, 1246], "infer_schema_length": [108, 111, 116, 117, 121, 125, 130, 134, 299, 617, 618, 870, 1171, 1172], "NOT": [108, 202, 299, 512, 530, 1254], "typic": [108, 118, 135, 209, 299, 385, 873, 954, 1094, 1246], "clearer": 108, "partial": [108, 116, 130, 299, 870], "mani": [108, 111, 118, 119, 172, 299, 617, 618, 631, 1007, 1171, 1172, 1185, 1246], "scan": [108, 111, 116, 117, 130, 131, 132, 133, 134, 135, 136, 186, 187, 189, 190, 234, 299, 575, 760, 791, 798, 799, 801, 802, 803, 810, 825, 870], "slow": [108, 111, 116, 117, 130, 314, 370, 523, 577, 760, 858, 938, 1125, 1246], "present": [108, 146, 460, 522, 642, 643, 760, 791, 870, 1093, 1236, 1246], "np": [109, 175, 259, 299, 444, 663, 760, 794, 870, 1014, 1028, 1033, 1037, 1038, 1138, 1139, 1218, 1246], "ndarrai": [109, 175, 259, 299, 444, 663, 760, 794, 870, 1014, 1138, 1139, 1142, 1218, 1227, 1246], "numpi": [109, 138, 162, 203, 236, 237, 256, 259, 260, 299, 521, 548, 549, 577, 760, 870, 1028, 1033, 1037, 1038, 1103, 1104, 1125, 1227, 1228, 1236, 1246], "columnar": [109, 111, 203, 236, 299], "interpret": [109, 111, 116, 117, 130, 299, 870], "yield": [109, 111, 116, 117, 118, 130, 170, 172, 264, 299, 521, 555, 760, 870, 1001, 1007, 1246], "conclus": [109, 111, 299, 870], "nan_to_nul": [110, 299, 870, 1246], "include_index": 110, "instal": [110, 116, 117, 119, 122, 124, 162, 259, 260, 299, 833, 870, 1228, 1246], "nan": [110, 146, 154, 173, 260, 299, 375, 376, 426, 427, 435, 446, 448, 454, 464, 466, 467, 468, 473, 518, 524, 537, 548, 549, 550, 551, 577, 669, 691, 760, 792, 870, 882, 886, 943, 944, 1009, 1037, 1038, 1103, 1104, 1125, 1227, 1228, 1246, 1255], "pd_df": 110, "pd_seri": 110, "tbl": [112, 114, 117], "reconstruct": 112, "repr": [112, 146, 148], "trim": 112, "whitespac": [112, 624, 634, 640, 641, 642, 643, 1178, 1188, 1194, 1195, 1196, 1197], "prompt": 112, "extract": [112, 381, 383, 384, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 403, 404, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 559, 615, 616, 617, 618, 619, 637, 760, 950, 951, 952, 953, 956, 957, 959, 963, 964, 965, 966, 968, 969, 970, 973, 974, 976, 977, 980, 981, 983, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 1169, 1170, 1171, 1172, 1173], "to_init_repr": [112, 299, 1246], "truncat": [112, 116, 130, 184, 186, 189, 203, 236, 237, 256, 299, 798, 801, 821, 870], "identifi": [112, 215, 222, 265, 299, 816, 841, 870], "compound": [112, 237, 299, 711, 873], "neither": [112, 121, 127, 238, 299, 512, 1087], "source_ac": 112, "source_cha": 112, "ident": [112, 159, 160, 299, 409, 573, 574, 760, 779, 780, 870, 922, 926, 982, 1122, 1123, 1246], "timestamp": [112, 186, 189, 299, 405, 406, 420, 715, 798, 801, 870, 978, 979, 993], "tor_id": 112, "nnel_id": 112, "\u03bc": [112, 146, 186, 203, 206, 234, 236, 237, 256, 269, 299, 377, 378, 379, 380, 381, 382, 385, 387, 391, 393, 395, 398, 399, 400, 402, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 575, 578, 579, 581, 584, 585, 586, 646, 648, 707, 709, 715, 760, 798, 807, 825, 870, 873, 946, 947, 948, 949, 950, 951, 954, 955, 956, 962, 963, 968, 971, 972, 973, 975, 978, 979, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1200, 1202], "asia": [112, 873, 950, 951, 983], "tokyo": [112, 873], "123456780": 112, "9876543210": 112, "56": [112, 665, 760], "59": [112, 145, 379, 395, 407, 706, 746, 747, 748, 873, 948, 968, 980], "663053": 112, "jst": [112, 873], "803065983": 112, "2055938745": 112, "38": [112, 146], "18": [112, 216, 234, 299, 364, 406, 420, 423, 454, 470, 542, 575, 760, 817, 821, 825, 870, 873, 996, 1202], "050545": 112, "source_actor_id": 112, "source_channel_id": 112, "to_list": [112, 234, 299, 1160, 1246], "uint32": [113, 138, 158, 170, 276, 299, 324, 329, 330, 359, 444, 447, 474, 478, 479, 494, 569, 608, 609, 620, 621, 663, 667, 692, 719, 760, 778, 850, 870, 873, 890, 894, 895, 912, 1000, 1001, 1034, 1053, 1054, 1069, 1140, 1162, 1163, 1174, 1175, 1229, 1246], "regular": [113, 203, 235, 236, 269, 276, 299, 431, 606, 608, 609, 614, 615, 616, 629, 630, 760, 850, 870, 873, 1160, 1162, 1163, 1168, 1169, 1170, 1183, 1184], "uint64": [113, 191, 276, 299, 329, 330, 449, 478, 479, 568, 760, 850, 870, 894, 895, 1018, 1053, 1054, 1117, 1246], "bigidx": 113, "read": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 299, 443, 521, 750, 760, 785, 791, 870, 1007, 1246], "over": [114, 116, 117, 118, 120, 130, 146, 155, 172, 202, 203, 204, 209, 235, 236, 237, 264, 277, 280, 285, 299, 314, 370, 436, 520, 521, 523, 531, 533, 534, 535, 543, 566, 578, 579, 580, 581, 582, 584, 585, 586, 681, 695, 696, 699, 700, 713, 723, 724, 725, 735, 760, 853, 858, 873, 880, 938, 1007, 1094, 1126, 1127, 1129, 1133, 1246], "fetch": [114, 130, 207, 299, 779, 781, 803, 810, 870], "ideal": 114, "read_csv_batch": [114, 773], "tpch": [114, 117], "tables_scale_100": [114, 117], "lineitem": [114, 117, 119], "try_parse_d": [114, 116, 117, 130], "n_row": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 204, 299, 791, 870], "handler": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 785, 870], "builtin": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 785, 870], "stop": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 578, 579, 581, 584, 585, 586, 760, 947, 949, 955, 956, 963, 965, 968, 973, 979, 984], "textio": 116, "has_head": [116, 117, 121, 130], "new_column": [116, 117, 121, 130, 230, 231, 299], "comment_prefix": [116, 117, 130], "skip_row": [116, 117, 130], "missing_utf8_is_empty_str": [116, 117, 130], "ignore_error": [116, 117, 126, 130], "n_thread": [116, 117], "8192": 116, "csvencod": [116, 117, 130], "low_memori": [116, 117, 128, 130, 134, 135], "skip_rows_after_head": [116, 117, 130], "row_index_nam": [116, 117, 122, 124, 128, 130, 133, 134, 135], "row_index_offset": [116, 117, 122, 124, 128, 130, 133, 134, 135], "sample_s": [116, 117], "eol_char": [116, 117, 130], "raise_if_empti": [116, 117, 121, 127, 130], "truncate_ragged_lin": [116, 130], "fsspec": [116, 117, 122, 124, 128, 131, 132, 133, 135, 138], "remot": [116, 117, 122, 124], "autogener": [116, 117, 130], "column_x": [116, 117, 130], "enumer": [116, 117, 130, 204, 299], "shorter": [116, 117, 130, 512, 719], "comment": [116, 117, 130], "instanc": [116, 117, 128, 130, 135, 146, 148, 152, 158, 172, 178, 299, 348, 532, 578, 579, 580, 581, 582, 584, 585, 586, 695, 699, 713, 756, 760, 778, 812, 849, 850, 870, 912, 1007, 1246], "escap": [116, 117, 119, 130], "complet": [116, 118, 130, 1227, 1246], "wherea": [116, 118, 130, 234, 299, 406, 420, 548, 549, 575, 760, 803, 810, 825, 870, 979, 993, 1103, 1104, 1246], "would": [116, 117, 130, 324, 332, 490, 523, 531, 566, 686, 760, 889, 897, 1065, 1115, 1227, 1246], "prefer": [116, 117, 120, 130, 149, 172, 203, 209, 235, 236, 285, 299, 431, 523, 760, 870, 1007, 1094, 1246, 1255], "treat": [116, 117, 130, 606, 609, 629, 630, 750, 1160, 1163, 1183, 1184], "10000": [116, 204, 299], "might": [116, 117, 130, 150, 157, 259, 263, 299, 314, 523, 671, 760, 776, 835, 840, 870, 1228, 1246], "issu": [116, 117, 121, 130, 363, 364, 661, 760, 932, 933, 1216, 1246], "iso8601": [116, 117, 130], "succe": [116, 117, 130], "cpu": [116, 117], "system": [116, 117], "wrongli": 116, "done": [116, 117, 130, 136, 152, 156, 158, 206, 299, 313, 315, 348, 555, 682, 760, 775, 778, 807, 870, 912, 1246], "buffer": [116, 117, 118, 170, 203, 299, 1001, 1246], "modifi": [116, 117, 130, 150, 152, 172, 194, 202, 203, 271, 299, 325, 405, 423, 606, 614, 615, 629, 760, 879, 978, 996, 1007, 1160, 1168, 1169, 1183, 1205, 1207, 1208, 1246], "upper": [116, 117, 118, 170, 186, 189, 299, 353, 354, 451, 455, 512, 672, 683, 704, 705, 707, 708, 747, 748, 760, 798, 801, 870, 923, 924, 1001, 1020, 1024, 1092, 1233, 1246], "bound": [116, 117, 170, 186, 189, 299, 332, 353, 354, 355, 455, 489, 490, 510, 512, 517, 672, 683, 704, 705, 707, 708, 747, 748, 760, 798, 801, 870, 897, 923, 924, 925, 1001, 1024, 1064, 1065, 1085, 1092, 1233, 1246], "lossi": [116, 117, 130], "decod": [116, 117, 617], "expens": [116, 117, 128, 130, 134, 135, 147, 149, 186, 187, 189, 190, 203, 209, 234, 235, 236, 237, 264, 265, 299, 314, 523, 575, 760, 798, 799, 801, 802, 825, 841, 870, 1007, 1094, 1246, 1255], "aggreg": [116, 117, 128, 178, 185, 186, 188, 189, 210, 212, 214, 217, 220, 224, 226, 227, 234, 249, 250, 267, 270, 278, 279, 282, 284, 299, 308, 437, 452, 519, 521, 523, 555, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 677, 678, 679, 680, 695, 696, 697, 698, 699, 700, 701, 702, 713, 718, 726, 727, 730, 731, 735, 743, 744, 760, 798, 799, 801, 802, 812, 813, 814, 815, 818, 819, 822, 825, 836, 837, 844, 851, 852, 855, 857, 870, 1021, 1124, 1125, 1126, 1127, 1129, 1132, 1133, 1134, 1246], "parser": 116, "regard": [116, 691], "sens": [116, 122, 124, 133, 216, 269, 299, 555, 760, 817, 870], "particular": [116, 122, 124, 133, 170, 299, 1001, 1246], "usernam": [116, 119, 122, 124, 133], "password": [116, 119, 122, 124, 133], "skip": [116, 117, 121, 128, 130, 135, 267, 299, 880, 1094, 1246], "offset": [116, 117, 121, 122, 124, 128, 130, 133, 134, 135, 180, 186, 187, 189, 190, 234, 247, 253, 269, 275, 276, 299, 377, 385, 398, 399, 402, 406, 420, 445, 506, 575, 600, 635, 664, 760, 796, 798, 799, 801, 802, 825, 834, 839, 849, 850, 870, 946, 954, 971, 972, 975, 979, 993, 1015, 1081, 1154, 1189, 1202, 1219, 1246], "sampl": [116, 117, 285, 299, 599, 760, 858, 1153, 1246], "estim": [116, 117, 156, 170, 299, 315, 429, 430, 471, 682, 760, 775, 870, 1001, 1003, 1004, 1047, 1246], "alloc": [116, 117, 170, 228, 299, 760, 1001, 1246], "encount": [116, 117, 130, 186, 189, 299, 548, 549, 617, 619, 691, 695, 713, 760, 798, 801, 870, 1103, 1104, 1171, 1173, 1246], "window": [116, 117, 130, 186, 187, 189, 190, 234, 299, 370, 406, 420, 428, 429, 430, 521, 523, 555, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 689, 737, 738, 760, 798, 799, 801, 802, 825, 870, 938, 979, 993, 1002, 1003, 1004, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1246], "rn": [116, 117, 130], "go": [116, 117, 130, 259, 299, 612, 1166], "nodataerror": [116, 117, 121, 127, 130, 772], "lazili": [116, 117, 130, 131, 132, 133, 134, 135, 782, 870], "glob": [116, 117, 130, 133, 134, 135], "continu": [116, 128, 371, 563, 599, 760, 939, 1113, 1153, 1246], "benchmark": [116, 128], "reproduc": 116, "birthdai": 116, "alic": 116, "1995": 116, "bob": [116, 216, 299, 817, 870], "charli": 116, "2002": [116, 389, 402, 958, 975, 997], "08": [116, 139, 140, 141, 142, 146, 234, 299, 379, 406, 575, 646, 707, 709, 760, 825, 870, 873, 979, 993, 1200], "50000": 117, "batchedcsvread": [117, 772], "upon": 117, "creation": 117, "gather": [117, 180, 253, 299, 445, 510, 663, 664, 760, 796, 839, 870, 1015, 1085, 1218, 1219, 1246], "next_batch": 117, "big": 117, "interest": 117, "seen_group": 117, "big_fil": 117, "df_current_batch": 117, "partition_df": 117, "partition_bi": [117, 204, 299], "as_dict": [117, 222, 299], "fh": 117, "write_csv": [117, 130, 299], "els": [117, 750], "connectionorcursor": 118, "iter_batch": 118, "execute_opt": 118, "cursor": 118, "client": 118, "odbc": 118, "establish": 118, "resultset": 118, "manner": 118, "veri": [118, 203, 264, 299, 523, 760, 858], "poor": 118, "trip": 118, "still": [118, 119], "intern": [118, 137, 203, 299], "exact": [118, 144, 146, 148, 246, 299, 644, 645, 646, 647, 648, 669, 760, 1200, 1201, 1202], "incom": 118, "read_arrow_batches_from_odbc": 118, "read_database_uri": 118, "wide": [118, 184, 215, 267, 299, 816, 870], "snowflak": [118, 119], "variou": [118, 299, 760, 870, 873, 1246], "facil": 118, "initialis": [118, 152, 870, 1254], "flight": 118, "flightsql": 118, "flight_sql": 118, "about": [118, 599, 606, 614, 615, 629, 760, 1153, 1160, 1168, 1169, 1183, 1246, 1255], "notabl": 118, "dremio": 118, "influxdb": 118, "notic": [118, 299, 870, 1246], "dbapi2": 118, "connectorx": [118, 119, 138], "optimis": [118, 209, 237, 285, 299, 870, 1094, 1141, 1246, 1255], "translat": 118, "conn": 118, "url": [118, 119, 128, 135, 614, 616, 1168, 1170], "test_data": 118, "user_conn": 118, "normalised_scor": 118, "uint8": [118, 143, 145, 158, 258, 259, 267, 299, 363, 364, 570, 661, 676, 760, 778, 870, 873, 932, 933, 1119, 1216, 1246, 1255], "parameteris": 118, "metric": 118, "alchemy_conn": 118, "qmark": 118, "variad": 118, "1000": [118, 121, 170, 258, 276, 299, 850, 870, 988, 1090, 1225, 1246, 1255], "localhost": 118, "5432": 118, "uid": 118, "usr": 118, "pwd": 118, "max_text_s": 118, "max_binary_s": 118, "do_someth": 118, "partition_on": 119, "partition_rang": 119, "partition_num": 119, "dbreadengin": 119, "raw": 119, "warehous": 119, "role": 119, "caller": [119, 216, 299, 512, 812, 817, 853, 858, 870], "respons": [119, 216, 299, 817, 870], "come": [119, 186, 299, 398, 399, 471, 512, 760, 773, 798, 869, 870, 971, 972, 1047, 1246], "transfer": 119, "document": [119, 121, 225, 299, 302, 409, 412, 619, 646, 647, 648, 652, 756, 917, 982, 985, 1173, 1200, 1201, 1202, 1206, 1250], "redshift": 119, "mysql": 119, "mariadb": 119, "clickhous": 119, "oracl": 119, "bigqueri": 119, "pleas": [119, 186, 225, 299, 302, 704, 709, 798, 870, 1250], "github": 119, "sfu": 119, "connector": 119, "destin": 119, "develop": [119, 146, 148], "read_databas": 119, "usual": [119, 377, 946], "urllib": 119, "quote_plu": 119, "word": [119, 642, 643], "3f": [119, 646, 648, 1200, 1202], "20word": 119, "explicitli": [119, 144, 146, 152, 742, 771], "test_tabl": 119, "compani": 119, "testdb": 119, "public": [119, 299, 760, 772, 870, 1246], "myrol": 119, "delta_table_opt": [120, 131], "root": [120, 131, 351, 470, 520, 533, 542, 543, 544, 545, 546, 547, 561, 603, 660, 759, 760, 919, 1156, 1246], "absolut": [120, 131, 132, 139, 140, 141, 142, 306, 428, 429, 430, 760, 875, 1002, 1003, 1004, 1246], "avoid": [120, 236, 299, 309, 760], "year": [120, 131, 186, 206, 234, 269, 299, 389, 390, 402, 403, 406, 420, 421, 575, 578, 579, 580, 581, 582, 584, 585, 586, 703, 704, 705, 706, 707, 708, 747, 748, 760, 798, 807, 825, 870, 958, 959, 975, 976, 979, 993, 994], "2021": [120, 131, 158, 164, 184, 186, 269, 299, 646, 722, 778, 798, 870, 873, 950, 951, 959, 983, 1043, 1200, 1246], "aw": [120, 128, 131, 135], "googl": [120, 131, 132], "service_account": [120, 131], "service_account_json_absolute_path": [120, 131], "az": [120, 131, 132], "adl": [120, 131, 132], "abf": [120, 131, 132], "azure_storage_account_nam": [120, 131, 132], "azure_storage_account_kei": [120, 131, 132], "without_fil": [120, 131, 132], "track": [120, 131, 132, 209, 299, 512, 1254], "sheet_id": [121, 127], "sheet_nam": [121, 127], "xlsx2csv": [121, 138], "openpyxl": [121, 138], "pyxlsb": [121, 138], "xlsx2csv_option": 121, "read_csv_opt": 121, "spreadsheet": [121, 127, 224, 299, 772], "xlsb": 121, "sheetnam": [121, 127], "nor": [121, 127, 238, 299], "fastest": 121, "read_csv": [121, 130], "refin": 121, "significantli": [121, 209, 285, 299, 1094, 1246, 1255], "potenti": [121, 130, 133, 134, 203, 235, 237, 299, 542], "unabl": 121, "julian": 121, "skip_empty_lin": 121, "influenc": [121, 791, 812, 870], "pipelin": 121, "correct": [121, 127, 429, 430, 471, 579, 580, 581, 582, 583, 584, 586, 599, 760, 811, 812, 870, 1003, 1004, 1047, 1131, 1153, 1246], "known": [121, 146, 512, 578, 579, 580, 581, 582, 584, 585, 586, 760, 853, 858, 1087], "better": [121, 209, 259, 285, 299, 523, 621, 760, 858, 1138, 1141, 1175, 1246], "detect": 121, "memory_map": [122, 128, 133], "greatli": [122, 133], "repeat": [122, 133, 567, 569, 733, 751, 760], "That": [122, 811, 812, 870], "filenam": 122, "my_fil": 122, "write_ipc": [122, 299], "read_ndjson": 125, "becaus": [126, 170, 186, 189, 207, 209, 267, 285, 299, 486, 798, 801, 858, 870, 880, 1001, 1061, 1094, 1246], "openoffic": 127, "od": 127, "parallelstrategi": [128, 135], "use_statist": [128, 135], "hive_partit": [128, 135], "retri": [128, 135], "row_group": [128, 135], "hive": [128, 135], "prune": [128, 135, 812, 870], "gcp": [128, 132, 135], "stabl": [128, 157, 162, 164, 191, 238, 263, 299, 449, 516, 760, 776, 816, 835, 840, 870, 1018, 1246], "read_tabl": 128, "scan_parquet": [128, 136], "scan_pyarrow_dataset": [128, 135], "contribut": [128, 580, 582, 584, 586, 760], "with_column_nam": 130, "push": [130, 133, 134, 135, 136], "down": [130, 133, 134, 135, 136, 440, 760, 1013, 1246], "therebi": [130, 133, 134], "realloc": [130, 133, 134, 172, 299, 1007, 1246], "headerless": 130, "my_long_fil": 130, "thing": [130, 137], "less": [130, 206, 299, 473, 518, 638, 760, 807, 870, 1192, 1255], "breezah": 130, "languag": [130, 186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "hard": [130, 811, 812, 870], "mydf": 130, "lambda": [130, 155, 178, 209, 223, 224, 285, 299, 314, 428, 429, 430, 512, 519, 520, 521, 523, 543, 695, 696, 713, 724, 725, 735, 760, 811, 812, 820, 858, 870, 880, 1002, 1003, 1004, 1087, 1094, 1246], "lower": [130, 186, 189, 227, 291, 299, 353, 355, 455, 517, 520, 543, 564, 568, 582, 683, 704, 705, 707, 708, 734, 747, 748, 760, 798, 801, 822, 864, 870, 923, 925, 1024, 1092, 1114, 1117, 1130, 1233, 1246], "simpli": [130, 555, 695, 713, 760], "idx": [130, 186, 204, 276, 299, 332, 512, 798, 850, 870, 1087], "uint16": [130, 363, 364, 661, 760, 873, 932, 933, 1216, 1246], "u16": [130, 146, 1255], "eu": [131, 132], "central": [131, 132, 471, 599, 760, 1047, 1153, 1246], "iceberg": [132, 772], "pyiceberg": [132, 138], "metadata": [132, 186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "secret": [132, 135], "adlf": 132, "my": [132, 136, 653, 1207], "oauth": 132, "token": 132, "ya29": 132, "dr": 132, "afm": 132, "py": 132, "impl": 132, "fsspecfileio": 132, "give": [133, 134, 215, 265, 299, 386, 471, 569, 669, 760, 772, 816, 841, 870, 955, 1047, 1246], "read_parquet": 135, "east": 135, "allow_pyarrow_filt": 136, "comparison": 136, "dset": 136, "folder": 136, "04": [136, 158, 186, 269, 299, 379, 380, 398, 399, 405, 406, 409, 412, 413, 414, 417, 419, 423, 646, 707, 709, 778, 798, 870, 873, 949, 963, 968, 971, 972, 973, 978, 982, 985, 986, 987, 990, 992, 996, 1200], "seed": [137, 191, 238, 299, 449, 500, 566, 589, 595, 760, 1018, 1075, 1115, 1137, 1149, 1246], "shuffl": [137, 238, 285, 299, 500, 589, 760, 858, 1075, 1137, 1246], "stdout": [138, 152, 184, 299, 534], "platform": 138, "maco": 138, "14": [138, 146, 176, 195, 209, 210, 212, 217, 231, 250, 253, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 365, 366, 367, 368, 369, 377, 381, 382, 387, 391, 393, 395, 400, 407, 410, 454, 510, 566, 628, 663, 664, 701, 702, 747, 760, 855, 857, 859, 860, 861, 862, 863, 864, 865, 873, 934, 935, 936, 937, 946, 979, 1025, 1045, 1085, 1142, 1182, 1218, 1219, 1236, 1246], "arm64": 138, "arm": 138, "64bit": [138, 568, 760, 1117, 1246], "main": [138, 782, 870], "oct": 138, "13": [138, 146, 159, 160, 173, 174, 183, 196, 207, 219, 234, 273, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 309, 381, 382, 384, 387, 388, 391, 392, 393, 394, 395, 396, 400, 401, 407, 408, 410, 531, 533, 575, 649, 689, 695, 698, 713, 744, 749, 760, 779, 780, 792, 793, 809, 825, 846, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 953, 957, 964, 966, 969, 974, 979, 981, 993, 994, 1031, 1034, 1041, 1043, 1094, 1203, 1246], "54": [138, 432, 760, 1255], "clang": 138, "1500": [138, 147], "adbc_driver_manag": 138, "cloudpickl": 138, "hvplot": [138, 225, 299, 302, 1250], "matplotlib": [138, 821, 833, 870], "26": [138, 385, 421, 954], "pydant": 138, "check_row_ord": [139, 140], "check_column_ord": [139, 140], "check_dtyp": [139, 140, 141, 142], "check_exact": [139, 140, 141, 142], "rtol": [139, 140, 141, 142], "atol": [139, 140, 141, 142], "categorical_as_str": [139, 140, 141, 142], "assert": [139, 140, 141, 142, 144, 146, 148, 234, 299, 772, 873], "assertionerror": [139, 140, 141, 142], "compar": [139, 140, 141, 142, 169, 179, 299, 426, 427, 446, 448, 473, 518, 550, 551, 760, 917, 1000, 1140, 1246], "unsort": [139, 140], "exactli": [139, 140, 141, 142, 145, 146, 148, 637, 638, 644, 645, 709, 1148, 1191, 1192, 1198, 1199, 1246], "toler": [139, 140, 141, 142, 206, 299, 807, 870], "inexact": [139, 140, 141, 142], "share": [139, 140, 141, 142, 170, 299, 760, 1001, 1246], "assert_series_equ": [139, 142, 1000, 1246, 1255], "assert_frame_not_equ": [139, 142], "pytest": [139, 141], "worthwhil": [139, 141], "shorten": [139, 141], "traceback": [139, 140, 141, 142], "tb": [139, 141, 170, 299, 1001, 1246], "short": [139, 141], "tend": [139, 141], "unhelpfulli": [139, 141], "assert_frame_equ": [140, 141, 169, 299, 1255], "assert_series_not_equ": [140, 141], "check_nam": [141, 142], "searchstrategi": [143, 145, 146, 148], "null_prob": [143, 146, 148], "percentag": [143, 146, 148, 556, 760, 1108, 1246], "chanc": [143, 146, 148, 1255], "independ": [143, 144, 146, 148], "flag": [143, 299, 591, 606, 614, 615, 629, 760, 789, 811, 812, 870, 1143, 1160, 1168, 1169, 1183, 1246], "hypothesi": [143, 144, 145, 146, 147, 148, 1255], "sampled_from": [143, 1255], "unique_small_int": 143, "ccy": [143, 1255], "gbp": [143, 1255], "eur": [143, 164, 184, 299, 1255], "jpy": [143, 1255], "min_col": [144, 146], "max_col": [144, 146], "standalon": [144, 146, 873], "mincol": 144, "assign": [144, 186, 299, 512, 555, 566, 637, 638, 760, 798, 870, 1087, 1115, 1191, 1192, 1246], "minimum": [144, 145, 146, 148, 178, 217, 218, 299, 428, 429, 430, 537, 549, 558, 566, 730, 731, 760, 818, 870, 967, 1002, 1003, 1004, 1104, 1110, 1115, 1246, 1255], "especi": [144, 574, 760, 791, 870, 1123, 1246], "test_unique_xyz": 144, "assert_someth": 144, "punctuat": 144, "test_special_char_colname_init": 144, "inner_dtyp": [145, 148], "select_from": [145, 148], "min_siz": [145, 146, 148, 1255], "max_siz": [145, 146, 148, 1255], "anoth": [145, 169, 179, 185, 299, 370, 378, 489, 510, 527, 530, 570, 760, 797, 848, 870, 938, 947, 1000, 1007, 1064, 1119, 1140, 1246], "randomli": 145, "innermost": 145, "2x": 145, "lst": 145, "11330": 145, "24030": 145, "116": 145, "zz": [145, 148], "uint8_pair": [145, 1255], "uint": [145, 1255], "zip": [145, 1255], "131": 145, "176": 145, "149": [145, 1255], "include_col": 146, "allow_infin": [146, 148], "allowed_dtyp": [146, 148, 1255], "excluded_dtyp": [146, 148], "describ": [146, 184, 299, 1246], "desir": [146, 512, 1087], "n_chunk": [146, 148, 299, 879, 1007, 1246], "randomis": 146, "onto": 146, "pct": 146, "preced": [146, 873], "disallow": [146, 148], "inf": [146, 148, 321, 371, 451, 457, 461, 563, 669, 760, 886, 929, 939, 1020, 1028, 1033, 1092, 1108, 1113, 1233, 1246], "exclud": [146, 148, 186, 299, 361, 364, 455, 760, 798, 870, 1024, 1043, 1246], "usag": [146, 148, 246, 299, 873, 1148, 1246], "deploi": [146, 148], "characterist": [146, 148], "concret": [146, 148], "test_repr": 146, "isinst": [146, 148, 299], "0x11f561580": 146, "0565": 146, "34715": 146, "5844": 146, "33": [146, 216, 299, 587, 760, 817, 870, 1130, 1246], "076854": 146, "3382": 146, "17": [146, 278, 577, 587, 715, 747, 760, 851, 927, 929, 979, 1125, 1246, 1255], "48662": 146, "7540": 146, "836271": 146, "4063": 146, "06": [146, 158, 269, 299, 379, 397, 404, 405, 406, 407, 420, 421, 778, 870, 873, 978, 979, 993], "39092": 146, "1889": 146, "41": [146, 585, 760, 1255], "874455": 146, "15836": 146, "1755e": 146, "575050513": 146, "profil": [147, 149, 781, 870], "balanc": [147, 149, 1255], "set_environ": 147, "polars_hypothesis_profil": [147, 149], "constructor": 148, "max_data_s": 148, "normal": [148, 186, 299, 425, 471, 599, 760, 798, 870, 999, 1047, 1153, 1246], "test_repr_is_valid_str": 148, "experi": 148, "create_list_strategi": [148, 1255], "polars_max_thread": 150, "behind": 150, "lock": 150, "reason": [150, 512, 521, 760], "temporarili": [150, 152, 186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "pyspark": 150, "udf": [150, 155, 209, 223, 280, 285, 299, 314, 523, 559, 681, 725, 760, 820, 853, 858, 870, 880, 1094, 1246], "recommend": [150, 203, 223, 299, 873], "easi": [152, 1255], "restor": 152, "restore_default": 152, "relat": [152, 873], "set_tbl_row": 152, "whatev": 152, "were": [152, 210, 212, 217, 250, 299, 570, 756, 760, 1119, 1246], "enter": 152, "advantag": [152, 223, 299], "set_": 152, "set_verbos": 152, "do_various_th": 152, "cleaner": 152, "breviti": 152, "vein": 152, "durat": [152, 206, 269, 299, 377, 384, 385, 388, 392, 394, 396, 401, 408, 413, 414, 415, 416, 417, 418, 419, 423, 667, 704, 705, 707, 708, 747, 748, 760, 807, 870, 873, 946, 953, 954, 957, 964, 966, 969, 974, 981, 986, 987, 988, 989, 990, 991, 992, 996, 1229, 1246], "set_ascii_t": 152, "write_ascii_frame_to_stdout": 152, "sy": 152, "nan_as_nul": 154, "polarsdatafram": 154, "notimplementederror": 154, "num_row": 154, "get_column": [154, 261, 299], "dtypekind": 154, "inference_s": [155, 209, 299], "256": [155, 209, 299, 1108, 1246], "map_row": [155, 299], "tri": [155, 209, 299], "approxim": [156, 299, 315, 682, 760, 775, 870, 1255], "hyperloglog": [156, 299, 315, 682, 760, 775, 870], "algorithm": [156, 299, 315, 607, 631, 682, 760, 775, 870, 1161, 1185], "cardin": [156, 299, 315, 682, 760, 775, 870], "k": [157, 237, 263, 299, 347, 471, 668, 760, 776, 840, 870, 911, 1047, 1230, 1246], "intoexpr": [157, 185, 186, 187, 188, 189, 190, 234, 240, 241, 244, 248, 263, 273, 274, 278, 299, 313, 342, 345, 346, 451, 455, 482, 483, 492, 501, 502, 503, 504, 555, 570, 590, 592, 593, 602, 607, 631, 636, 637, 638, 644, 645, 678, 680, 686, 688, 689, 690, 691, 693, 695, 698, 699, 702, 706, 713, 727, 731, 736, 739, 742, 744, 760, 776, 797, 798, 799, 800, 801, 802, 825, 827, 828, 831, 835, 840, 846, 847, 851, 870, 906, 909, 910, 1024, 1067, 1119, 1145, 1190, 1191, 1192, 1198, 1199, 1246], "nulls_last": [157, 248, 263, 299, 324, 601, 760, 776, 835, 840, 870, 889, 1246], "smallest": [157, 263, 299, 347, 760, 776, 840, 870, 911, 1246], "largest": [157, 263, 299, 668, 760, 776, 840, 870, 1230, 1246], "bottom": [157, 299, 776, 870], "wors": [157, 263, 299, 776, 835, 840, 870], "search": [157, 206, 263, 299, 512, 607, 631, 776, 807, 835, 840, 870, 1161, 1185], "top_k": [157, 299, 347, 760, 776, 870, 911, 1246], "columnnameorselector": [158, 165, 167, 215, 222, 224, 237, 257, 265, 266, 267, 299, 778, 786, 787, 816, 841, 842, 870], "strict": [158, 299, 343, 348, 606, 610, 628, 646, 647, 648, 650, 652, 760, 778, 870, 907, 912, 1000, 1140, 1160, 1164, 1182, 1200, 1201, 1202, 1204, 1206, 1246], "due": [158, 186, 206, 234, 237, 269, 299, 309, 348, 385, 402, 406, 420, 470, 542, 544, 545, 546, 547, 561, 575, 578, 579, 580, 581, 582, 584, 585, 586, 660, 704, 705, 707, 708, 747, 748, 760, 778, 798, 807, 825, 870, 912, 954, 975, 979, 993, 1246], "overflow": [158, 299, 348, 363, 364, 628, 650, 661, 760, 778, 870, 912, 932, 933, 1182, 1204, 1216, 1246], "2020": [158, 164, 184, 225, 234, 299, 302, 380, 385, 405, 409, 412, 413, 414, 415, 416, 417, 418, 419, 575, 646, 647, 648, 760, 778, 825, 870, 873, 949, 954, 978, 982, 985, 986, 987, 988, 989, 990, 991, 992, 1200, 1201, 1202], "u8": [158, 257, 258, 267, 299, 570, 676, 760, 778, 870, 873, 1119, 1223, 1246, 1255], "to_dict": [158, 299, 778, 870], "as_seri": [158, 255, 299, 778, 870, 939, 1113, 1246], "tempor": [158, 186, 187, 189, 190, 203, 234, 236, 237, 256, 299, 353, 455, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 760, 772, 778, 798, 799, 801, 802, 825, 870, 873, 923, 1024, 1043, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "greater": [159, 206, 299, 446, 448, 599, 626, 627, 638, 655, 760, 807, 870, 1153, 1180, 1181, 1192, 1209, 1246], "cheap": [159, 160, 241, 274, 299, 779, 780, 828, 847, 870, 922, 926, 1246], "deepcopi": [159, 299, 779, 870, 922, 1246], "appl": [161, 194, 205, 229, 232, 255, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 572, 612, 639, 760, 806, 823, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 870, 1166, 1193], "banana": [161, 255, 282, 284, 286, 287, 288, 289, 290, 291, 292, 299, 572, 612, 639, 760, 855, 857, 859, 860, 861, 862, 863, 864, 865], "orang": [161, 281, 282, 284, 286, 287, 289, 291, 292, 299, 854, 855, 857, 859, 860, 862, 864, 865], "pairwis": [162, 299], "pearson": [162, 299, 471, 599, 691, 760, 1047, 1153, 1246], "correl": [162, 299, 691, 737], "coeffici": [162, 299, 599, 760, 1153, 1246], "corrcoef": [162, 299], "percentil": [164, 299, 940, 1246], "summari": [164, 299, 940, 1246], "deem": [164, 299], "glimps": [164, 192, 299], "median": [164, 224, 299, 436, 580, 760, 848, 870, 940, 1128, 1246], "str2": [164, 299], "usd": [164, 184, 299, 1255], "null_count": [164, 167, 299, 370, 760, 870, 938, 940, 1017, 1246], "266667": [164, 299], "std": [164, 299, 584, 760, 870, 940, 1132, 1246], "101514": [164, 299], "707107": [164, 299, 429, 584, 760, 1003, 1246], "more_column": [165, 171, 242, 266, 299, 431, 711, 760, 786, 790, 830, 842, 870], "subset": [167, 220, 265, 299, 787, 841, 870], "preserv": [167, 175, 185, 188, 205, 209, 259, 260, 299, 375, 376, 437, 485, 596, 760, 787, 794, 806, 870, 943, 944, 1011, 1060, 1150, 1228, 1246], "behavior": [167, 299, 489, 510, 522, 712, 721, 760, 787, 870, 939, 1064, 1085, 1093, 1113, 1246], "all_horizont": [167, 299, 677, 787, 870], "is_nul": [167, 299, 760, 787, 870, 1246], "null_equ": [169, 179, 299, 1000, 1140, 1246], "sizeunit": [170, 299, 1001, 1246], "heap": [170, 299, 760, 1001, 1246], "its": [170, 299, 379, 406, 420, 602, 750, 760, 917, 948, 979, 993, 1001, 1246], "bitmap": [170, 299, 1001, 1246], "structarrai": [170, 299, 1001, 1246], "constant": [170, 234, 299, 377, 434, 760, 825, 870, 946, 1001, 1008, 1246], "unchang": [170, 299, 522, 570, 667, 760, 811, 812, 853, 858, 870, 1001, 1093, 1119, 1229, 1246], "capac": [170, 246, 299, 1001, 1148, 1246], "ffi": [170, 299, 1001, 1246], "kb": [170, 299, 1001, 1246], "mb": [170, 299, 1001, 1246], "gb": [170, 299, 1001, 1246], "revers": [170, 299, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 520, 543, 544, 545, 561, 660, 694, 760, 870, 930, 931, 932, 933, 934, 935, 936, 937, 1246], "1_000_000": [170, 299, 1001, 1246], "25888898": [170, 299], "689577102661133": [170, 299], "long": [171, 215, 267, 299, 790, 816, 870], "letter": [171, 283, 293, 299, 431, 607, 615, 631, 711, 760, 790, 856, 866, 870, 873, 1161, 1169, 1185], "onlin": [172, 299, 1007, 1246], "rerun": [172, 299, 1007, 1246], "conveni": [172, 299, 879, 1007, 1246], "Not": [173, 299, 464, 466, 760, 792, 870], "fillnullstrategi": [174, 299, 436, 760, 793, 870, 1010, 1246], "matches_supertyp": [174, 299, 793, 870], "forward": [174, 206, 244, 299, 398, 436, 442, 505, 592, 760, 793, 807, 831, 870, 971, 1010, 1080, 1145, 1246], "consecut": [174, 299, 341, 436, 442, 605, 760, 793, 870, 1010, 1159, 1246], "fill_nan": [174, 299, 760, 870, 1246], "intoexprcolumn": [175, 299, 332, 347, 353, 354, 355, 437, 500, 505, 556, 589, 592, 641, 642, 643, 668, 683, 704, 705, 707, 708, 719, 720, 747, 748, 750, 760, 794, 831, 870, 897, 911, 923, 924, 925, 1075, 1080, 1108, 1195, 1196, 1197, 1230, 1246], "constraint": [175, 299, 437, 470, 542, 544, 545, 546, 547, 561, 660, 750, 760, 794, 870], "behav": [175, 299, 437, 523, 642, 643, 760, 794, 870], "eq": [175, 299, 427, 437, 760, 794, 870, 1246], "implicitli": [175, 299, 437, 750, 760, 794, 870], "is_in": [175, 299, 760, 1246], "get_column_index": [176, 299], "reduct": [178, 299], "supercast": [178, 299], "parent": [178, 299], "rule": [178, 299, 607, 631, 1161, 1185], "arithmet": [178, 299], "zip_with": [178, 299, 1246], "foo11": [178, 299], "bar22": [178, 299], "nth": [180, 253, 299, 445, 638, 664, 760, 796, 839, 870, 1015, 1192, 1219, 1246], "th": [180, 253, 299, 445, 501, 599, 664, 760, 796, 839, 870, 1015, 1076, 1153, 1219, 1246], "retriev": [181, 299, 329, 330, 478, 479, 656, 894, 895, 1053, 1054, 1210], "max_items_per_column": [184, 299], "max_colname_length": [184, 299], "return_as_str": [184, 299, 534], "preview": [184, 299], "few": [184, 299], "exce": [184, 299], "ellipsi": [184, 299], "head": [184, 208, 252, 299, 313, 475, 760, 810, 870, 1049, 1217, 1246], "tail": [184, 192, 299, 313, 599, 760, 870, 1019, 1153, 1246], "more_bi": [185, 188, 222, 248, 299, 602, 760, 797, 800, 835, 870], "groupbi": [185, 224, 299, 314, 523, 681, 725, 760, 870], "consist": [185, 188, 222, 299, 646, 797, 800, 870, 879, 1007, 1200, 1246], "regardless": [185, 188, 299, 619, 750, 1173], "agg": [185, 186, 189, 224, 234, 299, 308, 437, 439, 444, 447, 523, 601, 602, 675, 725, 760, 781, 782, 789, 791, 797, 798, 799, 801, 802, 821, 825, 829, 833, 870, 873], "Or": [185, 186, 206, 234, 248, 269, 278, 299, 555, 575, 602, 704, 705, 707, 708, 747, 748, 750, 760, 797, 798, 807, 825, 835, 851, 870], "index_column": [186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "timedelta": [186, 187, 189, 190, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 807, 825, 870, 873, 960, 967, 975, 979, 993, 1103, 1104, 1246], "period": [186, 187, 189, 190, 234, 299, 406, 420, 428, 429, 430, 556, 575, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 825, 870, 979, 993, 1002, 1003, 1004, 1108, 1246], "include_boundari": [186, 189, 299, 798, 801, 870], "closedinterv": [186, 187, 189, 190, 234, 299, 455, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 825, 870, 1024, 1246], "label": [186, 299, 371, 563, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 760, 798, 821, 870, 939, 1113, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "start_bi": [186, 189, 299, 798, 801, 870], "startbi": [186, 189, 299, 798, 801, 870], "check_sort": [186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "dynamicgroupbi": [186, 189, 299], "member": [186, 299, 798, 870, 1032, 1246], "descript": [186, 299, 798, 870], "ascend": [186, 187, 189, 190, 234, 299, 575, 579, 580, 581, 582, 584, 586, 760, 798, 799, 801, 802, 825, 870], "dynam": [186, 189, 299, 512, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 760, 798, 801, 870, 1087, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "matter": [186, 187, 189, 190, 203, 234, 236, 237, 256, 299, 575, 642, 643, 760, 798, 799, 801, 802, 825, 870], "interv": [186, 187, 189, 190, 234, 269, 299, 371, 406, 420, 451, 455, 563, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 799, 801, 802, 825, 870, 939, 952, 955, 956, 963, 965, 968, 970, 973, 976, 977, 979, 984, 993, 994, 1020, 1024, 1113, 1246], "_lower_boundari": [186, 299, 798, 870], "_upper_boundari": [186, 299, 798, 870], "harder": [186, 189, 299, 798, 801, 870], "inclus": [186, 187, 189, 190, 234, 299, 455, 575, 578, 579, 580, 581, 582, 584, 585, 586, 636, 637, 683, 704, 705, 707, 708, 719, 720, 747, 748, 760, 798, 799, 801, 802, 825, 870, 1024, 1190, 1191, 1246], "datapoint": [186, 189, 299, 798, 801, 870], "boundari": [186, 299, 353, 354, 355, 451, 760, 798, 870, 923, 924, 925, 1020, 1246], "mondai": [186, 189, 299, 420, 422, 798, 801, 870, 993, 995], "tuesdai": [186, 189, 299, 798, 801, 870], "wednesdai": [186, 189, 299, 798, 801, 870], "thursdai": [186, 189, 299, 798, 801, 870], "fridai": [186, 189, 299, 798, 801, 870], "saturdai": [186, 189, 299, 798, 801, 870], "sundai": [186, 189, 299, 422, 798, 801, 870, 995], "earliest": [186, 189, 299, 405, 406, 420, 646, 648, 706, 798, 801, 870, 978, 979, 993, 1200, 1202], "weekli": [186, 189, 299, 420, 798, 801, 870, 993], "week": [186, 189, 206, 234, 269, 299, 402, 406, 420, 422, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 801, 807, 825, 870, 873, 975, 979, 993, 995], "sorted": [186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "verifi": [186, 187, 189, 190, 234, 299, 575, 760, 798, 799, 801, 802, 825, 870], "incorrectli": [186, 187, 189, 190, 234, 299, 512, 575, 760, 798, 799, 801, 802, 825, 870], "incorrect": [186, 187, 189, 190, 234, 299, 423, 521, 575, 591, 760, 798, 799, 801, 802, 825, 853, 858, 870, 996, 1143, 1246], "roll": [186, 187, 190, 299, 398, 399, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 689, 737, 738, 760, 798, 799, 802, 870, 971, 972, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1246], "re": [186, 202, 259, 299, 398, 399, 798, 870, 971, 972, 1254], "1d": [186, 206, 234, 269, 299, 378, 402, 406, 414, 417, 420, 423, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 722, 747, 748, 760, 798, 807, 825, 870, 873, 947, 955, 962, 975, 979, 984, 987, 990, 993], "set_index": [186, 299, 798, 870], "resampl": [186, 299, 798, 870], "reset_index": [186, 299, 798, 870], "though": [186, 299, 756, 798, 870], "unlik": [186, 299, 798, 870], "evenli": [186, 299, 798, 870], "upsampl": [186, 299, 798, 870], "1n": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "nanosecond": [186, 206, 234, 269, 299, 402, 406, 407, 418, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 975, 979, 980, 991, 993], "1u": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "microsecond": [186, 203, 206, 234, 236, 237, 256, 269, 299, 402, 406, 415, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 706, 707, 708, 709, 746, 747, 748, 760, 798, 807, 821, 825, 870, 873, 975, 979, 988, 993], "1m": [186, 206, 234, 269, 299, 402, 406, 419, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 988, 989, 991, 992, 993], "millisecond": [186, 206, 234, 269, 299, 387, 395, 402, 406, 416, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 873, 975, 979, 989, 993], "minut": [186, 206, 234, 269, 299, 387, 391, 393, 400, 402, 406, 407, 417, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 706, 707, 708, 709, 746, 747, 748, 760, 798, 807, 825, 870, 873, 975, 979, 990, 993], "1h": [186, 206, 234, 269, 299, 385, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 954, 956, 975, 979, 993], "hour": [186, 206, 234, 269, 299, 391, 393, 395, 400, 402, 406, 407, 414, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 706, 707, 708, 709, 746, 747, 748, 760, 798, 807, 825, 870, 873, 975, 979, 987, 993], "1w": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "1mo": [186, 206, 234, 269, 299, 380, 398, 399, 402, 405, 406, 413, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 949, 970, 971, 972, 975, 976, 977, 978, 979, 986, 993, 994], "month": [186, 206, 234, 269, 299, 383, 398, 399, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 703, 704, 705, 706, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 952, 971, 972, 975, 979, 993], "1q": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "quarter": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "1y": [186, 206, 234, 269, 299, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 975, 979, 993], "1i": [186, 206, 234, 269, 299, 402, 575, 578, 579, 580, 581, 582, 584, 585, 586, 760, 798, 807, 825, 870, 975], "3d12h4m25": [186, 206, 234, 269, 299, 406, 420, 575, 704, 705, 707, 708, 747, 748, 760, 798, 807, 825, 870, 979, 993], "correspond": [186, 206, 234, 259, 269, 299, 390, 402, 406, 420, 523, 566, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 747, 748, 760, 781, 798, 807, 825, 870, 959, 975, 979, 993, 1115, 1246], "daylight": [186, 206, 234, 269, 299, 377, 385, 402, 406, 420, 575, 578, 579, 580, 581, 582, 584, 585, 586, 704, 705, 707, 708, 709, 747, 748, 760, 798, 807, 825, 870, 954, 975, 979, 993], "10i": [186, 234, 299, 575, 760, 798, 825, 870], "datetime_rang": [186, 299, 378, 380, 398, 399, 402, 405, 406, 413, 414, 415, 416, 417, 418, 419, 420, 423, 578, 579, 581, 584, 585, 586, 704, 760, 798, 870, 946, 947, 949, 954, 955, 956, 962, 963, 965, 968, 971, 972, 973, 975, 978, 979, 984, 986, 987, 988, 989, 990, 991, 992, 993], "30m": [186, 299, 406, 420, 798, 870, 979, 993], "lower_bound": [186, 299, 353, 355, 455, 760, 798, 870, 923, 925, 1024, 1233, 1246], "upper_bound": [186, 299, 353, 354, 455, 512, 760, 798, 870, 923, 924, 1024, 1092, 1246], "bys": [186, 299, 798, 870], "int_rang": [186, 267, 276, 285, 299, 683, 692, 798, 812, 850, 858, 870], "2i": [186, 299, 798, 870], "3i": [186, 299, 798, 870], "a_agg_list": [186, 299, 798, 870], "rollinggroupbi": [187, 190, 234, 299], "group_bi": [188, 220, 224, 298, 299, 308, 437, 439, 444, 447, 521, 523, 601, 602, 675, 725, 760, 781, 782, 789, 791, 800, 821, 833, 869, 870, 873], "group_by_dynam": [189, 234, 299, 801, 825, 870], "_lower_bound": [189, 299, 801, 870], "_upper_bound": [189, 299, 801, 870], "seed_1": [191, 299, 449, 760, 1018, 1246], "seed_2": [191, 299, 449, 760, 1018, 1246], "seed_3": [191, 299, 449, 760, 1018, 1246], "hash": [191, 299, 760, 1246], "Its": [191, 299, 449, 760, 1018, 1246], "u64": [191, 276, 299, 449, 568, 760, 821, 850, 870, 1018, 1246], "10783150408545073287": [191, 299], "1438741209321515184": [191, 299], "10047419486152048166": [191, 299], "2047317070637311557": [191, 299], "ab": [192, 208, 252, 273, 299, 656, 658, 760, 846, 870, 1019, 1049, 1217, 1246], "grown": [194, 299], "insert_column": [195, 299], "intermedi": [197, 299, 805, 870, 1255], "linear": [197, 227, 291, 299, 454, 480, 526, 564, 582, 689, 690, 734, 760, 805, 822, 864, 870, 1023, 1055, 1114, 1130, 1246], "666667": [197, 270, 287, 299, 428, 760, 805, 844, 860, 870, 1002, 1246], "333333": [197, 299, 470, 542, 760, 805, 870, 1108, 1134, 1246], "mask": [198, 200, 299, 343, 456, 458, 459, 462, 463, 469, 557, 558, 606, 610, 760, 907, 1011, 1017, 1024, 1026, 1029, 1030, 1035, 1036, 1044, 1109, 1110, 1141, 1160, 1164, 1237, 1246], "visual": [198, 200, 299], "scalar": [201, 209, 235, 299, 590, 681, 722, 725, 760, 1046, 1139, 1246], "With": [201, 244, 299, 505, 578, 579, 580, 581, 582, 584, 585, 586, 592, 760, 831, 870, 1046, 1080, 1145, 1246], "buffer_s": [203, 299], "fit": [203, 246, 267, 299, 594, 736, 760, 1147, 1148, 1246], "signific": [203, 209, 299, 314, 523, 588, 760, 1094, 1136, 1246], "4x": [203, 299], "materialis": [203, 204, 235, 236, 237, 299], "rows_by_kei": [203, 236, 299], "iter_row": [204, 235, 236, 237, 299], "17_500": [204, 299], "klmnoopqrstuvwxyz": [204, 299], "__name__": [204, 299], "7500": [204, 299], "15_000": [204, 299], "record_batch": [204, 299], "to_arrow": [204, 299, 1246], "to_batch": [204, 299], "date32": [204, 299], "large_str": [204, 254, 260, 299], "15000": [204, 299], "2500": [204, 299], "left_on": [205, 206, 268, 299, 806, 807, 843, 870], "right_on": [205, 206, 268, 299, 806, 807, 843, 870], "suffix": [205, 206, 240, 273, 278, 299, 309, 345, 464, 466, 467, 468, 520, 543, 544, 546, 547, 555, 561, 572, 612, 642, 645, 760, 806, 807, 827, 846, 848, 851, 870, 873, 909, 1166, 1199], "_right": [205, 206, 299, 806, 807, 870], "joinvalid": [205, 299, 806, 870], "join_nul": [205, 299, 806, 870], "semi": [205, 299, 806, 870], "anti": [205, 299, 806, 858, 870, 1138, 1141, 1246], "cross": [205, 299, 806, 870], "outer_coalesc": [205, 299, 806, 870], "coalesc": [205, 268, 299, 646, 806, 843, 870, 1200], "cartisian": [205, 299, 806, 870], "many_to_mani": [205, 299, 806, 870], "one_to_on": [205, 299, 806, 870], "one_to_mani": [205, 299, 806, 870], "many_to_on": [205, 299, 806, 870], "join_asof": [205, 299, 806, 870], "other_df": [205, 299], "ham_right": [205, 299, 806, 870], "by_left": [206, 299, 807, 870], "by_right": [206, 299, 807, 870], "asofjoinstrategi": [206, 299, 807, 870], "allow_parallel": [206, 299, 806, 807, 870], "force_parallel": [206, 299, 806, 807, 870], "asof": [206, 299, 807, 870], "rather": [206, 299, 534, 563, 574, 655, 760, 807, 870, 1113, 1123, 1209, 1246], "asof_join": [206, 299], "distanc": [206, 299, 451, 760, 807, 870, 1020, 1246], "plan": [206, 207, 299, 777, 781, 785, 789, 806, 807, 829, 833, 870], "forc": [206, 209, 285, 299, 512, 806, 807, 858, 870, 1094, 1246], "gdp": [206, 299, 807, 870], "2016": [206, 299, 807, 870], "2017": [206, 299, 807, 870], "2018": [206, 299, 405, 807, 870, 978], "2019": [206, 299, 807, 870], "jan": [206, 299, 807, 870], "1st": [206, 299, 807, 870], "4164": [206, 299, 807, 870], "4411": [206, 299, 807, 870], "4566": [206, 299, 807, 870], "4696": [206, 299, 807, 870], "set_sort": [206, 234, 269, 299, 575, 760, 807, 825, 870, 1246], "popul": [206, 299, 807, 870], "12th": [206, 299, 807, 870], "82": [206, 299, 807, 870], "66": [206, 268, 299, 585, 676, 760, 807, 843, 870, 1130, 1246], "83": [206, 299, 807, 870], "52": [206, 273, 299, 421, 587, 760, 807, 846, 870], "request": [207, 299], "describe_plan": [207, 299], "unoptim": [207, 299], "describe_optimized_plan": [207, 299], "show_graph": [207, 299, 870], "un": [207, 299], "graphviz": [207, 299, 833, 870], "much": [209, 267, 285, 299, 370, 489, 510, 523, 620, 621, 725, 760, 858, 938, 1064, 1085, 1094, 1174, 1175, 1246], "intens": [209, 285, 299, 555, 760, 1094, 1246], "materi": [209, 285, 299, 781, 821, 858, 870, 873, 1094, 1246], "parallelis": [209, 285, 299, 1094, 1246], "achiev": [209, 285, 299, 523, 621, 760, 939, 1094, 1113, 1175, 1246], "best": [209, 285, 299, 523, 760, 1094, 1246], "black": [209, 299, 342, 344, 345, 346], "arbitrarili": [209, 299], "rearrang": [209, 299], "transform": [209, 299, 521, 651, 653, 654, 760], "lru_cach": [209, 299, 523, 760, 1094, 1246], "column_1": [209, 264, 299], "axi": [210, 212, 215, 217, 250, 299, 684, 685, 816, 870], "max_horizont": [210, 299, 726], "null_strategi": [212, 250, 299], "nullstrategi": [212, 250, 299], "mean_horizont": [212, 299], "propag": [212, 250, 299, 427, 548, 549, 551, 605, 760, 1103, 1104, 1159, 1246], "spam": [212, 299, 615, 1169], "ignore_nul": [213, 251, 299, 310, 312, 428, 429, 430, 605, 677, 679, 760, 877, 878, 1002, 1003, 1004, 1159, 1236, 1246], "id_var": [215, 299, 816, 870], "value_var": [215, 299, 816, 870], "variable_nam": [215, 299, 816, 870], "value_nam": [215, 299, 816, 870], "unpivot": [215, 299, 816, 870], "massag": [215, 299, 816, 870], "measur": [215, 299, 816, 870], "steve": [216, 299, 817, 870], "elis": [216, 299, 817, 870], "ag": [216, 299, 817, 870], "anna": [216, 299, 817, 870], "megan": [216, 299, 817, 870], "thoma": [216, 299, 817, 870], "21": [216, 250, 299, 578, 579, 581, 584, 585, 586, 715, 760, 817, 870, 873], "min_horizont": [217, 299, 730, 739], "what": [220, 225, 299, 302, 521, 607, 631, 760, 1161, 1185, 1236, 1246, 1250], "pack": [220, 299], "expr_unique_subset": [220, 299], "df_nuniqu": [220, 299], "df_agg_nuniqu": [220, 299], "include_kei": [222, 237, 299], "offer": [223, 299, 559, 760, 820, 870], "fulli": [223, 238, 299], "cast_str_to_int": [223, 299, 820, 870], "col_nam": [223, 299, 820, 870], "tdf": [223, 299, 820, 870], "aggregate_funct": [224, 299], "pivotagg": [224, 299], "sort_column": [224, 299], "section": [224, 299, 606, 614, 615, 629, 704, 705, 707, 708, 747, 748, 1160, 1168, 1169, 1183], "predefin": [224, 299], "predict": [224, 228, 269, 299], "transpos": [224, 299], "discoveri": [224, 299], "col1": [224, 264, 299, 870, 1255], "col2": [224, 264, 299, 870, 1255], "col3": [224, 299, 1255], "tanh": [224, 299, 760, 1246], "998347": [224, 299], "964028": [224, 299], "999954": [224, 299], "unique_column_valu": [224, 299], "defer": [225, 299, 302, 1250], "galleri": [225, 299, 302, 1250], "scatter": [225, 299, 302, 1142, 1246], "speci": [225, 299, 302], "setosa": [225, 299, 302], "versicolor": [225, 299, 302], "stock_1": [225, 299, 302], "stock_2": [225, 299, 302], "interpol": [227, 291, 299, 436, 526, 564, 582, 734, 760, 822, 864, 870, 1114, 1130, 1246], "rollinginterpolationmethod": [227, 291, 299, 564, 582, 734, 760, 822, 864, 870, 1114, 1130, 1246], "midpoint": [227, 291, 299, 564, 582, 734, 760, 822, 864, 870, 1114, 1130, 1246], "replace_column": [231, 299], "t_0": [234, 299, 575, 578, 579, 580, 581, 582, 584, 585, 586, 760, 825, 870], "t_1": [234, 299, 575, 578, 579, 580, 581, 582, 584, 585, 586, 760, 825, 870], "t_n": [234, 299, 575, 578, 579, 580, 581, 582, 584, 585, 586, 760, 825, 870], "43": [234, 299, 364, 575, 585, 760, 825, 870], "strptime": [234, 299, 405, 575, 760, 825, 870, 978], "2d": [234, 259, 299, 402, 575, 722, 760, 825, 870, 946, 952], "sum_a": [234, 299, 575, 760, 825, 870], "min_a": [234, 299, 575, 760, 825, 870], "max_a": [234, 299, 575, 760, 825, 870], "by_pred": [235, 299], "accord": [235, 299, 522, 563, 704, 705, 707, 708, 747, 748, 760, 959, 1113, 1246], "mutual": [235, 299], "exclus": [235, 299, 676, 683, 719, 720, 760], "clariti": [235, 299], "toomanyrowsreturnederror": [235, 299, 772], "norowsreturnederror": [235, 299, 772], "inherit": [235, 299], "rowserror": [235, 299, 772], "high": [237, 299, 563, 760, 1113, 1246], "cost": [237, 299], "reoconstruct": [237, 299], "defaultdict": [237, 299], "assum": [237, 299, 811, 812, 853, 858, 870], "with_replac": [238, 299, 500, 589, 760, 1075, 1137, 1246], "ordereddict": [239, 299, 742, 826, 870], "named_expr": [240, 241, 273, 274, 299, 739, 742, 827, 828, 846, 847, 870], "threshold": [240, 299, 827, 870], "set_auto_structifi": [240, 273, 299, 827, 846, 870], "auto_structifi": [240, 273, 299, 827, 846, 870], "is_odd": [240, 299, 827, 870], "_is_odd": [240, 299, 827, 870], "sequenti": [241, 274, 299, 828, 847, 870], "fill_valu": [244, 245, 267, 299, 592, 593, 760, 831, 832, 870, 1145, 1146, 1246], "opposit": [244, 299, 505, 592, 760, 831, 870, 1080, 1145, 1246], "lag": [244, 299, 505, 592, 689, 760, 831, 870, 1080, 1145, 1246], "shift": [245, 299, 373, 484, 556, 593, 689, 760, 832, 870, 941, 1059, 1108, 1146, 1246], "shrink": [246, 299, 594, 760, 1147, 1148, 1246], "hold": [246, 299], "ddof": [249, 270, 299, 584, 586, 604, 674, 691, 693, 737, 738, 741, 749, 760, 836, 844, 870, 1132, 1134, 1157, 1235, 1246], "deviat": [249, 299, 429, 584, 604, 741, 760, 836, 870, 1003, 1157, 1246], "degre": [249, 270, 299, 565, 584, 586, 604, 674, 685, 691, 693, 737, 738, 741, 749, 760, 836, 844, 870, 1132, 1134, 1157, 1235, 1246], "freedom": [249, 270, 299, 584, 586, 604, 674, 691, 693, 737, 738, 741, 749, 760, 836, 844, 870, 1132, 1134, 1157, 1235, 1246], "divisor": [249, 270, 299, 584, 586, 604, 674, 691, 693, 737, 738, 741, 749, 760, 836, 844, 870, 1132, 1134, 1157, 1235, 1246], "816497": [249, 299], "gather_everi": [253, 299, 664, 760, 839, 870, 1219, 1246], "mostli": [254, 299, 437, 760], "categoricaltyp": [254, 299], "fruit": [255, 299, 572, 612, 639, 760, 1166, 1193], "car": [255, 299, 572, 760], "beetl": [255, 299, 572, 760], "audi": [255, 299, 572, 760], "28": [255, 299, 307, 405, 423, 760, 978, 996, 1255], "300": [255, 299, 1126, 1127, 1129, 1246], "drop_first": [257, 299], "dummi": [257, 299, 1223, 1246], "foo_1": [257, 299], "foo_2": [257, 299], "bar_3": [257, 299], "bar_4": [257, 299], "ham_a": [257, 299], "ham_b": [257, 299], "instantiat": [258, 299, 1225, 1246], "from_repr": [258, 299, 1225, 1246], "df_from_str_repr": [258, 299], "eval": [258, 299, 710, 1225, 1246], "indexord": [259, 299], "fortran": [259, 299], "downstream": [259, 299, 591, 760, 1143, 1246], "applic": [259, 299, 523, 578, 579, 580, 581, 582, 584, 585, 586, 760], "prevent": [259, 299, 309, 363, 364, 470, 542, 661, 760, 870, 932, 933, 1216, 1246], "reshap": [259, 299, 487, 760, 1062, 1246], "ll": [259, 299], "u1": [259, 299], "f4": [259, 299], "view": [259, 299, 523, 760, 1227, 1246], "recarrai": [259, 299], "rec": [259, 299], "use_pyarrow_extension_arrai": [260, 299, 1228, 1246], "extens": [260, 299, 1228, 1246], "sent": [260, 299, 1227, 1228, 1246], "pandas_df1": [260, 299], "pandas_df2": [260, 299], "pandas_df2_pa": [260, 299], "na": [260, 299, 639, 1228, 1246], "four": [262, 299], "five": [262, 299, 1255], "bottom_k": [263, 299, 668, 760, 840, 870, 1230, 1246], "header_nam": [264, 299], "column_nam": [264, 299], "perhap": [264, 299], "column_2": [264, 299], "name_gener": [264, 299], "base_nam": [264, 299], "my_column_": [264, 299], "my_column_0": [264, 299], "my_column_1": [264, 299], "my_column_2": [264, 299], "new_id": [264, 299], "uniquekeepstrategi": [265, 299, 841, 870], "kept": [265, 299, 841, 870], "decompos": [266, 299, 842, 870], "t_a": [266, 299, 842, 870], "t_b": [266, 299, 842, 870], "t_c": [266, 299, 842, 870], "t_d": [266, 299, 842, 870], "womp": [266, 299, 842, 870], "t_": [266, 299, 842, 870], "t_struct": [266, 299, 842, 870], "step": [267, 299, 683, 719, 720], "unstackdirect": [267, 299], "pivot": [267, 299], "phase": [267, 299], "subject": [267, 299], "ascii_uppercas": [267, 299], "h": [267, 299, 307, 409, 412, 594, 646, 648, 652, 760, 1200, 1202, 1206], "x_0": [267, 299, 428, 429, 430, 760, 1002, 1003, 1004, 1246], "x_1": [267, 299], "y_0": [267, 299, 428, 429, 430, 760, 1002, 1003, 1004, 1246], "y_1": [267, 299], "z_0": [267, 299], "z_1": [267, 299], "include_nul": [268, 299, 843, 870], "implicit": [268, 299, 843, 870], "syntact": [268, 299, 570, 677, 679, 692, 694, 697, 712, 716, 717, 718, 721, 726, 728, 729, 730, 732, 733, 734, 739, 741, 743, 745, 749, 751, 760, 843, 870, 1119, 1156, 1246], "sugar": [268, 299, 570, 677, 679, 692, 694, 697, 712, 716, 717, 718, 721, 726, 728, 729, 730, 732, 733, 734, 739, 741, 743, 745, 749, 751, 760, 843, 870, 1119, 1156, 1246], "400": [268, 299, 415, 416, 418, 843, 870, 1126, 1127, 1129, 1246], "600": [268, 299, 415, 416, 418, 843, 870, 873], "700": [268, 299, 843, 870], "new_df": [268, 299, 843, 870], "time_column": [269, 299], "frequenc": [269, 299], "date_rang": [269, 299, 383, 386, 403, 411, 422, 952, 970, 976, 977, 994, 995], "forward_fil": [269, 299, 361, 364, 760], "varianc": [270, 299, 430, 471, 586, 674, 749, 760, 844, 870, 1004, 1047, 1134, 1235, 1246], "grow": [271, 299], "not_": [273, 299, 465, 760, 846, 870, 1246], "not_c": [273, 299, 846, 870], "diff": [273, 299, 413, 414, 415, 416, 417, 418, 419, 501, 760, 846, 870, 986, 987, 988, 989, 990, 991, 992, 1076, 1246], "_diff": [273, 299, 846, 870], "row_nr": [275, 299, 849, 870], "meth": [275, 299, 849, 870], "1001": [276, 299, 850, 870], "1002": [276, 299, 850, 870], "named_agg": [278, 851], "_sum": [278, 851], "_mean_squar": [278, 851], "b_sum": [278, 851], "c_mean_squar": [278, 851], "sub": [280, 285, 329, 330, 331, 332, 333, 334, 335, 338, 760, 894, 895, 896, 897, 898, 899, 900, 903], "map_group": [280, 681, 853], "toward": [281, 474, 494, 692, 694, 760, 854, 1048, 1069, 1246], "nr": [283, 293, 856, 866], "triangl": [285, 858], "group_df": [285, 858], "maxim": [286, 322, 760, 859, 887, 1246], "833333": [287, 860], "minim": [289, 323, 330, 479, 594, 602, 760, 862, 888, 895, 1054, 1098, 1147, 1246], "overview": [299, 760, 772, 870, 1246, 1255], "frameinittyp": [299, 870], "entri": [299, 870, 1254], "mydatafram": 299, "df4": 299, "df5": 299, "df6": 299, "approx_n_uniqu": [299, 760, 870], "corr": 299, "drop_in_plac": 299, "drop_nul": [299, 375, 760, 870, 943, 1246], "estimated_s": [299, 1246], "explod": [299, 439, 555, 571, 760, 870, 1120, 1246], "find_idx_by_nam": 299, "fold": [299, 532, 688, 695, 696, 699, 700, 735], "frame_equ": 299, "group_by_rol": [299, 870], "groupby_dynam": [299, 870], "groupby_rol": [299, 870], "hash_row": 299, "hstack": 299, "insert_at_idx": 299, "is_dupl": [299, 760, 1246], "is_empti": [299, 1246], "is_uniqu": [299, 760, 1246], "iter_column": 299, "iter_slic": 299, "melt": [299, 870], "merge_sort": [299, 870], "n_uniqu": [299, 760, 1246], "pipe": [299, 760, 870], "plot": [299, 821, 833, 870], "quantil": [299, 563, 582, 760, 870, 1113, 1130, 1246], "replace_at_idx": 299, "select_seq": [299, 870], "shift_and_fil": [299, 760, 870, 1246], "shrink_to_fit": [299, 1246], "take_everi": [299, 760, 870, 1246], "to_dummi": [299, 1246], "to_numpi": [299, 521, 760, 1246], "to_panda": [299, 1246], "to_struct": [299, 615], "unnest": [299, 371, 563, 573, 615, 616, 637, 638, 658, 760, 870, 939, 1087, 1113, 1122, 1191, 1192, 1246], "unstack": 299, "with_columns_seq": [299, 870], "with_row_count": [299, 870], "write_avro": 299, "write_databas": 299, "write_delta": 299, "write_excel": 299, "write_ipc_stream": 299, "write_json": 299, "write_parquet": 299, "cum_prod": [307, 368, 760, 936, 1246], "ghi": [307, 615, 760, 873, 1169], "94": [308, 760], "to_uppercas": [309, 546, 616, 760], "confus": [310, 464, 466, 631, 760], "kleen": [310, 312, 677, 679, 760, 877, 878, 1246], "bitwis": [311, 554, 676, 677, 678, 679, 680, 760], "upcast": [313, 760], "skip_nul": [314, 523, 760, 880, 1094, 1246], "pass_nam": [314, 523, 760], "mapelementsstrategi": [314, 523, 760], "thread_loc": [314, 523, 760], "map_el": [314, 521, 676, 760, 880, 1246], "unknown": [314, 523, 614, 722, 760, 1168], "stage": [314, 760], "code": [314, 342, 344, 345, 346, 523, 591, 760, 791, 809, 870, 1143, 1246], "gil": [314, 523, 760], "invers": [316, 317, 318, 319, 320, 321, 760, 881, 882, 883, 884, 885, 886, 1246], "cosin": [316, 317, 356, 357, 521, 760, 881, 882, 927, 928, 1246], "570796": [316, 318, 760, 881, 883, 1246], "hyperbol": [317, 319, 321, 357, 598, 666, 760, 882, 884, 886, 928, 1152, 1221, 1246], "sine": [318, 319, 521, 597, 598, 760, 883, 884, 1151, 1152, 1246], "881374": [319, 760, 884, 1246], "tangent": [320, 321, 665, 666, 760, 885, 886, 1220, 1221, 1246], "785398": [320, 684, 685, 760, 885, 1246], "arg_wher": [325, 760], "subarrai": [327, 328, 892, 893], "sublist": [332, 478, 479, 481, 484, 488, 489, 490, 491, 492, 493, 501, 506, 509, 510, 512, 897, 1032, 1053, 1054, 1056, 1059, 1063, 1064, 1065, 1066, 1067, 1068, 1076, 1081, 1084, 1085, 1087, 1246], "i8": [339, 383, 387, 391, 393, 395, 397, 400, 403, 404, 407, 421, 422, 511, 594, 733, 736, 751, 760, 904, 941, 952, 956, 968, 970, 977, 980, 994, 995, 1086, 1121, 1233, 1246], "seen": [341, 442, 760], "substr": [342, 345, 346, 606, 612, 629, 630, 636, 637, 638, 639, 873, 906, 909, 910, 1160, 1166, 1183, 1184, 1190, 1191, 1192, 1193], "ends_with": [342, 346, 606, 639, 873, 1193], "yellow": [342, 344, 345, 346], "x00": [342, 344, 345, 346], "xff": [342, 344, 345, 346], "contains_with_lit": 342, "contains_with_expr": 342, "transferencod": [343, 344, 610, 611, 907, 908, 1164, 1165], "hex": [343, 344, 610, 611, 650, 907, 908, 1164, 1165, 1204], "base64": [343, 344, 610, 611, 907, 908, 1164, 1165], "code_encoded_hex": 344, "000000": 344, "ffff00": 344, "0000ff": 344, "anywher": [345, 346, 646, 647, 648, 1200, 1201, 1202], "ends_with_lit": 345, "ends_with_expr": 345, "starts_with_lit": 346, "starts_with_expr": 346, "complex": [347, 370, 668, 760, 911, 938, 1230, 1246], "frac": [347, 428, 429, 430, 599, 668, 760, 911, 1002, 1003, 1004, 1153, 1230, 1246], "to_fram": [349, 386, 406, 411, 420, 646, 939, 1113, 1138, 1141, 1191, 1192, 1200, 1246], "259921": [351, 760, 919, 1246], "587401": [351, 760], "numericliter": [353, 354, 355, 760, 923, 924, 925, 1246], "temporalliter": [353, 354, 355, 760, 923, 924, 925, 961, 962, 1246], "outsid": [353, 760, 923, 1246], "clip": [354, 355, 760, 924, 925, 1246], "543081": [357, 760, 928, 1246], "cotang": [358, 760, 929, 1246], "cumul": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 694, 695, 696, 697, 698, 699, 700, 701, 702, 760, 930, 931, 932, 933, 934, 935, 936, 937, 1246], "cum_count_revers": [360, 760], "cum_max_revers": [361, 760], "cum_max_all_fil": [361, 760], "cum_min_revers": [362, 760], "cum_prod_revers": [363, 760], "cum_sum_revers": [364, 760], "value_cum_sum": [364, 760], "value_cum_sum_all_fil": [364, 760], "cum_count": [365, 760], "cum_max": [366, 760, 934, 1246], "cum_min": [367, 760, 935, 1246], "cum_sum": [369, 453, 659, 698, 701, 760, 804, 870, 937, 1046, 1246], "min_period": [370, 428, 429, 430, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 737, 738, 760, 938, 1002, 1003, 1004, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "slide": [370, 760, 938, 1246], "slot": [370, 373, 484, 760, 938, 941, 1059, 1246], "realli": [370, 607, 631, 760, 938, 1161, 1185, 1246], "visit": [370, 760, 938, 1246], "left_clos": [371, 563, 760, 939, 1113, 1246], "include_break": [371, 563, 760, 939, 1113, 1246], "bin": [371, 451, 563, 650, 676, 753, 760, 939, 1020, 1113, 1204, 1240, 1246], "discret": [371, 373, 425, 451, 484, 501, 563, 760, 939, 941, 999, 1020, 1059, 1076, 1113, 1246], "plu": [371, 516, 760, 939, 1091, 1113, 1246], "endpoint": [371, 563, 578, 579, 580, 581, 582, 584, 585, 586, 760, 939, 1113, 1246], "observ": [371, 428, 429, 430, 563, 760, 939, 1002, 1003, 1004, 1113, 1246], "fall": [371, 563, 760, 939, 1024, 1113, 1246], "qcut": [371, 760, 939, 1246], "breakpoint": [371, 451, 563, 760, 939, 1020, 1113, 1246], "brk": [371, 563, 760], "foo_bin": [371, 563, 760], "radian": [372, 684, 760], "720": [372, 565, 760], "540": [372, 565, 760], "360": [372, 565, 760], "180": [372, 565, 760], "null_behavior": [373, 484, 760, 941, 1059, 1246], "nullbehavior": [373, 484, 760, 941, 1059, 1246], "drop_nan": [376, 760, 944, 1246], "utc": [377, 380, 382, 385, 405, 646, 648, 873, 946, 949, 954, 978, 1200, 1202], "vari": [377, 946, 1255], "rare": [377, 946], "countri": [377, 946], "switch": [377, 946], "samoa": [377, 946], "apia": [377, 946], "did": [377, 946], "2011": [377, 946], "dst_offset": [377, 946], "2012": [377, 946], "replace_time_zon": [377, 382, 385, 950, 951, 983], "pacif": [377, 946], "11h": [377, 946], "13h": [377, 946], "lose": [378, 947], "time_unit_m": [378, 947], "time_unit_n": [378, 947], "naiv": [379, 948, 1202], "compon": [379, 407, 646, 648, 709, 948, 980, 1200, 1202], "resolv": 379, "tm": [379, 873], "456000": [379, 948], "101000": 379, "d1": 379, "d2": 379, "d3": 379, "europ": [380, 385, 405, 949, 954, 978], "london": [380, 385, 405, 949, 954, 978], "gmt": [380, 385, 405, 949, 954, 978], "bst": [380, 385, 405, 949, 954, 978], "1978": [381, 382, 387, 390, 391, 393, 395, 400, 407, 410, 424], "2024": [381, 382, 387, 391, 393, 395, 400, 407, 410, 709, 873], "500_000": [381, 382, 387, 391, 393, 395, 400, 407, 410], "2065": [381, 382, 387, 391, 393, 395, 400, 407, 410], "60_000": [381, 382, 387, 391, 393, 395, 400, 407, 410], "060": [381, 382, 387, 391, 393, 395, 400, 407, 410], "weekdai": [383, 403], "ordinal_dai": [383, 422], "day_of_month": [383, 403, 422], "day_of_year": [383, 403, 422], "356": [383, 403, 422], "357": [383, 403, 422], "358": [383, 403, 422], "359": [383, 403, 422], "total_dai": [384, 953], "base_utc_offset": [385, 954], "0m": [385, 954], "epochtimeunit": [386, 715, 955], "unix": [386, 715, 955], "epoch_n": [386, 955], "epoch_": [386, 955], "978307200000000": [386, 411, 955, 984], "978307200": [386, 955], "978393600000000": [386, 411, 955, 984], "978393600": [386, 955], "978480000000000": [386, 411, 955, 984], "978480000": [386, 955], "total_hour": [388, 957], "leap": [389, 402, 958, 975], "iso": [390, 421, 422, 959, 994, 995], "1977": [390, 424], "1979": [390, 424], "calendar_year": [390, 424], "1976": [390, 424], "500000": [391, 963], "60000": 391, "total_microsecond": [392, 964], "total_millisecond": [394, 966], "total_minut": [396, 969], "think": [398, 399, 971, 972], "vectoris": [398, 399, 971, 972], "tseri": [398, 399, 971, 972], "monthend": [398, 971], "rollforward": [398, 971], "monthbegin": [399, 972], "rollback": [399, 972], "500000000": [400, 973], "60000000": 400, "total_nanosecond": [401, 974], "minu": [402, 975], "dictat": [402, 760, 975], "2005": [402, 975], "date_plus_1i": [402, 975], "1y2mo": [402, 975], "date_min": 402, "1998": [402, 975], "1999": [402, 873, 975], "2003": [402, 715, 975], "2004": [402, 975], "2006": [402, 975], "new_dat": 402, "ordin": [403, 566, 760, 976, 1115, 1246], "366": [403, 976], "use_earliest": [405, 420, 646, 648, 706, 978, 993, 1200, 1202], "ambigu": [405, 406, 420, 646, 648, 706, 978, 979, 993, 1200, 1202], "convert_time_zon": [405, 978], "london_timezon": [405, 978], "amsterdam": [405, 978], "london_to_amsterdam": [405, 978], "cet": [405, 978], "cest": [405, 978], "ts_local": [405, 978], "brussel": [405, 978], "half": [406, 428, 429, 430, 760, 979, 1002, 1003, 1004, 1246], "localis": [406, 420, 979, 993], "dst": [406, 420, 979, 993], "cst": [406, 420, 979, 993], "cdt": [406, 420, 979, 993], "225": [406, 420], "10m": [406, 420, 979, 993], "milli": [407, 980], "micro": [407, 980], "total_second": [408, 981], "to_str": [409, 982], "datetime_str": [409, 412], "timestamp_n": [411, 984], "timestamp_m": 411, "978307200000": 411, "978393600000": 411, "978480000000": 411, "strftime": [412, 985], "days_diff": 413, "hours_diff": 414, "200m": [415, 416, 418], "milliseconds_diff": [415, 416, 418], "200": [415, 416, 418, 570, 760, 1119, 1126, 1127, 1129, 1246], "200000": [415, 812, 870], "800": [415, 416, 418], "minutes_diff": 417, "1440": [417, 990], "200000000": 418, "seconds_diff": 419, "safe": [420, 568, 760, 979, 993, 1117, 1202, 1227, 1246], "truncate_str": 420, "truncate_td": 420, "53": [421, 994], "time_unit_u": 423, "32971": [423, 996], "32974": [423, 996], "32976": [423, 996], "iso_year": 424, "pk": [425, 760, 999, 1246], "probabl": [425, 563, 760, 999, 1113, 1246], "459148": [425, 760], "754888": [425, 760], "span": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "half_lif": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "adjust": [428, 429, 430, 599, 760, 1002, 1003, 1004, 1153, 1246], "exponenti": [428, 429, 430, 432, 560, 760, 1002, 1003, 1004, 1005, 1246], "weight": [428, 429, 430, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 599, 760, 1002, 1003, 1004, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1153, 1246], "decai": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "term": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "mass": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "gamma": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "foral": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "geq": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "theta": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "life": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "exp": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "ln": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "smooth": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "factor": [428, 429, 430, 667, 760, 1002, 1003, 1004, 1229, 1246], "leq": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "imbal": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "ew": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "w_i": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "recurs": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "y_t": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "y_": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "x_t": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "x_2": [428, 429, 430, 760, 1002, 1003, 1004, 1246], "428571": [428, 760, 1002, 1246], "bia": [429, 430, 471, 583, 599, 760, 1003, 1004, 1047, 1131, 1153, 1246], "unbias": [429, 430, 760, 1003, 1004, 1246], "963624": [429, 760, 1003, 1246], "928571": [430, 760, 1004, 1246], "wildcard": [431, 695, 696, 699, 700, 713, 735, 760], "regex": [431, 529, 606, 608, 609, 612, 614, 615, 616, 629, 630, 639, 711, 760, 873, 1160, 1162, 1163, 1166, 1168, 1169, 1170, 1183, 1184, 1193], "aa": [431, 606, 711, 760, 1160], "ba": [431, 639, 711, 760, 873], "cc": [431, 711, 760], "718282": [432, 760, 1005, 1246], "389056": [432, 760, 1005, 1246], "59815": [432, 760], "expand": [433, 528, 529, 569, 760, 873, 1006, 1246], "pythonliter": [434, 760, 1008, 1095, 1096, 1097, 1098, 1138, 1246], "extrem": [434, 577, 760, 1008, 1125, 1246], "group_col": [437, 675, 760], "g1": [437, 675, 760], "g2": [437, 675, 760], "lt": [437, 675, 760, 1246], "gte": [437, 675, 760], "n_1": [437, 760], "n_2": [437, 760], "n_3": [437, 760], "exprlistnamespac": [439, 760], "divis": [441, 669, 760], "truediv": [441, 760], "9774092659964970114": [449, 760], "13614470193936745724": [449, 760], "1101441246220388612": [449, 760], "11638928888656214026": [449, 760], "13382926553367784577": [449, 760], "bin_count": [451, 760, 1020, 1246], "include_categori": [451, 760, 1020, 1246], "include_breakpoint": [451, 760, 1020, 1246], "occurr": [451, 458, 459, 462, 463, 673, 760, 1020, 1029, 1030, 1035, 1036, 1234, 1246], "interpolationmethod": [454, 760, 1023, 1246], "regrid": [454, 760], "grid": [454, 760], "df_original_grid": [454, 760], "grid_point": [454, 760], "df_new_grid": [454, 760], "conflat": [455, 760], "finit": [457, 669, 691, 760, 1028, 1246], "is_first_distinct": [458, 760, 1029, 1246], "optional_memb": [460, 760, 1032, 1246], "infinit": [461, 669, 760, 1033, 1246], "is_last_distinct": [462, 760, 1035, 1246], "_isnan": [464, 760], "b_isnan": [464, 760], "negat": [465, 552, 760, 1106, 1246], "_is_not_nan": [466, 760], "b_is_not_nan": [466, 760], "_not_nul": [467, 760], "a_not_nul": [467, 760], "b_not_nul": [467, 760], "_isnul": [468, 760], "a_isnul": [468, 760], "b_isnul": [468, 760], "chain": [470, 542, 544, 545, 546, 547, 561, 660, 750, 760], "undo": [470, 535, 542, 544, 545, 561, 660, 760], "fisher": [471, 599, 760, 1047, 1153, 1246], "fourth": [471, 760, 1047, 1246], "subtract": [471, 659, 760, 1047, 1246], "distribut": [471, 599, 760, 1047, 1153, 1246], "elimin": [471, 760, 1047, 1246], "bias": [471, 599, 760, 1047, 1153, 1246], "scipi": [471, 599, 760, 1047, 1153, 1246, 1250], "stat": [471, 599, 760, 1047, 1153, 1246], "153061": [471, 760], "membership": [481, 1056], "number_of_two": 483, "blindli": [486, 1061], "worth": [486, 1061], "enough": [486, 599, 760, 1061, 1153, 1246], "rank": [486, 691, 710, 760, 1061, 1246], "concat_list": [486, 710], "exprnamespac": 487, "flat": [487, 571, 760, 1062, 1120, 1246], "null_on_oob": [489, 510, 1064, 1085], "cheaper": [489, 510, 1064, 1085], "x_y": 492, "symmetr": [503, 1078], "sdiff": 503, "taken": [506, 635, 1081, 1189], "n_field_strategi": [512, 1087], "tostructstrategi": [512, 1087], "first_non_nul": [512, 1087], "max_width": [512, 1087], "field_0": [512, 1087], "field_1": [512, 1087], "field_n": [512, 1087], "pre": [512, 523, 563, 733, 736, 751, 760, 1113, 1246], "obtain": 512, "ok": 512, "longest": 512, "n0": 512, "n1": 512, "logarithm": [514, 515, 516, 760, 1089, 1090, 1091, 1246], "584963": [514, 760], "30103": [515, 760], "60206": [515, 760], "natur": [516, 760, 1091, 1246], "693147": [516, 760, 1089, 1091, 1246], "098612": [516, 760, 1089, 1091, 1246], "386294": [516, 760, 1091, 1246], "lowest": [517, 760], "9223372036854775808": [517, 760], "agg_list": [519, 521, 760], "map_batch": [519, 723, 760, 811, 870], "keep_nam": [520, 760], "a_revers": [520, 543, 545, 572, 660, 760], "b_revers": [520, 543, 545, 572, 660, 760], "rstrip": [520, 543, 760], "_revers": [520, 543, 545, 572, 660, 760], "is_elementwis": [521, 760], "whole": [521, 601, 602, 614, 760, 858, 870, 1168], "elementwis": [521, 576, 577, 578, 579, 581, 585, 760, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "third": [521, 760], "parti": [521, 760], "book": [521, 760], "bug": [521, 523, 760, 811, 812, 853, 858, 870, 1094, 1246], "argmax": [521, 760], "remap": [522, 760, 1093, 1246], "lookup": [522, 756, 760, 1093, 1246], "discourag": [523, 760], "loop": [523, 760], "a_times_2": [523, 760], "tip": [523, 760], "again": [523, 760], "exprmetanamespac": [527, 530], "foo_bar2": [527, 530], "raise_if_undetermin": 531, "computeerror": [531, 628, 650, 772, 1182, 1204], "e_filt": [531, 533], "e_sum_ov": [531, 533], "e_sum_slic": [531, 533], "tree": 534, "modulu": [538, 760], "xlog2": [540, 560, 760], "reverse_": [544, 561, 760], "reverse_a": [544, 561, 760], "reverse_b": [544, 561, 760], "lowercas": [546, 651, 1205], "uppercas": [547, 654, 1208], "to_lowercas": 547, "poison": [548, 549, 760, 1103, 1104, 1246], "nanmax": [548, 549, 760, 1103, 1104, 1246], "inequ": [550, 760], "ne": [551, 760, 1246], "more_expr": [555, 686, 688, 689, 690, 760], "mapping_strategi": [555, 760], "windowmappingstrategi": [555, 760], "group_to_row": [555, 760], "outcom": [555, 760], "group_dtyp": [555, 760], "warn": [555, 578, 579, 580, 581, 582, 584, 585, 586, 760], "flatten": [555, 760], "_max": [555, 760], "c_max": [555, 760], "_min": [555, 760], "c_min": [555, 760], "percent": [556, 760, 1108, 1246], "090909": [556, 760], "peak": [557, 558, 760, 1109, 1110, 1246], "extract_numb": [559, 760], "digit": [559, 587, 588, 615, 760, 1135, 1136, 1163, 1169, 1246, 1255], "scale_negative_even": [559, 760], "expon": [560, 760, 1246], "allow_dupl": [563, 760, 1113, 1246], "duplicateerror": [563, 760, 772, 1113, 1246], "happen": [563, 760, 1113, 1246], "cut": [563, 760, 1113, 1246], "566371": [565, 760], "424778": [565, 760], "283185": [565, 760], "141593": [565, 760, 881, 1246], "rankmethod": [566, 760, 1115, 1246], "ti": [566, 760, 1115, 1246], "competit": [566, 760, 1115, 1246], "highest": [566, 672, 691, 760, 870, 1115, 1246], "immedi": [566, 683, 687, 704, 705, 707, 708, 719, 720, 733, 736, 742, 747, 748, 751, 760, 1115, 1246], "nodefault": [570, 760, 1119, 1246], "_nodefault": [570, 760, 1119, 1246], "no_default": [570, 760, 1119, 1246], "fruits_revers": [572, 760], "cars_revers": [572, 760], "rle_id": [573, 760, 1122, 1246], "rle": [574, 760, 1123, 1246], "a_r": [574, 760], "ab_r": [574, 760], "window_s": [576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 737, 738, 760, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1246], "rolling_map": [576, 760, 1124, 1246], "multipli": [576, 577, 578, 579, 581, 584, 585, 586, 760, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1132, 1133, 1134, 1246], "rolling_sum": [577, 760, 1125, 1246], "nansum": [577, 760, 1125, 1246], "warn_if_unsort": [578, 579, 580, 581, 582, 584, 585, 586, 760], "travers": [578, 579, 581, 585, 760, 1126, 1127, 1129, 1132, 1133, 1134, 1246], "vector": [578, 579, 581, 585, 760, 1126, 1127, 1129, 1132, 1133, 1134, 1246], "5h": [578, 579, 580, 581, 582, 584, 585, 586, 760], "df_tempor": [578, 579, 581, 584, 585, 586, 760], "closur": [578, 579, 584, 585, 586, 760], "rolling_row_max": [578, 760], "2h": [578, 579, 581, 584, 585, 586, 760], "rolling_row_mean": [579, 760], "rolling_row_min": [581, 760], "625": [582, 760], "skew": [583, 760, 1131, 1246], "381802": [583, 760, 1131, 1246], "47033": [583, 760, 1131, 1246], "38180177416060584": [583, 760, 1131, 1246], "47033046033698594": [583, 760, 1131, 1246], "433013": [584, 760, 836, 870], "rolling_row_std": [584, 760], "rolling_row_sum": [585, 760], "39": [585, 715, 760], "63": [585, 760], "69": [585, 760], "1875": [586, 760, 844, 870], "rolling_row_var": [586, 760], "figur": [588, 760, 833, 870, 1136, 1246], "01234": [588, 760, 1136, 1246], "012": [588, 760, 1136, 1246], "1200": [588, 760, 1136, 1246], "searchsortedsid": [590, 760, 1139, 1246], "leftmost": [590, 760, 1139, 1246], "rightmost": [590, 760, 1139, 1246], "six": [590, 760], "extrema": [594, 760, 1147, 1246], "112": [594, 760, 1255], "129": [594, 760], "8589934592": [594, 760], "1073741824": [594, 760], "175201": [598, 760, 1152, 1246], "unimod": [599, 760, 1153, 1246], "skewtest": [599, 760, 1153, 1246], "speak": [599, 760, 1153, 1246], "g_1": [599, 760, 1153, 1246], "m_3": [599, 760, 1153, 1246], "m_2": [599, 760, 1153, 1246], "m_i": [599, 760, 1153, 1246], "sum_": [599, 760, 1153, 1246], "texttt": [599, 760, 1153, 1246], "k_3": [599, 760, 1153, 1246], "k_2": [599, 760, 1153, 1246], "sqrt": [599, 684, 685, 760, 1153, 1246], "343622": [599, 760], "value1": [602, 760], "value2": [602, 760], "attain": [602, 760], "414214": [603, 760, 1156, 1246], "sensit": [606, 615, 629, 1160, 1169, 1183], "ilmsuxu": [606, 614, 615, 629, 1160, 1168, 1169, 1183], "default_match": 606, "insensitive_match": 606, "crab": [606, 1160], "dog": [606, 651, 654, 690, 1160, 1205, 1208], "rab": [606, 632, 1160, 1186], "ascii_case_insensit": [607, 631, 1161, 1185], "aho": [607, 631, 1161, 1185], "corasick": [607, 631, 1161, 1185], "insensit": [607, 615, 629, 631, 873, 1160, 1161, 1169, 1183, 1185], "set_fmt_str_length": [607, 631, 1161, 1185], "lyric": [607, 631, 1161, 1185], "everybodi": [607, 631, 1161, 1185], "tell": [607, 631, 1161, 1185], "me": [607, 631, 1161, 1185], "feel": [607, 631, 1161, 1185], "love": [607, 631, 1161, 1185], "tonight": [607, 631, 1161, 1185], "success": [608, 609, 615, 1162, 1163, 1169], "overlap": [608, 609, 615, 1162, 1163, 1169], "bla": [609, 615, 1163, 1169], "asd": [609, 615, 1163, 1169], "678": [609, 615, 1163, 1169], "910t": [609, 615, 1163, 1169], "count_digit": 609, "dbc": [609, 1163], "3xy": [609, 1163], "1zy3": [609, 1163], "strings_hex": 611, "666f6f": [611, 1165], "626172": [611, 1165], "mango": [612, 639, 1166, 1193], "has_suffix": 612, "le": [612, 760, 1246], "nu": 612, "group_index": [614, 1168], "captur": [614, 616, 1168, 1170], "nthose": [614, 1168], "nodd": [614, 1168], "nthe": [614, 1168], "odd": 614, "vote": [614, 616, 1168, 1170], "ballon_dor": [614, 616, 1168, 1170], "404": [614, 616, 1168, 1170], "ref": [614, 616, 1168, 1170], "candid": [614, 616, 1168, 1170], "messi": [614, 616, 1168, 1170], "ronaldo": [614, 1168], "haystack": [615, 1169], "email": [615, 1169], "real": [615, 1169], "some_account": [615, 1169], "somewher": [615, 1169], "net": [615, 1169], "jkl": [615, 1169], "uvw": [615, 1169], "co": [615, 760, 1169, 1246], "uk": [615, 1169], "address": 615, "xi": [615, 1169], "quantifi": [615, 1169], "email_part": [615, 1169], "extracted_nr": 615, "910": [615, 1169], "unnam": [616, 1170], "weghorst": [616, 1170], "candi": 616, "json_path_match": [617, 1171], "jsonpath": [617, 619, 1171, 1173], "json_decod": [618, 1172], "json_path": [619, 1173], "json_val": [619, 1173], "len_char": [620, 625, 1174, 1179], "_o": [620, 621, 1174, 1175], "caf\u00e9": [620, 621, 1174, 1175], "345": [620, 621, 1174, 1175], "\u6771\u4eac": [620, 621, 1174, 1175], "n_byte": [620, 621], "n_char": [620, 621], "fill_char": [623, 626, 627, 633, 1177, 1180, 1181, 1187], "justifi": [623, 633, 1177, 1187], "pad_end": [623, 627, 1177, 1181], "strip_chars_start": [624, 642, 644, 1178], "pad": [626, 627, 655, 1180, 1181, 1209], "reach": [626, 627, 655, 1180, 1181, 1209], "pad_start": [626, 633, 655, 1180, 1187, 1209], "cow": [626, 627, 1180, 1181], "monkei": [626, 627, 1180, 1181], "hippopotamu": [626, 627, 1180, 1181], "zfill": [627, 676, 760, 1181], "radix": [628, 650, 1182, 1204], "parseerror": [628, 650, 1182, 1204], "becom": 628, "to_integ": [628, 1182], "silent": [628, 650, 1182, 1204], "replace_al": [629, 1183], "citi": 629, "philadelphia": 629, "season": 629, "spring": 629, "summer": 629, "autumn": 629, "winter": 629, "weather": [629, 1183], "raini": [629, 1183], "sunni": [629, 1183], "cloudi": 629, "snowi": 629, "foggi": [629, 1183], "123abc": [629, 1183], "abc456": [629, 1183], "abcabc": [630, 1184], "123a123": [630, 1184], "bc": [630, 743, 1184], "replace_with": [631, 1185], "broadcast": [631, 873, 1185], "removes_pronoun": 631, "man": [632, 1186], "ana": [632, 1186], "oof": [632, 1186], "anan": [632, 1186], "am": [632, 1186], "strip_chars_end": [634, 643, 645, 1188], "subslic": [635, 1189], "pear": [635, 1189], "papaya": [635, 1189], "dragonfruit": [635, 1189], "s_slice": 635, "ear": [635, 1189], "aya": [635, 1189], "uit": [635, 1189], "ya": [635, 1189], "onf": [635, 1189], "foo_bar_baz": 636, "split_inclus": 636, "foo_": [636, 714], "bar_": 636, "a_1": [637, 1191, 1223, 1246], "d_4": [637, 1191], "rename_field": [637, 638, 939, 1113, 1191, 1192, 1246], "first_part": [637, 638, 1191, 1192], "second_part": [637, 638, 1191, 1192], "remaind": [638, 1192], "app": [639, 1193], "has_prefix": 639, "strip_char": [640, 1194], "nworld": 641, "foo_strip": 641, "ow": 641, "hell": [641, 1195], "rld": [641, 643, 1197], "strip_suffix": [642, 644], "foo_strip_end": 642, "oldw": 642, "he": 642, "abcdeff": 642, "fed": 642, "strip_prefix": [643, 645], "tworld": [643, 1195, 1197], "foo_strip_start": 643, "wod": [643, 1197], "aabcdef": 643, "cba": 643, "foobar": [644, 645, 1198, 1199], "foofoobar": [644, 1198], "foobarbar": [645, 1199], "polarstemporaltyp": [646, 1200], "penalti": [646, 647, 648, 1200, 1201, 1202], "clean": [646, 647, 648, 1200, 1201, 1202], "beforehand": [646, 647, 648, 1200, 1201, 1202], "certainli": [646, 647, 648, 1200, 1201, 1202], "00z": [646, 648, 1200, 1202], "sun": [646, 1200], "jul": [646, 1200], "34": [646, 1200], "inference_length": [649, 1203], "3420": [649, 1203], "120134": [649, 1203], "3212": [649, 1203], "90": [649, 1203], "143": [649, 1203, 1255], "numbers_decim": 649, "110": [650, 1204], "fa1e": [650, 1204], "ff00": [650, 1204], "cafe": [650, 1204], "64030": [650, 1204], "65280": [650, 1204], "51966": [650, 1204], "variant": [651, 653, 654, 1034, 1246], "foo_low": 651, "titlecas": [653, 1207], "sing": [653, 1207], "welcom": [653, 1207], "THERE": [653, 1207], "NO": [653, 873, 1207], "foo_titl": 653, "There": [653, 1207], "foo_upp": 654, "999999": [655, 706, 746, 747, 748, 873, 1209], "0123": [655, 1209], "cd": [656, 658], "struct_col": [656, 658], "www": 658, "xxx": 658, "yyi": 658, "zzz": 658, "obvious": 658, "structfieldnotfounderror": [658, 772], "761594": [666, 760, 1221, 1246], "replic": [667, 760, 1229, 1246], "vals_phys": [667, 760], "floordiv": [669, 760], "ieee": [669, 760], "754": [669, 760], "mathemat": [669, 710, 760], "undefin": [669, 760], "On": [669, 760], "operand": [669, 760], "infin": [669, 760], "value_count": [671, 760, 1246], "9223372036854775807": [672, 760], "binary_str": [676, 760], "250": [676, 760, 1127, 1246, 1255], "bin_x": [676, 760], "bin_i": [676, 760], "xor_xi": [676, 760], "bin_xor_xi": [676, 760], "00001010": [676, 760], "00001011": [676, 760], "00001000": [676, 760], "00000010": [676, 760], "11111010": [676, 760], "00000011": [676, 760], "249": [676, 760], "11111001": [676, 760], "01000010": [676, 760], "00000100": [676, 760], "70": [676, 760], "01000110": [676, 760], "AND": [677, 678, 873, 1227, 1246], "OR": [679, 680, 794, 870, 873], "any_horizont": 679, "returns_scalar": [681, 725, 760], "polarsintegertyp": [683, 719, 720], "arctan": [684, 685, 760, 1246], "angl": [684, 685], "plane": [684, 685], "rai": [684, 685], "tworoottwo": [684, 685], "arctan2d": 684, "atan2d": [684, 685], "atan2": [684, 685], "135": [684, 685], "356194": [684, 685], "arctan2": 685, "arg_tru": [687, 760, 1246], "mimic": 689, "a_lag_": 689, "a_rol": 689, "swim": 690, "walk": 690, "full_sent": 690, "correlationmethod": 691, "propagate_nan": 691, "spearman": 691, "544705": 691, "covari": [693, 738, 760], "acc": [695, 696, 699, 700, 713, 735], "include_init": [695, 699], "accumul": [695, 696, 699, 700, 713, 735], "fn": [695, 696, 699, 700, 713, 735], "new_valu": [695, 696, 699, 700, 713, 735], "cum_reduc": 695, "cumsum_horizont": 697, "cum_sum_horizont": 702, "granular": 704, "finer": 704, "permut": 704, "1985": [704, 707], "america": 707, "new_york": 707, "est": 707, "contrast": 709, "offset_bi": 709, "sometim": [709, 759], "tbl_width_char": 709, "120": 709, "add_week": 709, "add_dai": 709, "add_second": 709, "add_milli": 709, "add_hour": 709, "002": [709, 988, 989, 991], "add_calendar_dai": 709, "add_calendar_month": 709, "mo": 709, "add_calendar_year": 709, "a_b_doubl": 710, "redirect": 711, "f_string": 714, "placehold": 714, "hello_": 714, "_world": 714, "_bar_": 714, "foo_a_bar_1": 714, "foo_b_bar_2": 714, "foo_c_bar_3": 714, "epoch": 715, "timestep": 715, "1666683077": 715, "1666683099": 715, "12345": [715, 920, 1013, 1135, 1246], "12346": 715, "agg_group": [716, 760], "allow_object": 722, "valueexcept": 722, "test_func": 724, "list_of_seri": 725, "my_custom_aggreg": 725, "understood": 725, "power": [740, 1246], "a_a": 740, "a_txt": 740, "605551": 741, "605551275463989": 741, "my_struct": 742, "thens": 750, "elif": 750, "pick": 750, "met": 750, "own": [750, 1255], "isn": 750, "arr": [752, 1227, 1238, 1246], "technic": 756, "further": [756, 1228, 1246], "columnfactori": 756, "more_nam": 756, "__call__": 756, "helper": 756, "__getattr__": 756, "idiomat": [756, 858], "quick": [756, 940, 1246, 1255], "prototyp": 756, "keystrok": 756, "drawback": 756, "readabl": 756, "modul": [759, 873, 1255], "and_": 760, "arcco": [760, 1246], "arccosh": [760, 1246], "arcsin": [760, 1246], "arcsinh": [760, 1246], "arctanh": [760, 1246], "arg_max": [760, 1246], "arg_min": [760, 1246], "arg_sort": [760, 1246], "arg_uniqu": [760, 1246], "backward_fil": 760, "cbrt": [760, 1246], "clip_max": [760, 1246], "clip_min": [760, 1246], "cosh": [760, 1246], "cot": [760, 1246], "cumcount": 760, "cummax": [760, 1246], "cummin": [760, 1246], "cumprod": [760, 1246], "cumsum": [760, 1246], "cumulative_ev": [760, 1246], "entropi": [760, 1246], "eq_miss": [760, 1246], "ewm_mean": [760, 1246], "ewm_std": [760, 1246], "ewm_var": [760, 1246], "extend_const": [760, 1246], "from_json": 760, "ge": [760, 1246], "gt": [760, 1246], "hist": [760, 1246, 1250], "implod": [760, 1246], "inspect": [760, 870], "is_between": [760, 1246], "is_finit": [760, 1246], "is_first": [760, 1246], "is_infinit": [760, 1246], "is_last": [760, 1246], "is_nan": [760, 1246], "is_not": 760, "is_not_nan": [760, 1246], "is_not_nul": [760, 1246], "kurtosi": [760, 1246], "log10": [760, 1246], "log1p": [760, 1246], "map_alia": 760, "map_dict": [760, 1246], "mod": 760, "mul": 760, "nan_max": [760, 1246], "nan_min": [760, 1246], "ne_miss": [760, 1246], "or_": 760, "pct_chang": [760, 1246], "peak_max": [760, 1246], "peak_min": [760, 1246], "pow": [760, 1246], "register_plugin": 760, "lib": [760, 1222, 1246], "input_wildcard_expans": 760, "cast_to_supertyp": 760, "pass_name_to_appli": 760, "changes_length": 760, "plugin": 760, "highli": 760, "unsaf": 760, "unstabl": 760, "serializ": 760, "ran": 760, "reinterpret": [760, 1246], "repeat_bi": 760, "rolling_appli": [760, 1246], "rolling_max": [760, 1246], "rolling_mean": [760, 1246], "rolling_median": [760, 1246], "rolling_min": [760, 1246], "rolling_quantil": [760, 1246], "rolling_skew": [760, 1246], "rolling_std": [760, 1246], "rolling_var": [760, 1246], "round_sig_fig": [760, 1246], "search_sort": [760, 1246], "shrink_dtyp": [760, 1246], "sin": [760, 1246], "sinh": [760, 1246], "sort_bi": 760, "tan": [760, 1246], "to_phys": [760, 917, 1246], "unique_count": [760, 1246], "xor": 760, "expos": 772, "miscellan": 772, "arrowerror": 772, "columnnotfounderror": 772, "invalidoperationerror": 772, "polarspanicerror": 772, "schemaerror": 772, "schemafieldnotfounderror": 772, "shapeerror": 772, "parametr": 772, "build_info": 772, "get_index_typ": 772, "show_vers": 772, "threadpool_s": 772, "sqlcontext": [772, 1254], "hit": [777, 870], "node": [777, 781, 804, 811, 812, 816, 821, 823, 870], "background": [781, 870], "_eager": [781, 870], "inprocessqueri": [781, 870], "explain": [781, 870], "cancel": [781, 870], "purpos": [781, 791, 870], "set_streaming_chunk_s": [781, 870], "collect_all_async": [782, 870], "async": [782, 870], "stringio": [785, 829, 870], "snippet": [787, 870], "Be": [791, 870], "fewer": [791, 870], "suscept": [791, 870], "lazygroupbi": [797, 798, 799, 800, 801, 802, 825, 870], "other_lf": [806, 870], "validate_output_schema": [811, 812, 870], "streamabl": [811, 812, 816, 870], "past": [811, 812, 870], "paramount": [811, 812, 870], "elig": [811, 812, 870], "invari": [812, 870], "upheld": [812, 870], "100_000": [812, 870], "199998": [812, 870], "199996": [812, 870], "199994": [812, 870], "199992": [812, 870], "show_plot": [821, 870], "truncate_nod": [821, 870], "figsiz": [821, 833, 870], "gantt": [821, 870], "group_by_partit": [821, 870], "470": [821, 870], "475": [821, 870], "1964": [821, 870], "swap": [823, 870], "dynamic_group_bi": [825, 870], "deseri": [829, 870], "dataframescan": [829, 870], "output_schema": [829, 870], "run_parallel": [829, 870], "duplicate_check": [829, 870], "later": [829, 870], "output_path": [833, 870], "raw_output": [833, 870], "290994": [836, 870], "118034": [836, 870], "new_lf": [843, 870], "extern": [848, 870], "lf_other": [848, 870], "afoo": [848, 870], "cfoo": [848, 870], "train_lf": [848, 870], "feature_0": [848, 870], "feature_1": [848, 870], "test_lf": [848, 870], "_train": [848, 870], "feature_0_train": [848, 870], "opaqu": 858, "my_column": 858, "struct_seri": 858, "lf5": 870, "lf6": 870, "sink_csv": 870, "sink_ipc": 870, "sink_ndjson": 870, "sink_json": 870, "sink_parquet": 870, "with_context": 870, "intuit": 873, "emploi": 873, "complement": 873, "plenti": 873, "cde": 873, "fgg": 873, "jjk": 873, "lmn": 873, "opp": 873, "qqr": 873, "by_dtyp": 873, "as_expr": 873, "dispatch": 873, "1_234_500": 873, "5_000_555": 873, "1234500": 873, "5000555": 873, "by_nam": 873, "2010": 873, "4_500_000": 873, "4500000": 873, "3265500": 873, "zap": 873, "2031": 873, "tstamp_tokyo": 873, "123465": 873, "tstamp_utc": 873, "999000": 873, "2025": 873, "666000": 873, "tstamp": 873, "600000": 873, "123000": 873, "999": [873, 1255], "666": 873, "td1": 873, "987000": 873, "td2": 873, "456789": [873, 980], "td3": 873, "2m": [873, 968], "456m": 873, "7d": 873, "456789\u00b5": 873, "18d": 873, "999999\u00b5": 873, "23h": 873, "987m": 873, "14d": 873, "16h": 873, "39m": 873, "21d": 873, "456001\u00b5": 873, "expand_selector": 873, "colz": [873, 1255], "everyth": 873, "signed_integ": 873, "unsigned_integ": 873, "is_selector": 873, "obj": 873, "include_categor": 873, "2345": 873, "3456": 873, "292432": [882, 1246], "549306": [886, 1246], "innter": 897, "catnamespac": 913, "set_ord": 918, "44225": [919, 1246], "56789": [920, 1013, 1135, 1246], "901234": [920, 1013, 1135, 1246], "1232e": [927, 929, 1246], "1656e15": [929, 1246], "break_point_label": [939, 1113, 1246], "break_point": [939, 1020, 1113, 1246], "category_label": [939, 1113, 1246], "581139": [940, 1246], "arraylik": [942, 1246], "datetimenamespac": 945, "ser": [950, 951, 983], "kathmandu": [950, 951, 983], "0545": [950, 951, 983], "500m": [963, 965, 973], "date_minus_1y_2mon": 975, "165": [979, 993], "round_str": 979, "round_td": 979, "111110": 980, "765431": 980, "11111": 980, "timestamp_u": 984, "978307200000000000": 984, "978393600000000000": 984, "978480000000000000": 984, "005": [999, 1246], "06293300616044681": [999, 1246], "65": [999, 1246], "8568409950394724": [999, 1246], "4000000": [1001, 1246], "814697265625": [1001, 1246], "085537": [1005, 1246], "bitmask": [1017, 1246], "absenc": [1017, 1246], "presenc": [1017, 1227, 1246], "confirm": [1017, 1246], "10734580197236529959": [1018, 1246], "3022416320763508302": [1018, 1246], "13756996518000038261": [1018, 1246], "is_signed_integ": [1034, 1246], "is_unsigned_integ": [1034, 1246], "listnamespac": 1050, "field_2": 1087, "n00": 1087, "n01": 1087, "n02": 1087, "2147483648": [1092, 1246], "166667": [1108, 1246], "142857": [1108, 1246], "150": [1127, 1246], "350": [1127, 1246], "450": [1127, 1246], "dev": [1132, 1246], "527525": [1132, 1246], "57": [1135, 1246, 1255], "frequent": [1138, 1141, 1246], "2246e": [1151, 1220, 1246], "34776706224699483": [1153, 1246], "732051": [1156, 1246], "stringnamespac": 1158, "orld": 1196, "tur": 1207, "6331e16": [1220, 1246], "int64arrai": [1222, 1246], "a_2": [1223, 1246], "a_3": [1223, 1246], "s_from_str_repr": [1225, 1246], "zero_copy_onli": [1227, 1246], "writabl": [1227, 1246], "immut": [1227, 1246], "127": [1233, 1246], "seriesview": [1236, 1246], "dtype_if_empti": 1246, "position": 1246, "scenario": 1246, "chunk_length": 1246, "get_chunk": 1246, "has_valid": 1246, "is_boolean": 1246, "is_float": 1246, "is_integ": 1246, "is_numer": [1246, 1255], "is_sort": 1246, "is_tempor": 1246, "is_utf8": 1246, "new_from_index": 1246, "series_equ": 1246, "set_at_idx": 1246, "histogram": 1250, "kde": 1250, "two_a": 1254, "__enter__": 1254, "__exit__": 1254, "exc_typ": 1254, "baseexcept": 1254, "exc_val": 1254, "exc_tb": 1254, "tracebacktyp": 1254, "primari": 1255, "guid": 1255, "machin": 1255, "xdist": 1255, "hardwar": 1255, "setup": 1255, "sec": 1255, "numeric_dtyp": 1255, "null_probabililti": 1255, "test_numer": 1255, "col0": 1255, "col4": 1255, "29096": 1255, "485": 1255, "2147483647": 1255, "8257e14": 1255, "7508": 1255, "37338": 1255, "7264": 1255, "16996": 1255, "121": 1255, "361": 1255, "63204": 1255, "1443e235": 1255, "conform": 1255, "ascii_lett": 1255, "id_char": 1255, "alphabet": 1255, "price": 1255, "min_valu": 1255, "max_valu": 1255, "test_price_calcul": 1255, "a101": 1255, "8nin": 1255, "qhoo": 1255, "714": 1255, "544": 1255, "i0e0": 1255, "0000": 1255, "test_miscellan": 1255, "235": 1255, "87": 1255, "186": 1255, "174": 1255, "179": 1255, "213": 1255, "221": 1255, "86": 1255, "255": 1255}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [61, 0, 1, "", "List"], [62, 0, 1, "", "Null"], [63, 0, 1, "", "Object"], [1254, 0, 1, "", "SQLContext"], [70, 0, 1, "", "String"], [71, 0, 1, "", "StringCache"], [72, 0, 1, "", "Struct"], [73, 0, 1, "", "Time"], [74, 0, 1, "", "UInt16"], [75, 0, 1, "", "UInt32"], [76, 0, 1, "", "UInt64"], [77, 0, 1, "", "UInt8"], [78, 0, 1, "", "Unknown"], [79, 3, 1, "", "Utf8"], [80, 4, 1, "", "align_frames"], [677, 4, 1, "", "all"], [678, 4, 1, "", "all_horizontal"], [679, 4, 1, "", "any"], [680, 4, 1, "", "any_horizontal"], [681, 4, 1, "", "apply"], [682, 4, 1, "", "approx_n_unique"], [683, 4, 1, "", "arange"], [684, 4, 1, "", "arctan2"], [685, 4, 1, "", "arctan2d"], [686, 4, 1, "", "arg_sort_by"], [687, 4, 1, "", "arg_where"], [85, 4, 1, "", "build_info"], [688, 4, 1, "", "coalesce"], [86, 4, 1, "", "collect_all"], [87, 4, 1, "", "collect_all_async"], [88, 4, 1, "", "concat"], [689, 4, 1, "", "concat_list"], [690, 4, 1, "", "concat_str"], [691, 4, 1, "", "corr"], [692, 4, 1, "", "count"], [693, 4, 1, "", "cov"], [694, 4, 1, "", "cum_count"], [695, 4, 1, "", "cum_fold"], [696, 4, 1, "", "cum_reduce"], [697, 4, 1, "", "cum_sum"], [698, 4, 1, "", "cum_sum_horizontal"], [699, 4, 1, "", "cumfold"], [700, 4, 1, "", "cumreduce"], [701, 4, 1, "", "cumsum"], [702, 4, 1, "", "cumsum_horizontal"], [703, 4, 1, "", "date"], [704, 4, 1, "", "date_range"], [705, 4, 1, "", "date_ranges"], [706, 4, 1, "", "datetime"], [707, 4, 1, "", "datetime_range"], [708, 4, 1, "", "datetime_ranges"], [89, 4, 1, "", "disable_string_cache"], [709, 4, 1, "", "duration"], [710, 4, 1, "", "element"], [90, 4, 1, "", "enable_string_cache"], [711, 4, 1, "", "exclude"], [712, 4, 1, "", "first"], [713, 4, 1, "", "fold"], [714, 4, 1, "", "format"], [105, 4, 1, "", "from_arrow"], [106, 4, 1, "", "from_dataframe"], [107, 4, 1, "", "from_dict"], [108, 4, 1, "", "from_dicts"], [715, 4, 1, "", "from_epoch"], [109, 4, 1, "", "from_numpy"], [110, 4, 1, "", "from_pandas"], [111, 4, 1, "", "from_records"], [112, 4, 1, "", "from_repr"], [113, 4, 1, "", "get_index_type"], [716, 4, 1, "", "groups"], [717, 4, 1, "", "head"], [718, 4, 1, "", "implode"], [719, 4, 1, "", "int_range"], [720, 4, 1, "", "int_ranges"], [721, 4, 1, "", "last"], [722, 4, 1, "", "lit"], [723, 4, 1, "", "map"], [724, 4, 1, "", "map_batches"], [725, 4, 1, "", "map_groups"], [726, 4, 1, "", "max"], [727, 4, 1, "", "max_horizontal"], [728, 4, 1, "", "mean"], [729, 4, 1, "", "median"], [730, 4, 1, "", "min"], [731, 4, 1, "", "min_horizontal"], [732, 4, 1, "", "n_unique"], [733, 4, 1, "", "ones"], [734, 4, 1, "", "quantile"], [115, 4, 1, "", "read_avro"], [116, 4, 1, "", "read_csv"], [117, 4, 1, "", "read_csv_batched"], [118, 4, 1, "", "read_database"], [119, 4, 1, "", "read_database_uri"], [120, 4, 1, "", "read_delta"], [121, 4, 1, "", "read_excel"], [122, 4, 1, "", "read_ipc"], [123, 4, 1, "", "read_ipc_schema"], [124, 4, 1, "", "read_ipc_stream"], [125, 4, 1, "", "read_json"], [126, 4, 1, "", "read_ndjson"], [127, 4, 1, "", "read_ods"], [128, 4, 1, "", "read_parquet"], [129, 4, 1, "", "read_parquet_schema"], [735, 4, 1, "", "reduce"], [736, 4, 1, "", "repeat"], [737, 4, 1, "", "rolling_corr"], [738, 4, 1, "", "rolling_cov"], [130, 4, 1, "", "scan_csv"], [131, 4, 1, "", "scan_delta"], [132, 4, 1, "", "scan_iceberg"], [133, 4, 1, "", "scan_ipc"], [134, 4, 1, "", "scan_ndjson"], [135, 4, 1, "", "scan_parquet"], [136, 4, 1, "", "scan_pyarrow_dataset"], [739, 4, 1, "", "select"], [873, 6, 0, "-", "selectors"], [137, 4, 1, "", "set_random_seed"], [138, 4, 1, "", "show_versions"], [740, 4, 1, "", "sql_expr"], [741, 4, 1, "", "std"], [742, 4, 1, "", "struct"], [743, 4, 1, "", "sum"], [744, 4, 1, "", "sum_horizontal"], [745, 4, 1, "", "tail"], [150, 4, 1, "", "threadpool_size"], [746, 4, 1, "", "time"], [747, 4, 1, "", "time_range"], [748, 4, 1, "", "time_ranges"], [151, 4, 1, "", "using_string_cache"], [749, 4, 1, "", "var"], [750, 4, 1, "", "when"], [751, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[154, 1, 1, "", "__dataframe__"], [155, 1, 1, "", "apply"], [156, 1, 1, "", "approx_n_unique"], [157, 1, 1, "", "bottom_k"], [158, 1, 1, "", "cast"], [159, 1, 1, "", "clear"], [160, 1, 1, "", "clone"], [161, 2, 1, "", "columns"], [162, 1, 1, "", "corr"], [163, 1, 1, "", "count"], [164, 1, 1, "", "describe"], [165, 1, 1, "", "drop"], [166, 1, 1, "", "drop_in_place"], [167, 1, 1, "", "drop_nulls"], [168, 2, 1, "", "dtypes"], [169, 1, 1, "", "equals"], [170, 1, 1, "", "estimated_size"], [171, 1, 1, "", "explode"], [172, 1, 1, "", "extend"], [173, 1, 1, "", "fill_nan"], [174, 1, 1, "", "fill_null"], [175, 1, 1, "", "filter"], [176, 1, 1, "", "find_idx_by_name"], [177, 2, 1, "", "flags"], [178, 1, 1, "", "fold"], [179, 1, 1, "", "frame_equal"], [180, 1, 1, "", "gather_every"], [181, 1, 1, "", "get_column"], [182, 1, 1, "", "get_column_index"], [183, 1, 1, "", "get_columns"], [184, 1, 1, "", "glimpse"], [185, 1, 1, "", "group_by"], [186, 1, 1, "", "group_by_dynamic"], [187, 1, 1, "", "group_by_rolling"], [188, 1, 1, "", "groupby"], [189, 1, 1, "", "groupby_dynamic"], [190, 1, 1, "", "groupby_rolling"], [191, 1, 1, "", "hash_rows"], [192, 1, 1, "", "head"], [193, 2, 1, "", "height"], [194, 1, 1, "", "hstack"], [195, 1, 1, "", "insert_at_idx"], [196, 1, 1, "", "insert_column"], [197, 1, 1, "", "interpolate"], [198, 1, 1, "", "is_duplicated"], [199, 1, 1, "", "is_empty"], [200, 1, 1, "", "is_unique"], [201, 1, 1, "", "item"], [202, 1, 1, "", "iter_columns"], [203, 1, 1, "", "iter_rows"], [204, 1, 1, "", "iter_slices"], [205, 1, 1, "", "join"], [206, 1, 1, "", "join_asof"], [207, 1, 1, "", "lazy"], [208, 1, 1, "", "limit"], [209, 1, 1, "", "map_rows"], [210, 1, 1, "", "max"], [211, 1, 1, "", "max_horizontal"], [212, 1, 1, "", "mean"], [213, 1, 1, "", "mean_horizontal"], [214, 1, 1, "", "median"], [215, 1, 1, "", "melt"], [216, 1, 1, "", "merge_sorted"], [217, 1, 1, "", "min"], [218, 1, 1, "", "min_horizontal"], [219, 1, 1, "", "n_chunks"], [220, 1, 1, "", "n_unique"], [221, 1, 1, "", "null_count"], [222, 1, 1, "", "partition_by"], [223, 1, 1, "", "pipe"], [224, 1, 1, "", "pivot"], [225, 2, 1, "", "plot"], [226, 1, 1, "", "product"], [227, 1, 1, "", "quantile"], [228, 1, 1, "", "rechunk"], [229, 1, 1, "", "rename"], [230, 1, 1, "", "replace"], [231, 1, 1, "", "replace_at_idx"], [232, 1, 1, "", "replace_column"], [233, 1, 1, "", "reverse"], [234, 1, 1, "", "rolling"], [235, 1, 1, "", "row"], [236, 1, 1, "", "rows"], [237, 1, 1, "", "rows_by_key"], [238, 1, 1, "", "sample"], [239, 2, 1, "", "schema"], [240, 1, 1, "", "select"], [241, 1, 1, "", "select_seq"], [242, 1, 1, "", "set_sorted"], [243, 2, 1, "", "shape"], [244, 1, 1, "", "shift"], [245, 1, 1, "", "shift_and_fill"], [246, 1, 1, "", "shrink_to_fit"], [247, 1, 1, "", "slice"], [248, 1, 1, "", "sort"], [249, 1, 1, "", "std"], [250, 1, 1, "", "sum"], [251, 1, 1, "", "sum_horizontal"], [252, 1, 1, "", "tail"], [253, 1, 1, "", "take_every"], [254, 1, 1, "", "to_arrow"], [255, 1, 1, "", "to_dict"], [256, 1, 1, "", "to_dicts"], [257, 1, 1, "", "to_dummies"], [258, 1, 1, "", "to_init_repr"], [259, 1, 1, "", "to_numpy"], [260, 1, 1, "", "to_pandas"], [261, 1, 1, "", "to_series"], [262, 1, 1, "", "to_struct"], [263, 1, 1, "", "top_k"], [264, 1, 1, "", "transpose"], [265, 1, 1, "", "unique"], [266, 1, 1, "", "unnest"], [267, 1, 1, "", "unstack"], [268, 1, 1, "", "update"], [269, 1, 1, "", "upsample"], [270, 1, 1, "", "var"], [271, 1, 1, "", "vstack"], [272, 2, 1, "", "width"], [273, 1, 1, "", "with_columns"], [274, 1, 1, "", "with_columns_seq"], [275, 1, 1, "", "with_row_count"], [276, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[306, 1, 1, "", "abs"], [307, 1, 1, "", "add"], [308, 1, 1, "", "agg_groups"], [309, 1, 1, "", "alias"], [310, 1, 1, "", "all"], [311, 1, 1, "", "and_"], [312, 1, 1, "", "any"], [313, 1, 1, "", "append"], [314, 1, 1, "", "apply"], [315, 1, 1, "", "approx_n_unique"], [316, 1, 1, "", "arccos"], [317, 1, 1, "", "arccosh"], [318, 1, 1, "", "arcsin"], [319, 1, 1, "", "arcsinh"], [320, 1, 1, "", "arctan"], [321, 1, 1, "", "arctanh"], [322, 1, 1, "", "arg_max"], [323, 1, 1, "", "arg_min"], [324, 1, 1, "", "arg_sort"], [325, 1, 1, "", "arg_true"], [326, 1, 1, "", "arg_unique"], [341, 1, 1, "", "backward_fill"], [347, 1, 1, "", "bottom_k"], [348, 1, 1, "", "cast"], [351, 1, 1, "", "cbrt"], [352, 1, 1, "", "ceil"], [353, 1, 1, "", "clip"], [354, 1, 1, "", "clip_max"], [355, 1, 1, "", "clip_min"], [356, 1, 1, "", "cos"], [357, 1, 1, "", "cosh"], [358, 1, 1, "", "cot"], [359, 1, 1, "", "count"], [360, 1, 1, "", "cum_count"], [361, 1, 1, "", "cum_max"], [362, 1, 1, "", "cum_min"], [363, 1, 1, "", "cum_prod"], [364, 1, 1, "", "cum_sum"], [365, 1, 1, "", "cumcount"], [366, 1, 1, "", "cummax"], [367, 1, 1, "", "cummin"], [368, 1, 1, "", "cumprod"], [369, 1, 1, "", "cumsum"], [370, 1, 1, "", "cumulative_eval"], [371, 1, 1, "", "cut"], [372, 1, 1, "", "degrees"], [373, 1, 1, "", "diff"], [374, 1, 1, "", "dot"], [375, 1, 1, "", "drop_nans"], [376, 1, 1, "", "drop_nulls"], [425, 1, 1, "", "entropy"], [426, 1, 1, "", "eq"], [427, 1, 1, "", "eq_missing"], [428, 1, 1, "", "ewm_mean"], [429, 1, 1, "", "ewm_std"], [430, 1, 1, "", "ewm_var"], [431, 1, 1, "", "exclude"], [432, 1, 1, "", "exp"], [433, 1, 1, "", "explode"], [434, 1, 1, "", "extend_constant"], [435, 1, 1, "", "fill_nan"], [436, 1, 1, "", "fill_null"], [437, 1, 1, "", "filter"], [438, 1, 1, "", "first"], [439, 1, 1, "", "flatten"], [440, 1, 1, "", "floor"], [441, 1, 1, "", "floordiv"], [442, 1, 1, "", "forward_fill"], [443, 1, 1, "", "from_json"], [444, 1, 1, "", "gather"], [445, 1, 1, "", "gather_every"], [446, 1, 1, "", "ge"], [447, 1, 1, "", "get"], [448, 1, 1, "", "gt"], [449, 1, 1, "", "hash"], [450, 1, 1, "", "head"], [451, 1, 1, "", "hist"], [452, 1, 1, "", "implode"], [453, 1, 1, "", "inspect"], [454, 1, 1, "", "interpolate"], [455, 1, 1, "", "is_between"], [456, 1, 1, "", "is_duplicated"], [457, 1, 1, "", "is_finite"], [458, 1, 1, "", "is_first"], [459, 1, 1, "", "is_first_distinct"], [460, 1, 1, "", "is_in"], [461, 1, 1, "", "is_infinite"], [462, 1, 1, "", "is_last"], [463, 1, 1, "", "is_last_distinct"], [464, 1, 1, "", "is_nan"], [465, 1, 1, "", "is_not"], [466, 1, 1, "", "is_not_nan"], [467, 1, 1, "", "is_not_null"], [468, 1, 1, "", "is_null"], [469, 1, 1, "", "is_unique"], [470, 1, 1, "", "keep_name"], [471, 1, 1, "", "kurtosis"], [472, 1, 1, "", "last"], [473, 1, 1, "", "le"], [474, 1, 1, "", "len"], [475, 1, 1, "", "limit"], [514, 1, 1, "", "log"], [515, 1, 1, "", "log10"], [516, 1, 1, "", "log1p"], [517, 1, 1, "", "lower_bound"], [518, 1, 1, "", "lt"], [519, 1, 1, "", "map"], [520, 1, 1, "", "map_alias"], [521, 1, 1, "", "map_batches"], [522, 1, 1, "", "map_dict"], [523, 1, 1, "", "map_elements"], [524, 1, 1, "", "max"], [525, 1, 1, "", "mean"], [526, 1, 1, "", "median"], [537, 1, 1, "", "min"], [538, 1, 1, "", "mod"], [539, 1, 1, "", "mode"], [540, 1, 1, "", "mul"], [541, 1, 1, "", "n_unique"], [548, 1, 1, "", "nan_max"], [549, 1, 1, "", "nan_min"], [550, 1, 1, "", "ne"], [551, 1, 1, "", "ne_missing"], [552, 1, 1, "", "not_"], [553, 1, 1, "", "null_count"], [554, 1, 1, "", "or_"], [555, 1, 1, "", "over"], [556, 1, 1, "", "pct_change"], [557, 1, 1, "", "peak_max"], [558, 1, 1, "", "peak_min"], [559, 1, 1, "", "pipe"], [560, 1, 1, "", "pow"], [561, 1, 1, "", "prefix"], [562, 1, 1, "", "product"], [563, 1, 1, "", "qcut"], [564, 1, 1, "", "quantile"], [565, 1, 1, "", "radians"], [566, 1, 1, "", "rank"], [567, 1, 1, "", "rechunk"], [568, 1, 1, "", "reinterpret"], [569, 1, 1, "", "repeat_by"], [570, 1, 1, "", "replace"], [571, 1, 1, "", "reshape"], [572, 1, 1, "", "reverse"], [573, 1, 1, "", "rle"], [574, 1, 1, "", "rle_id"], [575, 1, 1, "", "rolling"], [576, 1, 1, "", "rolling_apply"], [577, 1, 1, "", "rolling_map"], [578, 1, 1, "", "rolling_max"], [579, 1, 1, "", "rolling_mean"], [580, 1, 1, "", "rolling_median"], [581, 1, 1, "", "rolling_min"], [582, 1, 1, "", "rolling_quantile"], [583, 1, 1, "", "rolling_skew"], [584, 1, 1, "", "rolling_std"], [585, 1, 1, "", "rolling_sum"], [586, 1, 1, "", "rolling_var"], [587, 1, 1, "", "round"], [588, 1, 1, "", "round_sig_figs"], [589, 1, 1, "", "sample"], [590, 1, 1, "", "search_sorted"], [591, 1, 1, "", "set_sorted"], [592, 1, 1, "", "shift"], [593, 1, 1, "", "shift_and_fill"], [594, 1, 1, "", "shrink_dtype"], [595, 1, 1, "", "shuffle"], [596, 1, 1, "", "sign"], [597, 1, 1, "", "sin"], [598, 1, 1, "", "sinh"], [599, 1, 1, "", "skew"], [600, 1, 1, "", "slice"], [601, 1, 1, "", "sort"], [602, 1, 1, "", "sort_by"], [603, 1, 1, "", "sqrt"], [604, 1, 1, "", "std"], [659, 1, 1, "", "sub"], [660, 1, 1, "", "suffix"], [661, 1, 1, "", "sum"], [662, 1, 1, "", "tail"], [663, 1, 1, "", "take"], [664, 1, 1, "", "take_every"], [665, 1, 1, "", "tan"], [666, 1, 1, "", "tanh"], [667, 1, 1, "", "to_physical"], [668, 1, 1, "", "top_k"], [669, 1, 1, "", "truediv"], [670, 1, 1, "", "unique"], [671, 1, 1, "", "unique_counts"], [672, 1, 1, "", "upper_bound"], [673, 1, 1, "", "value_counts"], [674, 1, 1, "", "var"], [675, 1, 1, "", "where"], [676, 1, 1, "", "xor"]], "polars.Expr.arr": [[327, 1, 1, "", "all"], [328, 1, 1, "", "any"], [329, 1, 1, "", "arg_max"], [330, 1, 1, "", "arg_min"], [331, 1, 1, "", "first"], [332, 1, 1, "", "get"], [333, 1, 1, "", "last"], [334, 1, 1, "", "max"], [335, 1, 1, "", "min"], [336, 1, 1, "", "reverse"], [337, 1, 1, "", "sort"], [338, 1, 1, "", "sum"], [339, 1, 1, "", "to_list"], [340, 1, 1, "", "unique"]], "polars.Expr.bin": [[342, 1, 1, "", "contains"], [343, 1, 1, "", "decode"], [344, 1, 1, "", "encode"], [345, 1, 1, "", "ends_with"], [346, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[349, 1, 1, "", "get_categories"], [350, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[377, 1, 1, "", "base_utc_offset"], [378, 1, 1, "", "cast_time_unit"], [379, 1, 1, "", "combine"], [380, 1, 1, "", "convert_time_zone"], [381, 1, 1, "", "date"], [382, 1, 1, "", "datetime"], [383, 1, 1, "", "day"], [384, 1, 1, "", "days"], [385, 1, 1, "", "dst_offset"], [386, 1, 1, "", "epoch"], [387, 1, 1, "", "hour"], [388, 1, 1, "", "hours"], [389, 1, 1, "", "is_leap_year"], [390, 1, 1, "", "iso_year"], [391, 1, 1, "", "microsecond"], [392, 1, 1, "", "microseconds"], [393, 1, 1, "", "millisecond"], [394, 1, 1, "", "milliseconds"], [395, 1, 1, "", "minute"], [396, 1, 1, "", "minutes"], [397, 1, 1, "", "month"], [398, 1, 1, "", "month_end"], [399, 1, 1, "", "month_start"], [400, 1, 1, "", "nanosecond"], [401, 1, 1, "", "nanoseconds"], [402, 1, 1, "", "offset_by"], [403, 1, 1, "", "ordinal_day"], [404, 1, 1, "", "quarter"], [405, 1, 1, "", "replace_time_zone"], [406, 1, 1, "", "round"], [407, 1, 1, "", "second"], [408, 1, 1, "", "seconds"], [409, 1, 1, "", "strftime"], [410, 1, 1, "", "time"], [411, 1, 1, "", "timestamp"], [412, 1, 1, "", "to_string"], [413, 1, 1, "", "total_days"], [414, 1, 1, "", "total_hours"], [415, 1, 1, "", "total_microseconds"], [416, 1, 1, "", "total_milliseconds"], [417, 1, 1, "", "total_minutes"], [418, 1, 1, "", "total_nanoseconds"], [419, 1, 1, "", "total_seconds"], [420, 1, 1, "", "truncate"], [421, 1, 1, "", "week"], [422, 1, 1, "", "weekday"], [423, 1, 1, "", "with_time_unit"], [424, 1, 1, "", "year"]], "polars.Expr.list": [[476, 1, 1, "", "all"], [477, 1, 1, "", "any"], [478, 1, 1, "", "arg_max"], [479, 1, 1, "", "arg_min"], [480, 1, 1, "", "concat"], [481, 1, 1, "", "contains"], [482, 1, 1, "", "count_match"], [483, 1, 1, "", "count_matches"], [484, 1, 1, "", "diff"], [485, 1, 1, "", "drop_nulls"], [486, 1, 1, "", "eval"], [487, 1, 1, "", "explode"], [488, 1, 1, "", "first"], [489, 1, 1, "", "gather"], [490, 1, 1, "", "get"], [491, 1, 1, "", "head"], [492, 1, 1, "", "join"], [493, 1, 1, "", "last"], [494, 1, 1, "", "len"], [495, 1, 1, "", "lengths"], [496, 1, 1, "", "max"], [497, 1, 1, "", "mean"], [498, 1, 1, "", "min"], [499, 1, 1, "", "reverse"], [500, 1, 1, "", "sample"], [501, 1, 1, "", "set_difference"], [502, 1, 1, "", "set_intersection"], [503, 1, 1, "", "set_symmetric_difference"], [504, 1, 1, "", "set_union"], [505, 1, 1, "", "shift"], [506, 1, 1, "", "slice"], [507, 1, 1, "", "sort"], [508, 1, 1, "", "sum"], [509, 1, 1, "", "tail"], [510, 1, 1, "", "take"], [511, 1, 1, "", "to_array"], [512, 1, 1, "", "to_struct"], [513, 1, 1, "", "unique"]], "polars.Expr.meta": [[527, 1, 1, "", "eq"], [528, 1, 1, "", "has_multiple_outputs"], [529, 1, 1, "", "is_regex_projection"], [530, 1, 1, "", "ne"], [531, 1, 1, "", "output_name"], [532, 1, 1, "", "pop"], [533, 1, 1, "", "root_names"], [534, 1, 1, "", "tree_format"], [535, 1, 1, "", "undo_aliases"], [536, 1, 1, "", "write_json"]], "polars.Expr.name": [[542, 1, 1, "", "keep"], [543, 1, 1, "", "map"], [544, 1, 1, "", "prefix"], [545, 1, 1, "", "suffix"], [546, 1, 1, "", "to_lowercase"], [547, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[605, 1, 1, "", "concat"], [606, 1, 1, "", "contains"], [607, 1, 1, "", "contains_any"], [608, 1, 1, "", "count_match"], [609, 1, 1, "", "count_matches"], [610, 1, 1, "", "decode"], [611, 1, 1, "", "encode"], [612, 1, 1, "", "ends_with"], [613, 1, 1, "", "explode"], [614, 1, 1, "", "extract"], [615, 1, 1, "", "extract_all"], [616, 1, 1, "", "extract_groups"], [617, 1, 1, "", "json_decode"], [618, 1, 1, "", "json_extract"], [619, 1, 1, "", "json_path_match"], [620, 1, 1, "", "len_bytes"], [621, 1, 1, "", "len_chars"], [622, 1, 1, "", "lengths"], [623, 1, 1, "", "ljust"], [624, 1, 1, "", "lstrip"], [625, 1, 1, "", "n_chars"], [626, 1, 1, "", "pad_end"], [627, 1, 1, "", "pad_start"], [628, 1, 1, "", "parse_int"], [629, 1, 1, "", "replace"], [630, 1, 1, "", "replace_all"], [631, 1, 1, "", "replace_many"], [632, 1, 1, "", "reverse"], [633, 1, 1, "", "rjust"], [634, 1, 1, "", "rstrip"], [635, 1, 1, "", "slice"], [636, 1, 1, "", "split"], [637, 1, 1, "", "split_exact"], [638, 1, 1, "", "splitn"], [639, 1, 1, "", "starts_with"], [640, 1, 1, "", "strip"], [641, 1, 1, "", "strip_chars"], [642, 1, 1, "", "strip_chars_end"], [643, 1, 1, "", "strip_chars_start"], [644, 1, 1, "", "strip_prefix"], [645, 1, 1, "", "strip_suffix"], [646, 1, 1, "", "strptime"], [647, 1, 1, "", "to_date"], [648, 1, 1, "", "to_datetime"], [649, 1, 1, "", "to_decimal"], [650, 1, 1, "", "to_integer"], [651, 1, 1, "", "to_lowercase"], [652, 1, 1, "", "to_time"], [653, 1, 1, "", "to_titlecase"], [654, 1, 1, "", "to_uppercase"], [655, 1, 1, "", "zfill"]], "polars.Expr.struct": [[656, 1, 1, "", "field"], [657, 1, 1, "", "json_encode"], [658, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[775, 1, 1, "", "approx_n_unique"], [776, 1, 1, "", "bottom_k"], [777, 1, 1, "", "cache"], [778, 1, 1, "", "cast"], [779, 1, 1, "", "clear"], [780, 1, 1, "", "clone"], [781, 1, 1, "", "collect"], [782, 1, 1, "", "collect_async"], [783, 2, 1, "", "columns"], [784, 1, 1, "", "count"], [785, 1, 1, "", "deserialize"], [786, 1, 1, "", "drop"], [787, 1, 1, "", "drop_nulls"], [788, 2, 1, "", "dtypes"], [789, 1, 1, "", "explain"], [790, 1, 1, "", "explode"], [791, 1, 1, "", "fetch"], [792, 1, 1, "", "fill_nan"], [793, 1, 1, "", "fill_null"], [794, 1, 1, "", "filter"], [795, 1, 1, "", "first"], [796, 1, 1, "", "gather_every"], [797, 1, 1, "", "group_by"], [798, 1, 1, "", "group_by_dynamic"], [799, 1, 1, "", "group_by_rolling"], [800, 1, 1, "", "groupby"], [801, 1, 1, "", "groupby_dynamic"], [802, 1, 1, "", "groupby_rolling"], [803, 1, 1, "", "head"], [804, 1, 1, "", "inspect"], [805, 1, 1, "", "interpolate"], [806, 1, 1, "", "join"], [807, 1, 1, "", "join_asof"], [808, 1, 1, "", "last"], [809, 1, 1, "", "lazy"], [810, 1, 1, "", "limit"], [811, 1, 1, "", "map"], [812, 1, 1, "", "map_batches"], [813, 1, 1, "", "max"], [814, 1, 1, "", "mean"], [815, 1, 1, "", "median"], [816, 1, 1, "", "melt"], [817, 1, 1, "", "merge_sorted"], [818, 1, 1, "", "min"], [819, 1, 1, "", "null_count"], [820, 1, 1, "", "pipe"], [821, 1, 1, "", "profile"], [822, 1, 1, "", "quantile"], [823, 1, 1, "", "rename"], [824, 1, 1, "", "reverse"], [825, 1, 1, "", "rolling"], [826, 2, 1, "", "schema"], [827, 1, 1, "", "select"], [828, 1, 1, "", "select_seq"], [829, 1, 1, "", "serialize"], [830, 1, 1, "", "set_sorted"], [831, 1, 1, "", "shift"], [832, 1, 1, "", "shift_and_fill"], [833, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_parquet"], [834, 1, 1, "", "slice"], [835, 1, 1, "", "sort"], [836, 1, 1, "", "std"], [837, 1, 1, "", "sum"], [838, 1, 1, "", "tail"], [839, 1, 1, "", "take_every"], [840, 1, 1, "", "top_k"], [841, 1, 1, "", "unique"], [842, 1, 1, "", "unnest"], [843, 1, 1, "", "update"], [844, 1, 1, "", "var"], [845, 2, 1, "", "width"], [846, 1, 1, "", "with_columns"], [847, 1, 1, "", "with_columns_seq"], [848, 1, 1, "", "with_context"], [849, 1, 1, "", "with_row_count"], [850, 1, 1, "", "with_row_index"]], "polars.List": [[61, 1, 1, "", "__init__"]], "polars.Null": [[62, 1, 1, "", "__init__"]], "polars.Object": [[63, 1, 1, "", "__init__"]], "polars.SQLContext": [[1254, 1, 1, "", "__enter__"], [1254, 1, 1, "", "__exit__"], [1254, 1, 1, "", "__init__"], [64, 1, 1, "", "execute"], [65, 1, 1, "", "register"], [66, 1, 1, "", "register_globals"], [67, 1, 1, "", "register_many"], [68, 1, 1, "", "tables"], [69, 1, 1, "", "unregister"]], "polars.Series": [[875, 1, 1, "", "abs"], [876, 1, 1, "", "alias"], [877, 1, 1, "", "all"], [878, 1, 1, "", "any"], [879, 1, 1, "", "append"], [880, 1, 1, "", "apply"], [881, 1, 1, "", "arccos"], [882, 1, 1, "", "arccosh"], [883, 1, 1, "", "arcsin"], [884, 1, 1, "", "arcsinh"], [885, 1, 1, "", "arctan"], [886, 1, 1, "", "arctanh"], [887, 1, 1, "", "arg_max"], [888, 1, 1, "", "arg_min"], [889, 1, 1, "", "arg_sort"], [890, 1, 1, "", "arg_true"], [891, 1, 1, "", "arg_unique"], [911, 1, 1, "", "bottom_k"], [912, 1, 1, "", "cast"], [913, 3, 1, "", "cat"], [919, 1, 1, "", "cbrt"], [920, 1, 1, "", "ceil"], [921, 1, 1, "", "chunk_lengths"], [922, 1, 1, "", "clear"], [923, 1, 1, "", "clip"], [924, 1, 1, "", "clip_max"], [925, 1, 1, "", "clip_min"], [926, 1, 1, "", "clone"], [927, 1, 1, "", "cos"], [928, 1, 1, "", "cosh"], [929, 1, 1, "", "cot"], [930, 1, 1, "", "cum_max"], [931, 1, 1, "", "cum_min"], [932, 1, 1, "", "cum_prod"], [933, 1, 1, "", "cum_sum"], [934, 1, 1, "", "cummax"], [935, 1, 1, "", "cummin"], [936, 1, 1, "", "cumprod"], [937, 1, 1, "", "cumsum"], [938, 1, 1, "", "cumulative_eval"], [939, 1, 1, "", "cut"], [940, 1, 1, "", "describe"], [941, 1, 1, "", "diff"], [942, 1, 1, "", "dot"], [943, 1, 1, "", "drop_nans"], [944, 1, 1, "", "drop_nulls"], [945, 3, 1, "", "dt"], [998, 3, 1, "", "dtype"], [999, 1, 1, "", "entropy"], [1000, 1, 1, "", "equals"], [1001, 1, 1, "", "estimated_size"], [1002, 1, 1, "", "ewm_mean"], [1003, 1, 1, "", "ewm_std"], [1004, 1, 1, "", "ewm_var"], [1005, 1, 1, "", "exp"], [1006, 1, 1, "", "explode"], [1007, 1, 1, "", "extend"], [1008, 1, 1, "", "extend_constant"], [1009, 1, 1, "", "fill_nan"], [1010, 1, 1, "", "fill_null"], [1011, 1, 1, "", "filter"], [1012, 3, 1, "", "flags"], [1013, 1, 1, "", "floor"], [1014, 1, 1, "", "gather"], [1015, 1, 1, "", "gather_every"], [1016, 1, 1, "", "get_chunks"], [1017, 1, 1, "", "has_validity"], [1018, 1, 1, "", "hash"], [1019, 1, 1, "", "head"], [1020, 1, 1, "", "hist"], [1021, 1, 1, "", "implode"], [1022, 3, 1, "", "inner_dtype"], [1023, 1, 1, "", "interpolate"], [1024, 1, 1, "", "is_between"], [1025, 1, 1, "", "is_boolean"], [1026, 1, 1, "", "is_duplicated"], [1027, 1, 1, "", "is_empty"], [1028, 1, 1, "", "is_finite"], [1029, 1, 1, "", "is_first"], [1030, 1, 1, "", "is_first_distinct"], [1031, 1, 1, "", "is_float"], [1032, 1, 1, "", "is_in"], [1033, 1, 1, "", "is_infinite"], [1034, 1, 1, "", "is_integer"], [1035, 1, 1, "", "is_last"], [1036, 1, 1, "", "is_last_distinct"], [1037, 1, 1, "", "is_nan"], [1038, 1, 1, "", "is_not_nan"], [1039, 1, 1, "", "is_not_null"], [1040, 1, 1, "", "is_null"], [1041, 1, 1, "", "is_numeric"], [1042, 1, 1, "", "is_sorted"], [1043, 1, 1, "", "is_temporal"], [1044, 1, 1, "", "is_unique"], [1045, 1, 1, "", "is_utf8"], [1046, 1, 1, "", "item"], [1047, 1, 1, "", "kurtosis"], [1048, 1, 1, "", "len"], [1049, 1, 1, "", "limit"], [1050, 3, 1, "", "list"], [1089, 1, 1, "", "log"], [1090, 1, 1, "", "log10"], [1091, 1, 1, "", "log1p"], [1092, 1, 1, "", "lower_bound"], [1093, 1, 1, "", "map_dict"], [1094, 1, 1, "", "map_elements"], [1095, 1, 1, "", "max"], [1096, 1, 1, "", "mean"], [1097, 1, 1, "", "median"], [1098, 1, 1, "", "min"], [1099, 1, 1, "", "mode"], [1100, 1, 1, "", "n_chunks"], [1101, 1, 1, "", "n_unique"], [1102, 3, 1, "", "name"], [1103, 1, 1, "", "nan_max"], [1104, 1, 1, "", "nan_min"], [1105, 1, 1, "", "new_from_index"], [1106, 1, 1, "", "not_"], [1107, 1, 1, "", "null_count"], [1108, 1, 1, "", "pct_change"], [1109, 1, 1, "", "peak_max"], [1110, 1, 1, "", "peak_min"], [1111, 3, 1, "", "plot"], [1112, 1, 1, "", "product"], [1113, 1, 1, "", "qcut"], [1114, 1, 1, "", "quantile"], [1115, 1, 1, "", "rank"], [1116, 1, 1, "", "rechunk"], [1117, 1, 1, "", "reinterpret"], [1118, 1, 1, "", "rename"], [1119, 1, 1, "", "replace"], [1120, 1, 1, "", "reshape"], [1121, 1, 1, "", "reverse"], [1122, 1, 1, "", "rle"], [1123, 1, 1, "", "rle_id"], [1124, 1, 1, "", "rolling_apply"], [1125, 1, 1, "", "rolling_map"], [1126, 1, 1, "", "rolling_max"], [1127, 1, 1, "", "rolling_mean"], [1128, 1, 1, "", "rolling_median"], [1129, 1, 1, "", "rolling_min"], [1130, 1, 1, "", "rolling_quantile"], [1131, 1, 1, "", "rolling_skew"], [1132, 1, 1, "", "rolling_std"], [1133, 1, 1, "", "rolling_sum"], [1134, 1, 1, "", "rolling_var"], [1135, 1, 1, "", "round"], [1136, 1, 1, "", "round_sig_figs"], [1137, 1, 1, "", "sample"], [1138, 1, 1, "", "scatter"], [1139, 1, 1, "", "search_sorted"], [1140, 1, 1, "", "series_equal"], [1141, 1, 1, "", "set"], [1142, 1, 1, "", "set_at_idx"], [1143, 1, 1, "", "set_sorted"], [1144, 3, 1, "", "shape"], [1145, 1, 1, "", "shift"], [1146, 1, 1, "", "shift_and_fill"], [1147, 1, 1, "", "shrink_dtype"], [1148, 1, 1, "", "shrink_to_fit"], [1149, 1, 1, "", "shuffle"], [1150, 1, 1, "", "sign"], [1151, 1, 1, "", "sin"], [1152, 1, 1, "", "sinh"], [1153, 1, 1, "", "skew"], [1154, 1, 1, "", "slice"], [1155, 1, 1, "", "sort"], [1156, 1, 1, "", "sqrt"], [1157, 1, 1, "", "std"], [1158, 3, 1, "", "str"], [1216, 1, 1, "", "sum"], [1217, 1, 1, "", "tail"], [1218, 1, 1, "", "take"], [1219, 1, 1, "", "take_every"], [1220, 1, 1, "", "tan"], [1221, 1, 1, "", "tanh"], [1222, 1, 1, "", "to_arrow"], [1223, 1, 1, "", "to_dummies"], [1224, 1, 1, "", "to_frame"], [1225, 1, 1, "", "to_init_repr"], [1226, 1, 1, "", "to_list"], [1227, 1, 1, "", "to_numpy"], [1228, 1, 1, "", "to_pandas"], [1229, 1, 1, "", "to_physical"], [1230, 1, 1, "", "top_k"], [1231, 1, 1, "", "unique"], [1232, 1, 1, "", "unique_counts"], [1233, 1, 1, "", "upper_bound"], [1234, 1, 1, "", "value_counts"], [1235, 1, 1, "", "var"], [1236, 1, 1, "", "view"], [1237, 1, 1, "", "zip_with"]], "polars.Series.arr": [[892, 1, 1, "", "all"], [893, 1, 1, "", "any"], [894, 1, 1, "", "arg_max"], [895, 1, 1, "", "arg_min"], [896, 1, 1, "", "first"], [897, 1, 1, "", "get"], [898, 1, 1, "", "last"], [899, 1, 1, "", "max"], [900, 1, 1, "", "min"], [901, 1, 1, "", "reverse"], [902, 1, 1, "", "sort"], [903, 1, 1, "", "sum"], [904, 1, 1, "", "to_list"], [905, 1, 1, "", "unique"]], "polars.Series.bin": [[906, 1, 1, "", "contains"], [907, 1, 1, "", "decode"], [908, 1, 1, "", "encode"], [909, 1, 1, "", "ends_with"], [910, 1, 1, "", "starts_with"]], "polars.Series.cat": [[914, 1, 1, "", "get_categories"], [915, 1, 1, "", "is_local"], [916, 1, 1, "", "set_ordering"], [917, 1, 1, "", "to_local"], [918, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[946, 1, 1, "", "base_utc_offset"], [947, 1, 1, "", "cast_time_unit"], [948, 1, 1, "", "combine"], [949, 1, 1, "", "convert_time_zone"], [950, 1, 1, "", "date"], [951, 1, 1, "", "datetime"], [952, 1, 1, "", "day"], [953, 1, 1, "", "days"], [954, 1, 1, "", "dst_offset"], [955, 1, 1, "", "epoch"], [956, 1, 1, "", "hour"], [957, 1, 1, "", "hours"], [958, 1, 1, "", "is_leap_year"], [959, 1, 1, "", "iso_year"], [960, 1, 1, "", "max"], [961, 1, 1, "", "mean"], [962, 1, 1, "", "median"], [963, 1, 1, "", "microsecond"], [964, 1, 1, "", "microseconds"], [965, 1, 1, "", "millisecond"], [966, 1, 1, "", "milliseconds"], [967, 1, 1, "", "min"], [968, 1, 1, "", "minute"], [969, 1, 1, "", "minutes"], [970, 1, 1, "", "month"], [971, 1, 1, "", "month_end"], [972, 1, 1, "", "month_start"], [973, 1, 1, "", "nanosecond"], [974, 1, 1, "", "nanoseconds"], [975, 1, 1, "", "offset_by"], [976, 1, 1, "", "ordinal_day"], [977, 1, 1, "", "quarter"], [978, 1, 1, "", "replace_time_zone"], [979, 1, 1, "", "round"], [980, 1, 1, "", "second"], [981, 1, 1, "", "seconds"], [982, 1, 1, "", "strftime"], [983, 1, 1, "", "time"], [984, 1, 1, "", "timestamp"], [985, 1, 1, "", "to_string"], [986, 1, 1, "", "total_days"], [987, 1, 1, "", "total_hours"], [988, 1, 1, "", "total_microseconds"], [989, 1, 1, "", "total_milliseconds"], [990, 1, 1, "", "total_minutes"], [991, 1, 1, "", "total_nanoseconds"], [992, 1, 1, "", "total_seconds"], [993, 1, 1, "", "truncate"], [994, 1, 1, "", "week"], [995, 1, 1, "", "weekday"], [996, 1, 1, "", "with_time_unit"], [997, 1, 1, "", "year"]], "polars.Series.list": [[1051, 1, 1, "", "all"], [1052, 1, 1, "", "any"], [1053, 1, 1, "", "arg_max"], [1054, 1, 1, "", "arg_min"], [1055, 1, 1, "", "concat"], [1056, 1, 1, "", "contains"], [1057, 1, 1, "", "count_match"], [1058, 1, 1, "", "count_matches"], [1059, 1, 1, "", "diff"], [1060, 1, 1, "", "drop_nulls"], [1061, 1, 1, "", "eval"], [1062, 1, 1, "", "explode"], [1063, 1, 1, "", "first"], [1064, 1, 1, "", "gather"], [1065, 1, 1, "", "get"], [1066, 1, 1, "", "head"], [1067, 1, 1, "", "join"], [1068, 1, 1, "", "last"], [1069, 1, 1, "", "len"], [1070, 1, 1, "", "lengths"], [1071, 1, 1, "", "max"], [1072, 1, 1, "", "mean"], [1073, 1, 1, "", "min"], [1074, 1, 1, "", "reverse"], [1075, 1, 1, "", "sample"], [1076, 1, 1, "", "set_difference"], [1077, 1, 1, "", "set_intersection"], [1078, 1, 1, "", "set_symmetric_difference"], [1079, 1, 1, "", "set_union"], [1080, 1, 1, "", "shift"], [1081, 1, 1, "", "slice"], [1082, 1, 1, "", "sort"], [1083, 1, 1, "", "sum"], [1084, 1, 1, "", "tail"], [1085, 1, 1, "", "take"], [1086, 1, 1, "", "to_array"], [1087, 1, 1, "", "to_struct"], [1088, 1, 1, "", "unique"]], "polars.Series.str": [[1159, 1, 1, "", "concat"], [1160, 1, 1, "", "contains"], [1161, 1, 1, "", "contains_any"], [1162, 1, 1, "", "count_match"], [1163, 1, 1, "", "count_matches"], [1164, 1, 1, "", "decode"], [1165, 1, 1, "", "encode"], [1166, 1, 1, "", "ends_with"], [1167, 1, 1, "", "explode"], [1168, 1, 1, "", "extract"], [1169, 1, 1, "", "extract_all"], [1170, 1, 1, "", "extract_groups"], [1171, 1, 1, "", "json_decode"], [1172, 1, 1, "", "json_extract"], [1173, 1, 1, "", "json_path_match"], [1174, 1, 1, "", "len_bytes"], [1175, 1, 1, "", "len_chars"], [1176, 1, 1, "", "lengths"], [1177, 1, 1, "", "ljust"], [1178, 1, 1, "", "lstrip"], [1179, 1, 1, "", "n_chars"], [1180, 1, 1, "", "pad_end"], [1181, 1, 1, "", "pad_start"], [1182, 1, 1, "", "parse_int"], [1183, 1, 1, "", "replace"], [1184, 1, 1, "", "replace_all"], [1185, 1, 1, "", "replace_many"], [1186, 1, 1, "", "reverse"], [1187, 1, 1, "", "rjust"], [1188, 1, 1, "", "rstrip"], [1189, 1, 1, "", "slice"], [1190, 1, 1, "", "split"], [1191, 1, 1, "", "split_exact"], [1192, 1, 1, "", "splitn"], [1193, 1, 1, "", "starts_with"], [1194, 1, 1, "", "strip"], [1195, 1, 1, "", "strip_chars"], [1196, 1, 1, "", "strip_chars_end"], [1197, 1, 1, "", "strip_chars_start"], [1198, 1, 1, "", "strip_prefix"], [1199, 1, 1, "", "strip_suffix"], [1200, 1, 1, "", "strptime"], [1201, 1, 1, "", "to_date"], [1202, 1, 1, "", "to_datetime"], [1203, 1, 1, "", "to_decimal"], [1204, 1, 1, "", "to_integer"], [1205, 1, 1, "", "to_lowercase"], [1206, 1, 1, "", "to_time"], [1207, 1, 1, "", "to_titlecase"], [1208, 1, 1, "", "to_uppercase"], [1209, 1, 1, "", "zfill"]], "polars.Series.struct": [[1210, 1, 1, "", "field"], [1211, 3, 1, "", "fields"], [1212, 1, 1, "", "json_encode"], [1213, 1, 1, "", "rename_fields"], [1214, 3, 1, "", "schema"], [1215, 1, 1, "", "unnest"]], "polars.String": [[70, 1, 1, "", "__init__"]], "polars.StringCache": [[71, 1, 1, "", "__init__"]], "polars.Struct": [[72, 1, 1, "", "__init__"]], "polars.Time": [[73, 1, 1, "", "__init__"]], "polars.UInt16": [[74, 1, 1, "", "__init__"]], "polars.UInt32": [[75, 1, 1, "", "__init__"]], "polars.UInt64": [[76, 1, 1, "", "__init__"]], "polars.UInt8": [[77, 1, 1, "", "__init__"]], "polars.Unknown": [[78, 1, 1, "", "__init__"]], "polars.api": [[81, 4, 1, "", "register_dataframe_namespace"], [82, 4, 1, "", "register_expr_namespace"], [83, 4, 1, "", "register_lazyframe_namespace"], [84, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[277, 1, 1, "", "__iter__"], [278, 1, 1, "", "agg"], [279, 1, 1, "", "all"], [280, 1, 1, "", "apply"], [281, 1, 1, "", "count"], [282, 1, 1, "", "first"], [283, 1, 1, "", "head"], [284, 1, 1, "", "last"], [285, 1, 1, "", "map_groups"], [286, 1, 1, "", "max"], [287, 1, 1, "", "mean"], [288, 1, 1, "", "median"], [289, 1, 1, "", "min"], [290, 1, 1, "", "n_unique"], [291, 1, 1, "", "quantile"], [292, 1, 1, "", "sum"], [293, 1, 1, "", "tail"]], "polars.exceptions": [[91, 5, 1, "", "ArrowError"], [92, 5, 1, "", "ColumnNotFoundError"], [93, 5, 1, "", "ComputeError"], [94, 5, 1, "", "DuplicateError"], [95, 5, 1, "", "InvalidOperationError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "PolarsPanicError"], [99, 5, 1, "", "RowsError"], [100, 5, 1, "", "SchemaError"], [101, 5, 1, "", "SchemaFieldNotFoundError"], [102, 5, 1, "", "ShapeError"], [103, 5, 1, "", "StructFieldNotFoundError"], [104, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[114, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[851, 1, 1, "", "agg"], [852, 1, 1, "", "all"], [853, 1, 1, "", "apply"], [854, 1, 1, "", "count"], [855, 1, 1, "", "first"], [856, 1, 1, "", "head"], [857, 1, 1, "", "last"], [858, 1, 1, "", "map_groups"], [859, 1, 1, "", "max"], [860, 1, 1, "", "mean"], [861, 1, 1, "", "median"], [862, 1, 1, "", "min"], [863, 1, 1, "", "n_unique"], [864, 1, 1, "", "quantile"], [865, 1, 1, "", "sum"], [866, 1, 1, "", "tail"]], "polars.selectors": [[873, 4, 1, "", "all"], [873, 4, 1, "", "by_dtype"], [873, 4, 1, "", "by_name"], [873, 4, 1, "", "categorical"], [873, 4, 1, "", "contains"], [873, 4, 1, "", "date"], [873, 4, 1, "", "datetime"], [873, 4, 1, "", "duration"], [873, 4, 1, "", "ends_with"], [873, 4, 1, "", "expand_selector"], [873, 4, 1, "", "first"], [873, 4, 1, "", "float"], [873, 4, 1, "", "integer"], [873, 4, 1, "", "is_selector"], [873, 4, 1, "", "last"], [873, 4, 1, "", "matches"], [873, 4, 1, "", "numeric"], [873, 4, 1, "", "starts_with"], [873, 4, 1, "", "string"], [873, 4, 1, "", "temporal"], [873, 4, 1, "", "time"]], "polars.testing": [[139, 4, 1, "", "assert_frame_equal"], [140, 4, 1, "", "assert_frame_not_equal"], [141, 4, 1, "", "assert_series_equal"], [142, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[143, 0, 1, "", "column"], [144, 4, 1, "", "columns"], [145, 4, 1, "", "create_list_strategy"], [146, 4, 1, "", "dataframes"], [147, 4, 1, "", "load_profile"], [148, 4, 1, "", "series"], [149, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[143, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 172, 1007], "api": [1, 81, 82, 83, 84, 772], "provid": 1, "new": 1, "function": [1, 152, 759, 771, 873], "avail": 1, "registr": 1, "exampl": [1, 302, 873, 1250, 1255], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1255], "arrai": [2, 752, 1238], "binari": [3, 753, 766, 1240], "boolean": [4, 754, 1241], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 152], "activate_decim": 6, "load": [7, 152], "load_from_fil": 8, "restore_default": 9, "save": [10, 152], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 152], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 146, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 299], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 536], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 381, 703, 950], "datetim": [48, 382, 706, 951], "decim": 49, "durat": [50, 709], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 870], "sink_csv": 58, "sink_ipc": 59, "sink_parquet": 60, "list": [61, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 761, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1247], "null": 62, "object": 63, "sqlcontext": [64, 65, 66, 67, 68, 69], "execut": 64, "regist": 65, "register_glob": 66, "register_mani": 67, "tabl": 68, "unregist": 69, "string": [70, 767, 1251], "stringcach": [71, 771], "struct": [72, 656, 657, 658, 742, 768, 1210, 1211, 1212, 1213, 1214, 1215, 1252], "time": [73, 410, 746, 983], "uint16": 74, "uint32": 75, "uint64": 76, "uint8": 77, "unknown": 78, "utf8": 79, "align_fram": 80, "register_dataframe_namespac": 81, "register_expr_namespac": 82, "register_lazyframe_namespac": 83, "register_series_namespac": 84, "build_info": 85, "collect_al": 86, "collect_all_async": 87, "concat": [88, 480, 605, 1055, 1159], "disable_string_cach": 89, "enable_string_cach": 90, "except": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 304], "arrowerror": 91, "columnnotfounderror": 92, "computeerror": 93, "duplicateerror": 94, "invalidoperationerror": 95, "nodataerror": 96, "norowsreturnederror": 97, "polarspanicerror": 98, "rowserror": 99, "schemaerror": 100, "schemafieldnotfounderror": 101, "shapeerror": 102, "structfieldnotfounderror": 103, "toomanyrowsreturnederror": 104, "from_arrow": 105, "from_datafram": 106, "from_dict": [107, 108], "from_numpi": 109, "from_panda": 110, "from_record": 111, "from_repr": 112, "get_index_typ": 113, "io": 114, "csv": [114, 773], "batched_read": 114, "batchedcsvread": [114, 773], "next_batch": 114, "read_avro": 115, "read_csv": 116, "read_csv_batch": 117, "read_databas": 118, "read_database_uri": 119, "read_delta": 120, "read_excel": 121, "read_ipc": 122, "read_ipc_schema": 123, "read_ipc_stream": 124, "read_json": 125, "read_ndjson": 126, "read_od": 127, "read_parquet": 128, "read_parquet_schema": 129, "scan_csv": 130, "scan_delta": 131, "scan_iceberg": 132, "scan_ipc": 133, "scan_ndjson": 134, "scan_parquet": 135, "scan_pyarrow_dataset": 136, "set_random_se": 137, "show_vers": 138, "test": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 1255], "assert_frame_equ": 139, "assert_frame_not_equ": 140, "assert_series_equ": 141, "assert_series_not_equ": 142, "parametr": [143, 144, 145, 146, 147, 148, 149, 1255], "column": [143, 144, 161, 757, 783], "create_list_strategi": 145, "load_profil": 147, "seri": [148, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1246], "set_profil": 149, "threadpool_s": 150, "using_string_cach": 151, "option": 152, "current": 152, "us": 152, "context": 152, "manag": 152, "decor": 152, "aggreg": [153, 305, 774, 874], "__dataframe__": 154, "appli": [155, 280, 314, 681, 853, 880], "approx_n_uniqu": [156, 315, 682, 775], "bottom_k": [157, 347, 776, 911], "cast": [158, 348, 778, 912], "clear": [159, 779, 922], "clone": [160, 780, 926], "corr": [162, 691], "count": [163, 281, 359, 692, 784, 854], "describ": [164, 940], "drop": [165, 786], "drop_in_plac": 166, "drop_nul": [167, 376, 485, 787, 944, 1060], "dtype": [168, 788, 998], "equal": [169, 1000], "estimated_s": [170, 1001], "explod": [171, 433, 487, 613, 790, 1006, 1062, 1167], "fill_nan": [173, 435, 792, 1009], "fill_nul": [174, 436, 793, 1010], "filter": [175, 437, 794, 1011], "find_idx_by_nam": 176, "flag": [177, 1012], "fold": [178, 713], "frame_equ": 179, "gather_everi": [180, 445, 796, 1015], "get_column": [181, 183], "get_column_index": 182, "glimps": 184, "group_bi": [185, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 797, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866], "group_by_dynam": [186, 798], "group_by_rol": [187, 799], "groupbi": [188, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 298, 800, 869], "groupby_dynam": [189, 801], "groupby_rol": [190, 802], "hash_row": 191, "head": [192, 283, 450, 491, 717, 803, 856, 1019, 1066], "height": 193, "hstack": 194, "insert_at_idx": 195, "insert_column": 196, "interpol": [197, 454, 805, 1023], "is_dupl": [198, 456, 1026], "is_empti": [199, 1027], "is_uniqu": [200, 469, 1044], "item": [201, 1046], "iter_column": 202, "iter_row": 203, "iter_slic": 204, "join": [205, 492, 806, 1067], "join_asof": [206, 807], "lazi": [207, 809], "limit": [208, 475, 810, 1049], "map_row": 209, "max": [210, 286, 334, 496, 524, 726, 813, 859, 899, 960, 1071, 1095], "max_horizont": [211, 727], "mean": [212, 287, 497, 525, 728, 814, 860, 961, 1072, 1096], "mean_horizont": 213, "median": [214, 288, 526, 729, 815, 861, 962, 1097], "melt": [215, 816], "merge_sort": [216, 817], "min": [217, 289, 335, 498, 537, 730, 818, 862, 900, 967, 1073, 1098], "min_horizont": [218, 731], "n_chunk": [219, 1100], "n_uniqu": [220, 290, 541, 732, 863, 1101], "null_count": [221, 553, 819, 1107], "partition_bi": 222, "pipe": [223, 559, 820], "pivot": 224, "plot": [225, 302, 1111, 1250], "product": [226, 562, 1112], "quantil": [227, 291, 564, 734, 822, 864, 1114], "rechunk": [228, 567, 1116], "renam": [229, 823, 1118], "replac": [230, 570, 629, 1119, 1183], "replace_at_idx": 231, "replace_column": 232, "revers": [233, 336, 499, 572, 632, 824, 901, 1074, 1121, 1186], "roll": [234, 575, 825], "row": [235, 236], "rows_by_kei": 237, "sampl": [238, 500, 589, 1075, 1137], "schema": [239, 826, 1214], "select": [240, 301, 739, 764, 827, 872, 1249], "select_seq": [241, 828], "set_sort": [242, 591, 830, 1143], "shape": [243, 1144], "shift": [244, 505, 592, 831, 1080, 1145], "shift_and_fil": [245, 593, 832, 1146], "shrink_to_fit": [246, 1148], "slice": [247, 506, 600, 635, 834, 1081, 1154, 1189], "sort": [248, 337, 507, 601, 835, 902, 1082, 1155], "std": [249, 604, 741, 836, 1157], "sum": [250, 292, 338, 508, 661, 743, 837, 865, 903, 1083, 1216], "sum_horizont": [251, 744], "tail": [252, 293, 509, 662, 745, 838, 866, 1084, 1217], "take_everi": [253, 664, 839, 1219], "to_arrow": [254, 1222], "to_dict": [255, 256], "to_dummi": [257, 1223], "to_init_repr": [258, 1225], "to_numpi": [259, 1227], "to_panda": [260, 1228], "to_seri": 261, "to_struct": [262, 512, 1087], "top_k": [263, 668, 840, 1230], "transpos": 264, "uniqu": [265, 340, 513, 670, 841, 905, 1088, 1231], "unnest": [266, 842, 1215], "unstack": 267, "updat": [268, 843], "upsampl": 269, "var": [270, 674, 749, 844, 1235], "vstack": 271, "width": [272, 845], "with_column": [273, 846], "with_columns_seq": [274, 847], "with_row_count": [275, 849], "with_row_index": [276, 850], "__iter__": 277, "agg": [278, 851], "all": [279, 310, 327, 476, 677, 852, 877, 892, 1051], "first": [282, 331, 438, 488, 712, 795, 855, 896, 1063], "last": [284, 333, 472, 493, 721, 808, 857, 898, 1068], "map_group": [285, 725, 858], "attribut": [294, 867, 1239], "comput": [295, 758, 1243], "descript": [296, 868, 1244], "export": [297, 1245], "miscellan": [300, 763, 771, 871, 1248], "manipul": [301, 764, 872, 1249], "data": 303, "type": 303, "numer": [303, 766], "tempor": [303, 769, 1253], "nest": 303, "other": 303, "expr": [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676], "ab": [306, 875], "add": 307, "agg_group": 308, "alia": [309, 876], "and_": 311, "ani": [312, 328, 477, 679, 878, 893, 1052], "append": [313, 879], "arcco": [316, 881], "arccosh": [317, 882], "arcsin": [318, 883], "arcsinh": [319, 884], "arctan": [320, 885], "arctanh": [321, 886], "arg_max": [322, 329, 478, 887, 894, 1053], "arg_min": [323, 330, 479, 888, 895, 1054], "arg_sort": [324, 889], "arg_tru": [325, 890], "arg_uniqu": [326, 891], "arr": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905], "get": [332, 447, 490, 897, 1065], "to_list": [339, 904, 1226], "backward_fil": 341, "bin": [342, 343, 344, 345, 346, 906, 907, 908, 909, 910], "contain": [342, 481, 606, 906, 1056, 1160], "decod": [343, 610, 907, 1164], "encod": [344, 611, 908, 1165], "ends_with": [345, 612, 909, 1166], "starts_with": [346, 639, 910, 1193], "cat": [349, 350, 913, 914, 915, 916, 917, 918], "get_categori": [349, 914], "set_ord": [350, 916], "cbrt": [351, 919], "ceil": [352, 920], "clip": [353, 923], "clip_max": [354, 924], "clip_min": [355, 925], "co": [356, 927], "cosh": [357, 928], "cot": [358, 929], "cum_count": [360, 694], "cum_max": [361, 930], "cum_min": [362, 931], "cum_prod": [363, 932], "cum_sum": [364, 697, 933], "cumcount": 365, "cummax": [366, 934], "cummin": [367, 935], "cumprod": [368, 936], "cumsum": [369, 701, 937], "cumulative_ev": [370, 938], "cut": [371, 939], "degre": 372, "diff": [373, 484, 941, 1059], "dot": [374, 942], "drop_nan": [375, 943], "dt": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997], "base_utc_offset": [377, 946], "cast_time_unit": [378, 947], "combin": [379, 948], "convert_time_zon": [380, 949], "dai": [383, 384, 952, 953], "dst_offset": [385, 954], "epoch": [386, 955], "hour": [387, 388, 956, 957], "is_leap_year": [389, 958], "iso_year": [390, 959], "microsecond": [391, 392, 963, 964], "millisecond": [393, 394, 965, 966], "minut": [395, 396, 968, 969], "month": [397, 970], "month_end": [398, 971], "month_start": [399, 972], "nanosecond": [400, 401, 973, 974], "offset_bi": [402, 975], "ordinal_dai": [403, 976], "quarter": [404, 977], "replace_time_zon": [405, 978], "round": [406, 587, 979, 1135], "second": [407, 408, 980, 981], "strftime": [409, 982], "timestamp": [411, 984], "to_str": [412, 985], "total_dai": [413, 986], "total_hour": [414, 987], "total_microsecond": [415, 988], "total_millisecond": [416, 989], "total_minut": [417, 990], "total_nanosecond": [418, 991], "total_second": [419, 992], "truncat": [420, 993], "week": [421, 994], "weekdai": [422, 995], "with_time_unit": [423, 996], "year": [424, 997], "entropi": [425, 999], "eq": [426, 527], "eq_miss": 427, "ewm_mean": [428, 1002], "ewm_std": [429, 1003], "ewm_var": [430, 1004], "exclud": [431, 711], "exp": [432, 1005], "extend_const": [434, 1008], "flatten": 439, "floor": [440, 1013], "floordiv": 441, "forward_fil": 442, "from_json": 443, "gather": [444, 489, 1014, 1064], "ge": 446, "gt": 448, "hash": [449, 1018], "hist": [451, 1020], "implod": [452, 718, 1021], "inspect": [453, 804], "is_between": [455, 1024], "is_finit": [457, 1028], "is_first": [458, 1029], "is_first_distinct": [459, 1030], "is_in": [460, 1032], "is_infinit": [461, 1033], "is_last": [462, 1035], "is_last_distinct": [463, 1036], "is_nan": [464, 1037], "is_not": 465, "is_not_nan": [466, 1038], "is_not_nul": [467, 1039], "is_nul": [468, 1040], "keep_nam": 470, "kurtosi": [471, 1047], "le": 473, "len": [474, 494, 1048, 1069], "count_match": [482, 483, 608, 609, 1057, 1058, 1162, 1163], "eval": [486, 1061], "length": [495, 622, 1070, 1176], "set_differ": [501, 1076], "set_intersect": [502, 1077], "set_symmetric_differ": [503, 1078], "set_union": [504, 1079], "take": [510, 663, 1085, 1218], "to_arrai": [511, 1086], "log": [514, 1089], "log10": [515, 1090], "log1p": [516, 1091], "lower_bound": [517, 1092], "lt": 518, "map": [519, 543, 723, 811], "map_alia": 520, "map_batch": [521, 724, 812], "map_dict": [522, 1093], "map_el": [523, 1094], "meta": [527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 762], "has_multiple_output": 528, "is_regex_project": 529, "ne": [530, 550], "output_nam": 531, "pop": 532, "root_nam": 533, "tree_format": 534, "undo_alias": 535, "mod": 538, "mode": [539, 1099], "mul": 540, "name": [542, 543, 544, 545, 546, 547, 757, 765, 1102], "keep": 542, "prefix": [544, 561], "suffix": [545, 660], "to_lowercas": [546, 651, 1205], "to_uppercas": [547, 654, 1208], "nan_max": [548, 1103], "nan_min": [549, 1104], "ne_miss": 551, "not_": [552, 1106], "or_": 554, "over": 555, "pct_chang": [556, 1108], "peak_max": [557, 1109], "peak_min": [558, 1110], "pow": 560, "qcut": [563, 1113], "radian": 565, "rank": [566, 1115], "reinterpret": [568, 1117], "repeat_bi": 569, "reshap": [571, 1120], "rle": [573, 1122], "rle_id": [574, 1123], "rolling_appli": [576, 1124], "rolling_map": [577, 1125], "rolling_max": [578, 1126], "rolling_mean": [579, 1127], "rolling_median": [580, 1128], "rolling_min": [581, 1129], "rolling_quantil": [582, 1130], "rolling_skew": [583, 1131], "rolling_std": [584, 1132], "rolling_sum": [585, 1133], "rolling_var": [586, 1134], "round_sig_fig": [588, 1136], "search_sort": [590, 1139], "shrink_dtyp": [594, 1147], "shuffl": [595, 1149], "sign": [596, 1150], "sin": [597, 1151], "sinh": [598, 1152], "skew": [599, 1153], "sort_bi": 602, "sqrt": [603, 1156], "str": [605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209], "contains_ani": [607, 1161], "extract": [614, 1168], "extract_al": [615, 1169], "extract_group": [616, 1170], "json_decod": [617, 1171], "json_extract": [618, 1172], "json_path_match": [619, 1173], "len_byt": [620, 1174], "len_char": [621, 1175], "ljust": [623, 1177], "lstrip": [624, 1178], "n_char": [625, 1179], "pad_end": [626, 1180], "pad_start": [627, 1181], "parse_int": [628, 1182], "replace_al": [630, 1184], "replace_mani": [631, 1185], "rjust": [633, 1187], "rstrip": [634, 1188], "split": [636, 1190], "split_exact": [637, 1191], "splitn": [638, 1192], "strip": [640, 1194], "strip_char": [641, 1195], "strip_chars_end": [642, 1196], "strip_chars_start": [643, 1197], "strip_prefix": [644, 1198], "strip_suffix": [645, 1199], "strptime": [646, 1200], "to_dat": [647, 1201], "to_datetim": [648, 1202], "to_decim": [649, 1203], "to_integ": [650, 1204], "to_tim": [652, 1206], "to_titlecas": [653, 1207], "zfill": [655, 1209], "field": [656, 1210, 1211], "json_encod": [657, 1212], "rename_field": [658, 1213], "sub": 659, "tan": [665, 1220], "tanh": [666, 1221], "to_phys": [667, 1229], "truediv": 669, "unique_count": [671, 1232], "upper_bound": [672, 1233], "value_count": [673, 1234], "where": 675, "xor": 676, "all_horizont": 678, "any_horizont": 680, "arang": 683, "arctan2": 684, "arctan2d": 685, "arg_sort_bi": 686, "arg_wher": 687, "coalesc": 688, "concat_list": 689, "concat_str": 690, "cov": 693, "cum_fold": 695, "cum_reduc": 696, "cum_sum_horizont": 698, "cumfold": 699, "cumreduc": 700, "cumsum_horizont": 702, "date_rang": [704, 705], "datetime_rang": [707, 708], "element": 710, "format": 714, "from_epoch": 715, "group": 716, "int_rang": [719, 720], "lit": 722, "ones": 733, "reduc": 735, "repeat": 736, "rolling_corr": 737, "rolling_cov": 738, "sql_expr": 740, "time_rang": [747, 748], "when": 750, "zero": 751, "categori": [755, 1242], "col": 756, "express": 760, "oper": [766, 873], "conjunct": 766, "comparison": 766, "window": 770, "convers": 771, "parallel": 771, "random": 771, "refer": 772, "input": 773, "output": 773, "feather": 773, "ipc": 773, "parquet": 773, "databas": 773, "json": 773, "avro": 773, "spreadsheet": 773, "apach": 773, "iceberg": 773, "delta": 773, "lake": 773, "dataset": 773, "cach": 777, "collect": 781, "collect_async": 782, "deseri": 785, "explain": 789, "fetch": 791, "profil": [821, 1255], "serial": 829, "show_graph": 833, "with_context": 848, "lazygroupbi": [851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866], "read": 871, "write": 871, "logic": 871, "plan": 871, "selector": 873, "import": 873, "set": [873, 1141], "is_loc": 915, "to_loc": 917, "uses_lexical_ord": 918, "chunk_length": 921, "get_chunk": 1016, "has_valid": 1017, "inner_dtyp": 1022, "is_boolean": 1025, "is_float": 1031, "is_integ": 1034, "is_numer": 1041, "is_sort": 1042, "is_tempor": 1043, "is_utf8": 1045, "new_from_index": 1105, "scatter": 1138, "series_equ": 1140, "set_at_idx": 1142, "to_fram": 1224, "view": 1236, "zip_with": 1237, "sql": 1254, "method": 1254, "assert": 1255, "primit": 1255, "strategi": 1255, "helper": 1255, "util": 1256}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.partition_by": [[222, "polars-dataframe-partition-by"]], "polars.DataFrame.flags": [[177, "polars-dataframe-flags"]], "polars.DataFrame.group_by_rolling": [[187, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.insert_at_idx": [[195, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.n_chunks": [[219, "polars-dataframe-n-chunks"]], "polars.DataFrame.extend": [[172, "polars-dataframe-extend"]], "polars.DataFrame.fold": [[178, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[179, "polars-dataframe-frame-equal"]], "polars.DataFrame.gather_every": [[180, "polars-dataframe-gather-every"]], "polars.DataFrame.map_rows": [[209, "polars-dataframe-map-rows"]], "polars.DataFrame.group_by_dynamic": [[186, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.join": [[205, "polars-dataframe-join"]], "polars.DataFrame.glimpse": [[184, "polars-dataframe-glimpse"]], "polars.DataFrame.iter_columns": [[202, "polars-dataframe-iter-columns"]], "polars.DataFrame.iter_slices": [[204, "polars-dataframe-iter-slices"]], "polars.DataFrame.iter_rows": [[203, "polars-dataframe-iter-rows"]], "polars.DataFrame.groupby_rolling": [[190, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.estimated_size": [[170, "polars-dataframe-estimated-size"]], "polars.DataFrame.pipe": [[223, "polars-dataframe-pipe"]], "polars.DataFrame.filter": [[175, "polars-dataframe-filter"]], "polars.DataFrame.mean_horizontal": [[213, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.lazy": [[207, "polars-dataframe-lazy"]], "polars.DataFrame.min_horizontal": [[218, "polars-dataframe-min-horizontal"]], "polars.DataFrame.n_unique": [[220, "polars-dataframe-n-unique"]], "polars.DataFrame.find_idx_by_name": [[176, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.dtypes": [[168, "polars-dataframe-dtypes"]], "polars.DataFrame.groupby_dynamic": [[189, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.hash_rows": [[191, "polars-dataframe-hash-rows"]], "polars.DataFrame.is_duplicated": [[198, "polars-dataframe-is-duplicated"]], "polars.DataFrame.mean": [[212, "polars-dataframe-mean"]], "polars.DataFrame.is_unique": [[200, "polars-dataframe-is-unique"]], "polars.DataFrame.max_horizontal": [[211, "polars-dataframe-max-horizontal"]], "polars.DataFrame.insert_column": [[196, "polars-dataframe-insert-column"]], "polars.DataFrame.item": [[201, "polars-dataframe-item"]], "polars.DataFrame.median": [[214, "polars-dataframe-median"]], "polars.DataFrame.fill_null": [[174, "polars-dataframe-fill-null"]], "polars.DataFrame.head": [[192, "polars-dataframe-head"]], "polars.DataFrame.limit": [[208, "polars-dataframe-limit"]], "polars.DataFrame.merge_sorted": [[216, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_columns": [[183, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_nan": [[173, "polars-dataframe-fill-nan"]], "polars.DataFrame.groupby": [[188, "polars-dataframe-groupby"]], "polars.DataFrame.group_by": [[185, "polars-dataframe-group-by"]], "polars.DataFrame.get_column": [[181, "polars-dataframe-get-column"]], "polars.DataFrame.height": [[193, "polars-dataframe-height"]], "polars.DataFrame.join_asof": [[206, "polars-dataframe-join-asof"]], "polars.DataFrame.min": [[217, "polars-dataframe-min"]], "polars.DataFrame.melt": [[215, "polars-dataframe-melt"]], "polars.DataFrame.null_count": [[221, "polars-dataframe-null-count"]], "polars.DataFrame.explode": [[171, "polars-dataframe-explode"]], "polars.DataFrame.interpolate": [[197, "polars-dataframe-interpolate"]], "polars.DataFrame.hstack": [[194, "polars-dataframe-hstack"]], "polars.DataFrame.is_empty": [[199, "polars-dataframe-is-empty"]], "polars.DataFrame.get_column_index": [[182, "polars-dataframe-get-column-index"]], "polars.DataFrame.equals": [[169, "polars-dataframe-equals"]], "polars.DataFrame.max": [[210, "polars-dataframe-max"]], "polars.DataFrame.approx_n_unique": [[156, "polars-dataframe-approx-n-unique"]], "polars.read_ndjson": [[126, "polars-read-ndjson"]], "polars.testing.assert_series_equal": [[141, "polars-testing-assert-series-equal"]], "polars.read_ods": [[127, "polars-read-ods"]], "polars.testing.parametric.set_profile": [[149, "polars-testing-parametric-set-profile"]], "polars.DataFrame.clear": [[159, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[160, "polars-dataframe-clone"]], "polars.threadpool_size": [[150, "polars-threadpool-size"]], "polars.DataFrame.describe": [[164, "polars-dataframe-describe"]], "polars.DataFrame.count": [[163, "polars-dataframe-count"]], "polars.read_avro": [[115, "polars-read-avro"]], "polars.testing.assert_series_not_equal": [[142, "polars-testing-assert-series-not-equal"]], "polars.DataFrame.apply": [[155, "polars-dataframe-apply"]], "polars.DataFrame.corr": [[162, "polars-dataframe-corr"]], "polars.read_excel": [[121, "polars-read-excel"]], "polars.DataFrame.drop_in_place": [[166, "polars-dataframe-drop-in-place"]], "polars.scan_iceberg": [[132, "polars-scan-iceberg"]], "polars.read_parquet": [[128, "polars-read-parquet"]], "polars.show_versions": [[138, "polars-show-versions"]], "polars.testing.assert_frame_not_equal": [[140, "polars-testing-assert-frame-not-equal"]], "polars.DataFrame.drop": [[165, "polars-dataframe-drop"]], "polars.read_delta": [[120, "polars-read-delta"]], "polars.DataFrame.drop_nulls": [[167, "polars-dataframe-drop-nulls"]], "polars.read_ipc_stream": [[124, "polars-read-ipc-stream"]], "polars.using_string_cache": [[151, "polars-using-string-cache"]], "polars.DataFrame.bottom_k": [[157, "polars-dataframe-bottom-k"]], "polars.read_ipc": [[122, "polars-read-ipc"]], "polars.scan_pyarrow_dataset": [[136, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.__dataframe__": [[154, "polars-dataframe-dataframe"]], "polars.read_ipc_schema": [[123, "polars-read-ipc-schema"]], "polars.testing.parametric.column": [[143, "polars-testing-parametric-column"]], "polars.testing.parametric.create_list_strategy": [[145, "polars-testing-parametric-create-list-strategy"]], "polars.scan_csv": [[130, "polars-scan-csv"]], "polars.read_database": [[118, "polars-read-database"]], "polars.from_repr": [[112, "polars-from-repr"]], "Aggregation": [[153, "aggregation"], [874, "aggregation"], [774, "aggregation"], [305, "aggregation"]], "polars.get_index_type": [[113, "polars-get-index-type"]], "polars.read_csv": [[116, "polars-read-csv"]], "polars.read_parquet_schema": [[129, "polars-read-parquet-schema"]], "polars.read_csv_batched": [[117, "polars-read-csv-batched"]], "polars.read_database_uri": [[119, "polars-read-database-uri"]], "polars.scan_delta": [[131, "polars-scan-delta"]], "polars.set_random_seed": [[137, "polars-set-random-seed"]], "polars.DataFrame.columns": [[161, "polars-dataframe-columns"]], "polars.DataFrame.cast": [[158, "polars-dataframe-cast"]], "polars.testing.parametric.columns": [[144, "polars-testing-parametric-columns"]], "polars.testing.parametric.dataframes": [[146, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[148, "polars-testing-parametric-series"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[114, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_ndjson": [[134, "polars-scan-ndjson"]], "polars.testing.assert_frame_equal": [[139, "polars-testing-assert-frame-equal"]], "polars.scan_ipc": [[133, "polars-scan-ipc"]], "polars.scan_parquet": [[135, "polars-scan-parquet"]], "polars.testing.parametric.load_profile": [[147, "polars-testing-parametric-load-profile"]], "Config": [[152, "config"]], "Config options": [[152, "config-options"]], "Config load, save, and current state": [[152, "config-load-save-and-current-state"]], "Use as a context manager": [[152, "use-as-a-context-manager"]], "Use as a function decorator": [[152, "use-as-a-function-decorator"]], "polars.read_json": [[125, "polars-read-json"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Float64": [[53, "polars-float64"]], "Index": [[0, "index"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Enum": [[51, "polars-enum"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Date": [[47, "polars-date"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Float32": [[52, "polars-float32"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Int32": [[55, "polars-int32"]], "polars.DataType": [[46, "polars-datatype"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Array": [[2, "polars-array"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1250, "examples"], [1255, "examples"], [873, "examples"], [302, "examples"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.UInt16": [[74, "polars-uint16"]], "polars.api.register_dataframe_namespace": [[81, "polars-api-register-dataframe-namespace"]], "polars.Int8": [[57, "polars-int8"]], "polars.UInt64": [[76, "polars-uint64"]], "polars.SQLContext.register_globals": [[66, "polars-sqlcontext-register-globals"]], "polars.Struct": [[72, "polars-struct"]], "polars.collect_all_async": [[87, "polars-collect-all-async"]], "polars.exceptions.ColumnNotFoundError": [[92, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.from_numpy": [[109, "polars-from-numpy"]], "polars.Null": [[62, "polars-null"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.from_dicts": [[108, "polars-from-dicts"]], "polars.exceptions.ArrowError": [[91, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[93, "polars-exceptions-computeerror"]], "polars.StringCache": [[71, "polars-stringcache"]], "polars.exceptions.DuplicateError": [[94, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[95, "polars-exceptions-invalidoperationerror"]], "polars.from_records": [[111, "polars-from-records"]], "polars.String": [[70, "polars-string"]], "polars.align_frames": [[80, "polars-align-frames"]], "polars.concat": [[88, "polars-concat"]], "polars.disable_string_cache": [[89, "polars-disable-string-cache"]], "polars.Time": [[73, "polars-time"]], "polars.Utf8": [[79, "polars-utf8"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.from_arrow": [[105, "polars-from-arrow"]], "polars.SQLContext.tables": [[68, "polars-sqlcontext-tables"]], "polars.List": [[61, "polars-list"]], "polars.exceptions.RowsError": [[99, "polars-exceptions-rowserror"]], "polars.collect_all": [[86, "polars-collect-all"]], "polars.Unknown": [[78, "polars-unknown"]], "polars.api.register_expr_namespace": [[82, "polars-api-register-expr-namespace"]], "polars.enable_string_cache": [[90, "polars-enable-string-cache"]], "polars.exceptions.ShapeError": [[102, "polars-exceptions-shapeerror"]], "polars.SQLContext.register": [[65, "polars-sqlcontext-register"]], "polars.build_info": [[85, "polars-build-info"]], "polars.exceptions.SchemaFieldNotFoundError": [[101, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[104, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_pandas": [[110, "polars-from-pandas"]], "polars.Object": [[63, "polars-object"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.exceptions.PolarsPanicError": [[98, "polars-exceptions-polarspanicerror"]], "polars.from_dict": [[107, "polars-from-dict"]], "polars.api.register_lazyframe_namespace": [[83, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.StructFieldNotFoundError": [[103, "polars-exceptions-structfieldnotfounderror"]], "polars.SQLContext.execute": [[64, "polars-sqlcontext-execute"]], "polars.SQLContext.unregister": [[69, "polars-sqlcontext-unregister"]], "polars.UInt8": [[77, "polars-uint8"]], "polars.SQLContext.register_many": [[67, "polars-sqlcontext-register-many"]], "polars.from_dataframe": [[106, "polars-from-dataframe"]], "polars.api.register_series_namespace": [[84, "polars-api-register-series-namespace"]], "polars.UInt32": [[75, "polars-uint32"]], "polars.exceptions.SchemaError": [[100, "polars-exceptions-schemaerror"]], "polars.LazyFrame.sink_parquet": [[60, "polars-lazyframe-sink-parquet"]], "polars.Int64": [[56, "polars-int64"]], "polars.Series.str.strip_chars": [[1195, "polars-series-str-strip-chars"]], "polars.Series.str.to_decimal": [[1203, "polars-series-str-to-decimal"]], "polars.Series.struct.schema": [[1214, "polars-series-struct-schema"]], "polars.Series.to_frame": [[1224, "polars-series-to-frame"]], "polars.Series.tan": [[1220, "polars-series-tan"]], "polars.Series.str.strip_chars_end": [[1196, "polars-series-str-strip-chars-end"]], "polars.Series.str.to_time": [[1206, "polars-series-str-to-time"]], "polars.Series.unique": [[1231, "polars-series-unique"]], "polars.Series.take_every": [[1219, "polars-series-take-every"]], "polars.Series.top_k": [[1230, "polars-series-top-k"]], "polars.Series.str.replace": [[1183, "polars-series-str-replace"]], "polars.Series.str.split_exact": [[1191, "polars-series-str-split-exact"]], "polars.Series.str.rjust": [[1187, "polars-series-str-rjust"]], "polars.Series.str.n_chars": [[1179, "polars-series-str-n-chars"]], "polars.Series.to_init_repr": [[1225, "polars-series-to-init-repr"]], "polars.Series.str.reverse": [[1186, "polars-series-str-reverse"]], "polars.Series.to_physical": [[1229, "polars-series-to-physical"]], "polars.Series.str.to_integer": [[1204, "polars-series-str-to-integer"]], "polars.Series.struct.json_encode": [[1212, "polars-series-struct-json-encode"]], "polars.Series.str.lengths": [[1176, "polars-series-str-lengths"]], "polars.Series.to_list": [[1226, "polars-series-to-list"]], "polars.Series.str.ljust": [[1177, "polars-series-str-ljust"]], "polars.Series.to_dummies": [[1223, "polars-series-to-dummies"]], "polars.Series.struct.fields": [[1211, "polars-series-struct-fields"]], "polars.Series.str.split": [[1190, "polars-series-str-split"]], "polars.Series.str.strip_prefix": [[1198, "polars-series-str-strip-prefix"]], "polars.Series.take": [[1218, "polars-series-take"]], "polars.Series.str.to_datetime": [[1202, "polars-series-str-to-datetime"]], "polars.Series.str.strip_suffix": [[1199, "polars-series-str-strip-suffix"]], "polars.Series.str.strip": [[1194, "polars-series-str-strip"]], "polars.Series.str.to_date": [[1201, "polars-series-str-to-date"]], "polars.Series.str.pad_end": [[1180, "polars-series-str-pad-end"]], "polars.Series.str.to_lowercase": [[1205, "polars-series-str-to-lowercase"]], "polars.Series.str.rstrip": [[1188, "polars-series-str-rstrip"]], "polars.Series.to_pandas": [[1228, "polars-series-to-pandas"]], "polars.Series.str.strip_chars_start": [[1197, "polars-series-str-strip-chars-start"]], "polars.Series.struct.field": [[1210, "polars-series-struct-field"]], "polars.Series.str.lstrip": [[1178, "polars-series-str-lstrip"]], "polars.Series.to_arrow": [[1222, "polars-series-to-arrow"]], "polars.Series.str.starts_with": [[1193, "polars-series-str-starts-with"]], "polars.Series.str.to_uppercase": [[1208, "polars-series-str-to-uppercase"]], "polars.Series.sum": [[1216, "polars-series-sum"]], "polars.Series.str.to_titlecase": [[1207, "polars-series-str-to-titlecase"]], "polars.Series.tanh": [[1221, "polars-series-tanh"]], "polars.Series.to_numpy": [[1227, "polars-series-to-numpy"]], "polars.Series.str.replace_all": [[1184, "polars-series-str-replace-all"]], "polars.Series.str.replace_many": [[1185, "polars-series-str-replace-many"]], "polars.Series.str.splitn": [[1192, "polars-series-str-splitn"]], "polars.Series.str.strptime": [[1200, "polars-series-str-strptime"]], "polars.Series.str.parse_int": [[1182, "polars-series-str-parse-int"]], "polars.Series.str.zfill": [[1209, "polars-series-str-zfill"]], "polars.Series.struct.rename_fields": [[1213, "polars-series-struct-rename-fields"]], "polars.Series.str.pad_start": [[1181, "polars-series-str-pad-start"]], "polars.Series.tail": [[1217, "polars-series-tail"]], "polars.Series.struct.unnest": [[1215, "polars-series-struct-unnest"]], "polars.Series.str.slice": [[1189, "polars-series-str-slice"]], "polars.Series.median": [[1097, "polars-series-median"]], "polars.Series.log": [[1089, "polars-series-log"]], "polars.Series.mode": [[1099, "polars-series-mode"]], "polars.Series.max": [[1095, "polars-series-max"]], "polars.Series.not_": [[1106, "polars-series-not"]], "polars.Series.list.mean": [[1072, "polars-series-list-mean"]], "polars.Series.quantile": [[1114, "polars-series-quantile"]], "polars.Series.list.sample": [[1075, "polars-series-list-sample"]], "polars.Series.list.min": [[1073, "polars-series-list-min"]], "polars.Series.list.shift": [[1080, "polars-series-list-shift"]], "polars.Series.list.tail": [[1084, "polars-series-list-tail"]], "polars.Series.null_count": [[1107, "polars-series-null-count"]], "polars.Series.list.reverse": [[1074, "polars-series-list-reverse"]], "polars.Series.plot": [[1111, "polars-series-plot"]], "polars.Series.list.lengths": [[1070, "polars-series-list-lengths"]], "polars.Series.list.take": [[1085, "polars-series-list-take"]], "polars.Series.reinterpret": [[1117, "polars-series-reinterpret"]], "polars.Series.map_dict": [[1093, "polars-series-map-dict"]], "polars.Series.pct_change": [[1108, "polars-series-pct-change"]], "polars.Series.list.to_struct": [[1087, "polars-series-list-to-struct"]], "polars.Series.peak_max": [[1109, "polars-series-peak-max"]], "polars.Series.rechunk": [[1116, "polars-series-rechunk"]], "polars.Series.rename": [[1118, "polars-series-rename"]], "polars.Series.log1p": [[1091, "polars-series-log1p"]], "polars.Series.list.set_union": [[1079, "polars-series-list-set-union"]], "polars.Series.list.set_difference": [[1076, "polars-series-list-set-difference"]], "polars.Series.n_chunks": [[1100, "polars-series-n-chunks"]], "polars.Series.min": [[1098, "polars-series-min"]], "polars.Series.list.last": [[1068, "polars-series-list-last"]], "polars.Series.replace": [[1119, "polars-series-replace"]], "polars.Series.list.join": [[1067, "polars-series-list-join"]], "polars.Series.list.sum": [[1083, "polars-series-list-sum"]], "polars.Series.lower_bound": [[1092, "polars-series-lower-bound"]], "polars.Series.qcut": [[1113, "polars-series-qcut"]], "polars.Series.list.set_intersection": [[1077, "polars-series-list-set-intersection"]], "polars.Series.list.max": [[1071, "polars-series-list-max"]], "polars.Series.list.head": [[1066, "polars-series-list-head"]], "polars.Series.product": [[1112, "polars-series-product"]], "polars.Series.list.get": [[1065, "polars-series-list-get"]], "polars.Series.mean": [[1096, "polars-series-mean"]], "polars.Series.name": [[1102, "polars-series-name"]], "polars.Series.nan_max": [[1103, "polars-series-nan-max"]], "polars.Series.nan_min": [[1104, "polars-series-nan-min"]], "polars.Series.list.set_symmetric_difference": [[1078, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.unique": [[1088, "polars-series-list-unique"]], "polars.Series.list.len": [[1069, "polars-series-list-len"]], "polars.Series.peak_min": [[1110, "polars-series-peak-min"]], "polars.Series.list.gather": [[1064, "polars-series-list-gather"]], "polars.Series.list.to_array": [[1086, "polars-series-list-to-array"]], "polars.Series.new_from_index": [[1105, "polars-series-new-from-index"]], "polars.Series.log10": [[1090, "polars-series-log10"]], "polars.Series.n_unique": [[1101, "polars-series-n-unique"]], "polars.Series.rank": [[1115, "polars-series-rank"]], "polars.Series.list.slice": [[1081, "polars-series-list-slice"]], "polars.Series.map_elements": [[1094, "polars-series-map-elements"]], "polars.Series.list.sort": [[1082, "polars-series-list-sort"]], "polars.Series.get_chunks": [[1016, "polars-series-get-chunks"]], "polars.Series.implode": [[1021, "polars-series-implode"]], "polars.Series.list.count_matches": [[1058, "polars-series-list-count-matches"]], "polars.Series.is_infinite": [[1033, "polars-series-is-infinite"]], "polars.Series.is_first": [[1029, "polars-series-is-first"]], "polars.Series.floor": [[1013, "polars-series-floor"]], "polars.Series.gather": [[1014, "polars-series-gather"]], "polars.Series.is_in": [[1032, "polars-series-is-in"]], "polars.Series.is_empty": [[1027, "polars-series-is-empty"]], "polars.Series.list.any": [[1052, "polars-series-list-any"]], "polars.Series.is_last": [[1035, "polars-series-is-last"]], "polars.Series.extend_constant": [[1008, "polars-series-extend-constant"]], "polars.Series.list.explode": [[1062, "polars-series-list-explode"]], "polars.Series.list.arg_max": [[1053, "polars-series-list-arg-max"]], "polars.Series.is_nan": [[1037, "polars-series-is-nan"]], "polars.Series.gather_every": [[1015, "polars-series-gather-every"]], "polars.Series.is_duplicated": [[1026, "polars-series-is-duplicated"]], "polars.Series.list.count_match": [[1057, "polars-series-list-count-match"]], "polars.Series.is_sorted": [[1042, "polars-series-is-sorted"]], "polars.Series.is_first_distinct": [[1030, "polars-series-is-first-distinct"]], "polars.Series.list.arg_min": [[1054, "polars-series-list-arg-min"]], "polars.Series.head": [[1019, "polars-series-head"]], "polars.Series.is_integer": [[1034, "polars-series-is-integer"]], "polars.Series.filter": [[1011, "polars-series-filter"]], "polars.Series.list.drop_nulls": [[1060, "polars-series-list-drop-nulls"]], "polars.Series.fill_null": [[1010, "polars-series-fill-null"]], "polars.Series.list.contains": [[1056, "polars-series-list-contains"]], "polars.Series.is_numeric": [[1041, "polars-series-is-numeric"]], "polars.Series.has_validity": [[1017, "polars-series-has-validity"]], "polars.Series.limit": [[1049, "polars-series-limit"]], "polars.Series.list.concat": [[1055, "polars-series-list-concat"]], "polars.Series.list.eval": [[1061, "polars-series-list-eval"]], "polars.Series.hash": [[1018, "polars-series-hash"]], "polars.Series.list": [[1050, "polars-series-list"]], "polars.Series.hist": [[1020, "polars-series-hist"]], "polars.Series.len": [[1048, "polars-series-len"]], "polars.Series.is_unique": [[1044, "polars-series-is-unique"]], "polars.Series.flags": [[1012, "polars-series-flags"]], "polars.Series.is_not_null": [[1039, "polars-series-is-not-null"]], "polars.Series.is_not_nan": [[1038, "polars-series-is-not-nan"]], "polars.Series.interpolate": [[1023, "polars-series-interpolate"]], "polars.Series.is_finite": [[1028, "polars-series-is-finite"]], "polars.Series.list.all": [[1051, "polars-series-list-all"]], "polars.Series.item": [[1046, "polars-series-item"]], "polars.Series.is_boolean": [[1025, "polars-series-is-boolean"]], "polars.Series.is_null": [[1040, "polars-series-is-null"]], "polars.Series.fill_nan": [[1009, "polars-series-fill-nan"]], "polars.Series.is_between": [[1024, "polars-series-is-between"]], "polars.Series.kurtosis": [[1047, "polars-series-kurtosis"]], "polars.Series.list.diff": [[1059, "polars-series-list-diff"]], "polars.Series.inner_dtype": [[1022, "polars-series-inner-dtype"]], "polars.Series.is_float": [[1031, "polars-series-is-float"]], "polars.Series.list.first": [[1063, "polars-series-list-first"]], "polars.Series.is_utf8": [[1045, "polars-series-is-utf8"]], "polars.Series.is_temporal": [[1043, "polars-series-is-temporal"]], "polars.Series.is_last_distinct": [[1036, "polars-series-is-last-distinct"]], "polars.Series.str.decode": [[1164, "polars-series-str-decode"]], "polars.Series.rolling_var": [[1134, "polars-series-rolling-var"]], "polars.Series.round": [[1135, "polars-series-round"]], "polars.Series.str.count_matches": [[1163, "polars-series-str-count-matches"]], "polars.Series.search_sorted": [[1139, "polars-series-search-sorted"]], "polars.Series.shrink_to_fit": [[1148, "polars-series-shrink-to-fit"]], "polars.Series.rolling_max": [[1126, "polars-series-rolling-max"]], "polars.Series.sqrt": [[1156, "polars-series-sqrt"]], "polars.Series.str": [[1158, "polars-series-str"]], "polars.Series.scatter": [[1138, "polars-series-scatter"]], "polars.Series.str.json_decode": [[1171, "polars-series-str-json-decode"]], "polars.Series.rle_id": [[1123, "polars-series-rle-id"]], "polars.Series.set_sorted": [[1143, "polars-series-set-sorted"]], "polars.Series.shape": [[1144, "polars-series-shape"]], "polars.Series.sign": [[1150, "polars-series-sign"]], "polars.Series.str.ends_with": [[1166, "polars-series-str-ends-with"]], "polars.Series.slice": [[1154, "polars-series-slice"]], "polars.Series.round_sig_figs": [[1136, "polars-series-round-sig-figs"]], "polars.Series.series_equal": [[1140, "polars-series-series-equal"]], "polars.Series.str.count_match": [[1162, "polars-series-str-count-match"]], "polars.Series.str.json_path_match": [[1173, "polars-series-str-json-path-match"]], "polars.Series.rolling_median": [[1128, "polars-series-rolling-median"]], "polars.Series.rolling_mean": [[1127, "polars-series-rolling-mean"]], "polars.Series.rolling_apply": [[1124, "polars-series-rolling-apply"]], "polars.Series.str.explode": [[1167, "polars-series-str-explode"]], "polars.Series.reshape": [[1120, "polars-series-reshape"]], "polars.Series.sinh": [[1152, "polars-series-sinh"]], "polars.Series.rolling_sum": [[1133, "polars-series-rolling-sum"]], "polars.Series.str.json_extract": [[1172, "polars-series-str-json-extract"]], "polars.Series.reverse": [[1121, "polars-series-reverse"]], "polars.Series.std": [[1157, "polars-series-std"]], "polars.Series.set_at_idx": [[1142, "polars-series-set-at-idx"]], "polars.Series.rolling_std": [[1132, "polars-series-rolling-std"]], "polars.Series.str.encode": [[1165, "polars-series-str-encode"]], "polars.Series.str.extract": [[1168, "polars-series-str-extract"]], "polars.Series.str.len_bytes": [[1174, "polars-series-str-len-bytes"]], "polars.Series.rolling_quantile": [[1130, "polars-series-rolling-quantile"]], "polars.Series.sin": [[1151, "polars-series-sin"]], "polars.Series.rolling_skew": [[1131, "polars-series-rolling-skew"]], "polars.Series.shift_and_fill": [[1146, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[1147, "polars-series-shrink-dtype"]], "polars.Series.shuffle": [[1149, "polars-series-shuffle"]], "polars.Series.set": [[1141, "polars-series-set"]], "polars.Series.skew": [[1153, "polars-series-skew"]], "polars.Series.rolling_map": [[1125, "polars-series-rolling-map"]], "polars.Series.str.concat": [[1159, "polars-series-str-concat"]], "polars.Series.str.contains": [[1160, "polars-series-str-contains"]], "polars.Series.str.contains_any": [[1161, "polars-series-str-contains-any"]], "polars.Series.str.len_chars": [[1175, "polars-series-str-len-chars"]], "polars.Series.rolling_min": [[1129, "polars-series-rolling-min"]], "polars.Series.sample": [[1137, "polars-series-sample"]], "polars.Series.shift": [[1145, "polars-series-shift"]], "polars.Series.str.extract_all": [[1169, "polars-series-str-extract-all"]], "polars.Series.rle": [[1122, "polars-series-rle"]], "polars.Series.sort": [[1155, "polars-series-sort"]], "polars.Series.str.extract_groups": [[1170, "polars-series-str-extract-groups"]], "polars.Series.dt.month_start": [[972, "polars-series-dt-month-start"]], "polars.Series.dt.dst_offset": [[954, "polars-series-dt-dst-offset"]], "polars.Series.dt.millisecond": [[965, "polars-series-dt-millisecond"]], "polars.Series.dt.timestamp": [[984, "polars-series-dt-timestamp"]], "polars.Series.dt.month": [[970, "polars-series-dt-month"]], "polars.Series.dt.is_leap_year": [[958, "polars-series-dt-is-leap-year"]], "polars.Series.exp": [[1005, "polars-series-exp"]], "polars.Series.dt.total_seconds": [[992, "polars-series-dt-total-seconds"]], "polars.Series.dt.nanoseconds": [[974, "polars-series-dt-nanoseconds"]], "polars.Series.dt.minute": [[968, "polars-series-dt-minute"]], "polars.Series.dt.total_microseconds": [[988, "polars-series-dt-total-microseconds"]], "polars.Series.dt.month_end": [[971, "polars-series-dt-month-end"]], "polars.Series.dt.total_days": [[986, "polars-series-dt-total-days"]], "polars.Series.estimated_size": [[1001, "polars-series-estimated-size"]], "polars.Series.dt.offset_by": [[975, "polars-series-dt-offset-by"]], "polars.Series.dt.milliseconds": [[966, "polars-series-dt-milliseconds"]], "polars.Series.dt.total_hours": [[987, "polars-series-dt-total-hours"]], "polars.Series.dt.minutes": [[969, "polars-series-dt-minutes"]], "polars.Series.dt.time": [[983, "polars-series-dt-time"]], "polars.Series.dt.min": [[967, "polars-series-dt-min"]], "polars.Series.dt.hour": [[956, "polars-series-dt-hour"]], "polars.Series.equals": [[1000, "polars-series-equals"]], "polars.Series.dtype": [[998, "polars-series-dtype"]], "polars.Series.dt.with_time_unit": [[996, "polars-series-dt-with-time-unit"]], "polars.Series.dt.total_milliseconds": [[989, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.epoch": [[955, "polars-series-dt-epoch"]], "polars.Series.dt.nanosecond": [[973, "polars-series-dt-nanosecond"]], "polars.Series.dt.total_nanoseconds": [[991, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.max": [[960, "polars-series-dt-max"]], "polars.Series.dt.median": [[962, "polars-series-dt-median"]], "polars.Series.dt.day": [[952, "polars-series-dt-day"]], "polars.Series.dt.quarter": [[977, "polars-series-dt-quarter"]], "polars.Series.dt.total_minutes": [[990, "polars-series-dt-total-minutes"]], "polars.Series.dt.weekday": [[995, "polars-series-dt-weekday"]], "polars.Series.dt.microseconds": [[964, "polars-series-dt-microseconds"]], "polars.Series.dt.strftime": [[982, "polars-series-dt-strftime"]], "polars.Series.entropy": [[999, "polars-series-entropy"]], "polars.Series.ewm_std": [[1003, "polars-series-ewm-std"]], "polars.Series.explode": [[1006, "polars-series-explode"]], "polars.Series.dt.replace_time_zone": [[978, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.seconds": [[981, "polars-series-dt-seconds"]], "polars.Series.dt.year": [[997, "polars-series-dt-year"]], "polars.Series.dt.round": [[979, "polars-series-dt-round"]], "polars.Series.ewm_mean": [[1002, "polars-series-ewm-mean"]], "polars.Series.dt.ordinal_day": [[976, "polars-series-dt-ordinal-day"]], "polars.Series.dt.truncate": [[993, "polars-series-dt-truncate"]], "polars.Series.dt.hours": [[957, "polars-series-dt-hours"]], "polars.Series.dt.week": [[994, "polars-series-dt-week"]], "polars.Series.dt.microsecond": [[963, "polars-series-dt-microsecond"]], "polars.Series.dt.iso_year": [[959, "polars-series-dt-iso-year"]], "polars.Series.ewm_var": [[1004, "polars-series-ewm-var"]], "polars.Series.extend": [[1007, "polars-series-extend"]], "polars.Series.dt.to_string": [[985, "polars-series-dt-to-string"]], "polars.Series.dt.days": [[953, "polars-series-dt-days"]], "polars.Series.dt.second": [[980, "polars-series-dt-second"]], "polars.Series.dt.mean": [[961, "polars-series-dt-mean"]], "polars.Series.clip_max": [[924, "polars-series-clip-max"]], "polars.Series.dt.datetime": [[951, "polars-series-dt-datetime"]], "polars.Series.bin.contains": [[906, "polars-series-bin-contains"]], "polars.Series.cumprod": [[936, "polars-series-cumprod"]], "polars.Series.cum_prod": [[932, "polars-series-cum-prod"]], "polars.Series.cat.uses_lexical_ordering": [[918, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arr.get": [[897, "polars-series-arr-get"]], "polars.Series.bin.ends_with": [[909, "polars-series-bin-ends-with"]], "polars.Series.dt.convert_time_zone": [[949, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.sort": [[902, "polars-series-arr-sort"]], "polars.Series.bin.encode": [[908, "polars-series-bin-encode"]], "polars.Series.clone": [[926, "polars-series-clone"]], "polars.Series.bottom_k": [[911, "polars-series-bottom-k"]], "polars.Series.arr.sum": [[903, "polars-series-arr-sum"]], "polars.Series.clip_min": [[925, "polars-series-clip-min"]], "polars.Series.cat.get_categories": [[914, "polars-series-cat-get-categories"]], "polars.Series.drop_nulls": [[944, "polars-series-drop-nulls"]], "polars.Series.dt": [[945, "polars-series-dt"]], "polars.Series.clip": [[923, "polars-series-clip"]], "polars.Series.dt.combine": [[948, "polars-series-dt-combine"]], "polars.Series.arr.to_list": [[904, "polars-series-arr-to-list"]], "polars.Series.cat": [[913, "polars-series-cat"]], "polars.Series.diff": [[941, "polars-series-diff"]], "polars.Series.cat.set_ordering": [[916, "polars-series-cat-set-ordering"]], "polars.Series.dt.base_utc_offset": [[946, "polars-series-dt-base-utc-offset"]], "polars.Series.cum_sum": [[933, "polars-series-cum-sum"]], "polars.Series.cut": [[939, "polars-series-cut"]], "polars.Series.dot": [[942, "polars-series-dot"]], "polars.Series.cosh": [[928, "polars-series-cosh"]], "polars.Series.cbrt": [[919, "polars-series-cbrt"]], "polars.Series.cos": [[927, "polars-series-cos"]], "polars.Series.cum_max": [[930, "polars-series-cum-max"]], "polars.Series.describe": [[940, "polars-series-describe"]], "polars.Series.dt.cast_time_unit": [[947, "polars-series-dt-cast-time-unit"]], "polars.Series.ceil": [[920, "polars-series-ceil"]], "polars.Series.arr.unique": [[905, "polars-series-arr-unique"]], "polars.Series.chunk_lengths": [[921, "polars-series-chunk-lengths"]], "polars.Series.arr.min": [[900, "polars-series-arr-min"]], "polars.Series.cat.is_local": [[915, "polars-series-cat-is-local"]], "polars.Series.cum_min": [[931, "polars-series-cum-min"]], "polars.Series.cumsum": [[937, "polars-series-cumsum"]], "polars.Series.arr.first": [[896, "polars-series-arr-first"]], "polars.Series.cummax": [[934, "polars-series-cummax"]], "polars.Series.dt.date": [[950, "polars-series-dt-date"]], "polars.Series.cast": [[912, "polars-series-cast"]], "polars.Series.cummin": [[935, "polars-series-cummin"]], "polars.Series.cot": [[929, "polars-series-cot"]], "polars.Series.bin.decode": [[907, "polars-series-bin-decode"]], "polars.Series.bin.starts_with": [[910, "polars-series-bin-starts-with"]], "polars.Series.arr.max": [[899, "polars-series-arr-max"]], "polars.Series.clear": [[922, "polars-series-clear"]], "polars.Series.arr.reverse": [[901, "polars-series-arr-reverse"]], "polars.Series.drop_nans": [[943, "polars-series-drop-nans"]], "polars.Series.cumulative_eval": [[938, "polars-series-cumulative-eval"]], "polars.Series.arr.last": [[898, "polars-series-arr-last"]], "polars.Series.cat.to_local": [[917, "polars-series-cat-to-local"]], "polars.LazyFrame.join": [[806, "polars-lazyframe-join"]], "polars.LazyFrame.mean": [[814, "polars-lazyframe-mean"]], "polars.LazyFrame.rolling": [[825, "polars-lazyframe-rolling"]], "polars.LazyFrame.min": [[818, "polars-lazyframe-min"]], "polars.LazyFrame.max": [[813, "polars-lazyframe-max"]], "polars.LazyFrame.groupby_dynamic": [[801, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.shift_and_fill": [[832, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.filter": [[794, "polars-lazyframe-filter"]], "polars.LazyFrame.group_by": [[797, "polars-lazyframe-group-by"]], "polars.LazyFrame.limit": [[810, "polars-lazyframe-limit"]], "polars.LazyFrame.rename": [[823, "polars-lazyframe-rename"]], "polars.LazyFrame.serialize": [[829, "polars-lazyframe-serialize"]], "polars.LazyFrame.reverse": [[824, "polars-lazyframe-reverse"]], "polars.LazyFrame.std": [[836, "polars-lazyframe-std"]], "polars.LazyFrame.explain": [[789, "polars-lazyframe-explain"]], "polars.LazyFrame.first": [[795, "polars-lazyframe-first"]], "polars.LazyFrame.map_batches": [[812, "polars-lazyframe-map-batches"]], "polars.LazyFrame.profile": [[821, "polars-lazyframe-profile"]], "polars.LazyFrame.select_seq": [[828, "polars-lazyframe-select-seq"]], "polars.LazyFrame.map": [[811, "polars-lazyframe-map"]], "polars.LazyFrame.fill_nan": [[792, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.select": [[827, "polars-lazyframe-select"]], "polars.LazyFrame.median": [[815, "polars-lazyframe-median"]], "polars.LazyFrame.group_by_dynamic": [[798, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.dtypes": [[788, "polars-lazyframe-dtypes"]], "polars.LazyFrame.melt": [[816, "polars-lazyframe-melt"]], "polars.LazyFrame.merge_sorted": [[817, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.schema": [[826, "polars-lazyframe-schema"]], "polars.LazyFrame.count": [[784, "polars-lazyframe-count"]], "polars.LazyFrame.fill_null": [[793, "polars-lazyframe-fill-null"]], "polars.LazyFrame.tail": [[838, "polars-lazyframe-tail"]], "polars.LazyFrame.inspect": [[804, "polars-lazyframe-inspect"]], "polars.LazyFrame.explode": [[790, "polars-lazyframe-explode"]], "polars.LazyFrame.quantile": [[822, "polars-lazyframe-quantile"]], "polars.LazyFrame.null_count": [[819, "polars-lazyframe-null-count"]], "polars.LazyFrame.shift": [[831, "polars-lazyframe-shift"]], "polars.LazyFrame.group_by_rolling": [[799, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.pipe": [[820, "polars-lazyframe-pipe"]], "polars.LazyFrame.sort": [[835, "polars-lazyframe-sort"]], "polars.LazyFrame.take_every": [[839, "polars-lazyframe-take-every"]], "polars.LazyFrame.groupby_rolling": [[802, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.deserialize": [[785, "polars-lazyframe-deserialize"]], "polars.LazyFrame.lazy": [[809, "polars-lazyframe-lazy"]], "polars.LazyFrame.interpolate": [[805, "polars-lazyframe-interpolate"]], "polars.LazyFrame.head": [[803, "polars-lazyframe-head"]], "polars.LazyFrame.join_asof": [[807, "polars-lazyframe-join-asof"]], "polars.LazyFrame.set_sorted": [[830, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.show_graph": [[833, "polars-lazyframe-show-graph"]], "polars.LazyFrame.fetch": [[791, "polars-lazyframe-fetch"]], "polars.LazyFrame.gather_every": [[796, "polars-lazyframe-gather-every"]], "polars.LazyFrame.drop_nulls": [[787, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.groupby": [[800, "polars-lazyframe-groupby"]], "polars.LazyFrame.drop": [[786, "polars-lazyframe-drop"]], "polars.LazyFrame.last": [[808, "polars-lazyframe-last"]], "polars.LazyFrame.slice": [[834, "polars-lazyframe-slice"]], "polars.LazyFrame.sum": [[837, "polars-lazyframe-sum"]], "polars.cum_fold": [[695, "polars-cum-fold"]], "polars.map": [[723, "polars-map"]], "polars.cum_count": [[694, "polars-cum-count"]], "polars.fold": [[713, "polars-fold"]], "polars.lit": [[722, "polars-lit"]], "polars.element": [[710, "polars-element"]], "polars.max": [[726, "polars-max"]], "polars.all": [[677, "polars-all"]], "polars.duration": [[709, "polars-duration"]], "polars.cumreduce": [[700, "polars-cumreduce"]], "polars.from_epoch": [[715, "polars-from-epoch"]], "polars.Expr.xor": [[676, "polars-expr-xor"]], "polars.date_ranges": [[705, "polars-date-ranges"]], "polars.apply": [[681, "polars-apply"]], "polars.date_range": [[704, "polars-date-range"]], "polars.cum_reduce": [[696, "polars-cum-reduce"]], "polars.datetime_ranges": [[708, "polars-datetime-ranges"]], "polars.arctan2": [[684, "polars-arctan2"]], "polars.arg_where": [[687, "polars-arg-where"]], "polars.exclude": [[711, "polars-exclude"]], "polars.cumsum": [[701, "polars-cumsum"]], "polars.Expr.value_counts": [[673, "polars-expr-value-counts"]], "polars.arctan2d": [[685, "polars-arctan2d"]], "polars.arg_sort_by": [[686, "polars-arg-sort-by"]], "polars.arange": [[683, "polars-arange"]], "polars.last": [[721, "polars-last"]], "polars.any": [[679, "polars-any"]], "polars.count": [[692, "polars-count"]], "polars.map_batches": [[724, "polars-map-batches"]], "polars.coalesce": [[688, "polars-coalesce"]], "polars.corr": [[691, "polars-corr"]], "polars.Expr.where": [[675, "polars-expr-where"]], "polars.cov": [[693, "polars-cov"]], "polars.format": [[714, "polars-format"]], "polars.Expr.upper_bound": [[672, "polars-expr-upper-bound"]], "polars.datetime_range": [[707, "polars-datetime-range"]], "polars.max_horizontal": [[727, "polars-max-horizontal"]], "polars.int_ranges": [[720, "polars-int-ranges"]], "polars.head": [[717, "polars-head"]], "polars.cumfold": [[699, "polars-cumfold"]], "polars.date": [[703, "polars-date"]], "polars.first": [[712, "polars-first"]], "polars.approx_n_unique": [[682, "polars-approx-n-unique"]], "polars.Expr.var": [[674, "polars-expr-var"]], "polars.cum_sum": [[697, "polars-cum-sum"]], "polars.cumsum_horizontal": [[702, "polars-cumsum-horizontal"]], "polars.int_range": [[719, "polars-int-range"]], "polars.datetime": [[706, "polars-datetime"]], "polars.any_horizontal": [[680, "polars-any-horizontal"]], "polars.map_groups": [[725, "polars-map-groups"]], "polars.concat_list": [[689, "polars-concat-list"]], "polars.all_horizontal": [[678, "polars-all-horizontal"]], "polars.groups": [[716, "polars-groups"]], "polars.implode": [[718, "polars-implode"]], "polars.concat_str": [[690, "polars-concat-str"]], "polars.cum_sum_horizontal": [[698, "polars-cum-sum-horizontal"]], "polars.Series.var": [[1235, "polars-series-var"]], "Manipulation/selection": [[1249, "manipulation-selection"], [872, "manipulation-selection"], [764, "manipulation-selection"], [301, "manipulation-selection"]], "Categories": [[1242, "categories"], [755, "categories"]], "Utils": [[1256, "utils"]], "Computation": [[1243, "computation"], [758, "computation"], [295, "computation"]], "Array": [[1238, "array"], [752, "array"]], "Boolean": [[1241, "boolean"], [754, "boolean"]], "polars.Series.upper_bound": [[1233, "polars-series-upper-bound"]], "polars.Series.value_counts": [[1234, "polars-series-value-counts"]], "String": [[1251, "string"], [767, "string"]], "Descriptive": [[1244, "descriptive"], [868, "descriptive"], [296, "descriptive"]], "Temporal": [[1253, "temporal"], [769, "temporal"], [303, "temporal"]], "Binary": [[1240, "binary"], [753, "binary"], [766, "binary"]], "Plot": [[1250, "plot"], [302, "plot"]], "polars.Series.zip_with": [[1237, "polars-series-zip-with"]], "polars.Series.view": [[1236, "polars-series-view"]], "polars.Series.unique_counts": [[1232, "polars-series-unique-counts"]], "Series": [[1246, "series"]], "Attributes": [[1239, "attributes"], [867, "attributes"], [294, "attributes"]], "List": [[1247, "list"], [761, "list"]], "Miscellaneous": [[1248, "miscellaneous"], [871, "miscellaneous"], [763, "miscellaneous"], [771, "miscellaneous"], [300, "miscellaneous"]], "Testing": [[1255, "testing"]], "Asserts": [[1255, "asserts"]], "Parametric testing": [[1255, "parametric-testing"]], "Polars primitives": [[1255, "polars-primitives"]], "Strategy helpers": [[1255, "strategy-helpers"]], "Profiles": [[1255, "profiles"]], "Export": [[1245, "export"], [297, "export"]], "Struct": [[1252, "struct"], [768, "struct"]], "SQL": [[1254, "sql"]], "Methods": [[1254, "methods"]], "polars.Series.any": [[878, "polars-series-any"]], "polars.Series.arccos": [[881, "polars-series-arccos"]], "polars.Series.arctanh": [[886, "polars-series-arctanh"]], "polars.Series.arg_sort": [[889, "polars-series-arg-sort"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[858, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.alias": [[876, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[855, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[857, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[863, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.with_columns": [[846, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[854, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[861, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[859, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arr.any": [[893, "polars-series-arr-any"]], "GroupBy": [[869, "groupby"], [298, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[864, "polars-lazyframe-group-by-lazygroupby-quantile"]], "Read/write logical plan": [[871, "read-write-logical-plan"]], "polars.Series.arcsin": [[883, "polars-series-arcsin"]], "polars.Series.arg_min": [[888, "polars-series-arg-min"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[852, "polars-lazyframe-group-by-lazygroupby-all"]], "Selectors": [[873, "selectors"]], "Importing": [[873, "importing"]], "Set operations": [[873, "set-operations"]], "Functions": [[873, "functions"], [759, "functions"], [771, "functions"]], "polars.Series.arg_unique": [[891, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[866, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[862, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.arg_true": [[890, "polars-series-arg-true"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[853, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.with_columns_seq": [[847, "polars-lazyframe-with-columns-seq"]], "polars.Series.apply": [[880, "polars-series-apply"]], "polars.LazyFrame.unique": [[841, "polars-lazyframe-unique"]], "polars.Series.arr.arg_min": [[895, "polars-series-arr-arg-min"]], "polars.Series.arcsinh": [[884, "polars-series-arcsinh"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[856, "polars-lazyframe-group-by-lazygroupby-head"]], "LazyFrame": [[870, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[860, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.with_row_count": [[849, "polars-lazyframe-with-row-count"]], "polars.Series.arr.arg_max": [[894, "polars-series-arr-arg-max"]], "polars.Series.arr.all": [[892, "polars-series-arr-all"]], "polars.LazyFrame.update": [[843, "polars-lazyframe-update"]], "polars.Series.arctan": [[885, "polars-series-arctan"]], "polars.Series.append": [[879, "polars-series-append"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[851, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.with_row_index": [[850, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.var": [[844, "polars-lazyframe-var"]], "polars.LazyFrame.top_k": [[840, "polars-lazyframe-top-k"]], "polars.LazyFrame.with_context": [[848, "polars-lazyframe-with-context"]], "polars.Series.all": [[877, "polars-series-all"]], "polars.LazyFrame.unnest": [[842, "polars-lazyframe-unnest"]], "polars.Series.abs": [[875, "polars-series-abs"]], "polars.LazyFrame.width": [[845, "polars-lazyframe-width"]], "polars.Series.arccosh": [[882, "polars-series-arccosh"]], "polars.Series.arg_max": [[887, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[865, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Expr.str.json_decode": [[617, "polars-expr-str-json-decode"]], "polars.Expr.str.to_lowercase": [[651, "polars-expr-str-to-lowercase"]], "polars.Expr.suffix": [[660, "polars-expr-suffix"]], "polars.Expr.str.slice": [[635, "polars-expr-str-slice"]], "polars.Expr.str.to_time": [[652, "polars-expr-str-to-time"]], "polars.Expr.str.zfill": [[655, "polars-expr-str-zfill"]], "polars.Expr.str.ljust": [[623, "polars-expr-str-ljust"]], "polars.Expr.str.to_titlecase": [[653, "polars-expr-str-to-titlecase"]], "polars.Expr.str.strip_chars": [[641, "polars-expr-str-strip-chars"]], "polars.Expr.str.replace_all": [[630, "polars-expr-str-replace-all"]], "polars.Expr.take": [[663, "polars-expr-take"]], "polars.Expr.truediv": [[669, "polars-expr-truediv"]], "polars.Expr.str.starts_with": [[639, "polars-expr-str-starts-with"]], "polars.Expr.str.pad_end": [[626, "polars-expr-str-pad-end"]], "polars.Expr.str.replace": [[629, "polars-expr-str-replace"]], "polars.Expr.str.to_datetime": [[648, "polars-expr-str-to-datetime"]], "polars.Expr.str.split": [[636, "polars-expr-str-split"]], "polars.Expr.str.replace_many": [[631, "polars-expr-str-replace-many"]], "polars.Expr.str.strip_chars_start": [[643, "polars-expr-str-strip-chars-start"]], "polars.Expr.sub": [[659, "polars-expr-sub"]], "polars.Expr.unique": [[670, "polars-expr-unique"]], "polars.Expr.str.lstrip": [[624, "polars-expr-str-lstrip"]], "polars.Expr.str.strip_prefix": [[644, "polars-expr-str-strip-prefix"]], "polars.Expr.struct.json_encode": [[657, "polars-expr-struct-json-encode"]], "polars.Expr.str.pad_start": [[627, "polars-expr-str-pad-start"]], "polars.Expr.str.lengths": [[622, "polars-expr-str-lengths"]], "polars.Expr.struct.rename_fields": [[658, "polars-expr-struct-rename-fields"]], "polars.Expr.sum": [[661, "polars-expr-sum"]], "polars.Expr.str.len_chars": [[621, "polars-expr-str-len-chars"]], "polars.Expr.to_physical": [[667, "polars-expr-to-physical"]], "polars.Expr.unique_counts": [[671, "polars-expr-unique-counts"]], "polars.Expr.take_every": [[664, "polars-expr-take-every"]], "polars.Expr.str.n_chars": [[625, "polars-expr-str-n-chars"]], "polars.Expr.tail": [[662, "polars-expr-tail"]], "polars.Expr.str.reverse": [[632, "polars-expr-str-reverse"]], "polars.Expr.str.strip": [[640, "polars-expr-str-strip"]], "polars.Expr.str.to_decimal": [[649, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_integer": [[650, "polars-expr-str-to-integer"]], "polars.Expr.str.to_date": [[647, "polars-expr-str-to-date"]], "polars.Expr.str.strip_suffix": [[645, "polars-expr-str-strip-suffix"]], "polars.Expr.str.strptime": [[646, "polars-expr-str-strptime"]], "polars.Expr.str.rstrip": [[634, "polars-expr-str-rstrip"]], "polars.Expr.str.splitn": [[638, "polars-expr-str-splitn"]], "polars.Expr.str.len_bytes": [[620, "polars-expr-str-len-bytes"]], "polars.Expr.top_k": [[668, "polars-expr-top-k"]], "polars.Expr.struct.field": [[656, "polars-expr-struct-field"]], "polars.Expr.tanh": [[666, "polars-expr-tanh"]], "polars.Expr.str.strip_chars_end": [[642, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.to_uppercase": [[654, "polars-expr-str-to-uppercase"]], "polars.Expr.tan": [[665, "polars-expr-tan"]], "polars.Expr.str.parse_int": [[628, "polars-expr-str-parse-int"]], "polars.Expr.str.split_exact": [[637, "polars-expr-str-split-exact"]], "polars.Expr.str.rjust": [[633, "polars-expr-str-rjust"]], "polars.Expr.str.json_path_match": [[619, "polars-expr-str-json-path-match"]], "polars.Expr.str.json_extract": [[618, "polars-expr-str-json-extract"]], "polars.Expr.str.extract_groups": [[616, "polars-expr-str-extract-groups"]], "polars.Expr.list.tail": [[509, "polars-expr-list-tail"]], "polars.Expr.max": [[524, "polars-expr-max"]], "polars.Expr.meta.has_multiple_outputs": [[528, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.ne": [[530, "polars-expr-meta-ne"]], "polars.Expr.name.to_lowercase": [[546, "polars-expr-name-to-lowercase"]], "polars.Expr.list.take": [[510, "polars-expr-list-take"]], "polars.Expr.meta.tree_format": [[534, "polars-expr-meta-tree-format"]], "polars.Expr.list.set_union": [[504, "polars-expr-list-set-union"]], "polars.Expr.list.to_struct": [[512, "polars-expr-list-to-struct"]], "polars.Expr.name.prefix": [[544, "polars-expr-name-prefix"]], "polars.Expr.list.to_array": [[511, "polars-expr-list-to-array"]], "polars.Expr.median": [[526, "polars-expr-median"]], "polars.Expr.log": [[514, "polars-expr-log"]], "polars.Expr.log1p": [[516, "polars-expr-log1p"]], "polars.Expr.list.shift": [[505, "polars-expr-list-shift"]], "polars.Expr.meta.pop": [[532, "polars-expr-meta-pop"]], "polars.Expr.nan_max": [[548, "polars-expr-nan-max"]], "polars.Expr.meta.output_name": [[531, "polars-expr-meta-output-name"]], "polars.Expr.meta.write_json": [[536, "polars-expr-meta-write-json"]], "polars.Expr.n_unique": [[541, "polars-expr-n-unique"]], "polars.Expr.not_": [[552, "polars-expr-not"]], "polars.Expr.ne_missing": [[551, "polars-expr-ne-missing"]], "polars.Expr.meta.eq": [[527, "polars-expr-meta-eq"]], "polars.Expr.meta.is_regex_projection": [[529, "polars-expr-meta-is-regex-projection"]], "polars.Expr.name.suffix": [[545, "polars-expr-name-suffix"]], "polars.Expr.pct_change": [[556, "polars-expr-pct-change"]], "polars.Expr.meta.undo_aliases": [[535, "polars-expr-meta-undo-aliases"]], "polars.Expr.peak_max": [[557, "polars-expr-peak-max"]], "polars.Expr.mod": [[538, "polars-expr-mod"]], "polars.Expr.pipe": [[559, "polars-expr-pipe"]], "polars.Expr.log10": [[515, "polars-expr-log10"]], "polars.Expr.map_dict": [[522, "polars-expr-map-dict"]], "polars.Expr.map_elements": [[523, "polars-expr-map-elements"]], "polars.Expr.lower_bound": [[517, "polars-expr-lower-bound"]], "polars.Expr.mul": [[540, "polars-expr-mul"]], "polars.Expr.name.to_uppercase": [[547, "polars-expr-name-to-uppercase"]], "polars.Expr.peak_min": [[558, "polars-expr-peak-min"]], "polars.Expr.name.keep": [[542, "polars-expr-name-keep"]], "polars.Expr.map_batches": [[521, "polars-expr-map-batches"]], "polars.Expr.min": [[537, "polars-expr-min"]], "polars.Expr.mean": [[525, "polars-expr-mean"]], "polars.Expr.over": [[555, "polars-expr-over"]], "polars.Expr.list.slice": [[506, "polars-expr-list-slice"]], "polars.Expr.list.sum": [[508, "polars-expr-list-sum"]], "polars.Expr.mode": [[539, "polars-expr-mode"]], "polars.Expr.nan_min": [[549, "polars-expr-nan-min"]], "polars.Expr.map_alias": [[520, "polars-expr-map-alias"]], "polars.Expr.lt": [[518, "polars-expr-lt"]], "polars.Expr.map": [[519, "polars-expr-map"]], "polars.Expr.or_": [[554, "polars-expr-or"]], "polars.Expr.list.sort": [[507, "polars-expr-list-sort"]], "polars.Expr.ne": [[550, "polars-expr-ne"]], "polars.Expr.name.map": [[543, "polars-expr-name-map"]], "polars.Expr.meta.root_names": [[533, "polars-expr-meta-root-names"]], "polars.Expr.list.unique": [[513, "polars-expr-list-unique"]], "polars.Expr.null_count": [[553, "polars-expr-null-count"]], "polars.Expr.skew": [[599, "polars-expr-skew"]], "polars.Expr.str.count_match": [[608, "polars-expr-str-count-match"]], "polars.Expr.str.contains": [[606, "polars-expr-str-contains"]], "polars.Expr.str.explode": [[613, "polars-expr-str-explode"]], "polars.Expr.rolling_min": [[581, "polars-expr-rolling-min"]], "polars.Expr.prefix": [[561, "polars-expr-prefix"]], "polars.Expr.str.extract": [[614, "polars-expr-str-extract"]], "polars.Expr.rolling_map": [[577, "polars-expr-rolling-map"]], "polars.Expr.sample": [[589, "polars-expr-sample"]], "polars.Expr.slice": [[600, "polars-expr-slice"]], "polars.Expr.sign": [[596, "polars-expr-sign"]], "polars.Expr.qcut": [[563, "polars-expr-qcut"]], "polars.Expr.rolling_quantile": [[582, "polars-expr-rolling-quantile"]], "polars.Expr.sin": [[597, "polars-expr-sin"]], "polars.Expr.str.extract_all": [[615, "polars-expr-str-extract-all"]], "polars.Expr.str.contains_any": [[607, "polars-expr-str-contains-any"]], "polars.Expr.search_sorted": [[590, "polars-expr-search-sorted"]], "polars.Expr.sinh": [[598, "polars-expr-sinh"]], "polars.Expr.shift_and_fill": [[593, "polars-expr-shift-and-fill"]], "polars.Expr.rechunk": [[567, "polars-expr-rechunk"]], "polars.Expr.rolling": [[575, "polars-expr-rolling"]], "polars.Expr.rank": [[566, "polars-expr-rank"]], "polars.Expr.std": [[604, "polars-expr-std"]], "polars.Expr.sort": [[601, "polars-expr-sort"]], "polars.Expr.rle_id": [[574, "polars-expr-rle-id"]], "polars.Expr.quantile": [[564, "polars-expr-quantile"]], "polars.Expr.reinterpret": [[568, "polars-expr-reinterpret"]], "polars.Expr.rolling_mean": [[579, "polars-expr-rolling-mean"]], "polars.Expr.reshape": [[571, "polars-expr-reshape"]], "polars.Expr.rolling_sum": [[585, "polars-expr-rolling-sum"]], "polars.Expr.rolling_var": [[586, "polars-expr-rolling-var"]], "polars.Expr.rolling_apply": [[576, "polars-expr-rolling-apply"]], "polars.Expr.shuffle": [[595, "polars-expr-shuffle"]], "polars.Expr.rolling_max": [[578, "polars-expr-rolling-max"]], "polars.Expr.str.encode": [[611, "polars-expr-str-encode"]], "polars.Expr.str.concat": [[605, "polars-expr-str-concat"]], "polars.Expr.rolling_skew": [[583, "polars-expr-rolling-skew"]], "polars.Expr.round_sig_figs": [[588, "polars-expr-round-sig-figs"]], "polars.Expr.pow": [[560, "polars-expr-pow"]], "polars.Expr.sqrt": [[603, "polars-expr-sqrt"]], "polars.Expr.rolling_std": [[584, "polars-expr-rolling-std"]], "polars.Expr.shift": [[592, "polars-expr-shift"]], "polars.Expr.set_sorted": [[591, "polars-expr-set-sorted"]], "polars.Expr.rolling_median": [[580, "polars-expr-rolling-median"]], "polars.Expr.round": [[587, "polars-expr-round"]], "polars.Expr.shrink_dtype": [[594, "polars-expr-shrink-dtype"]], "polars.Expr.str.decode": [[610, "polars-expr-str-decode"]], "polars.Expr.radians": [[565, "polars-expr-radians"]], "polars.Expr.sort_by": [[602, "polars-expr-sort-by"]], "polars.Expr.str.ends_with": [[612, "polars-expr-str-ends-with"]], "polars.Expr.replace": [[570, "polars-expr-replace"]], "polars.Expr.rle": [[573, "polars-expr-rle"]], "polars.Expr.reverse": [[572, "polars-expr-reverse"]], "polars.Expr.str.count_matches": [[609, "polars-expr-str-count-matches"]], "polars.Expr.repeat_by": [[569, "polars-expr-repeat-by"]], "polars.Expr.product": [[562, "polars-expr-product"]], "polars.Expr.list.set_symmetric_difference": [[503, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.max": [[496, "polars-expr-list-max"]], "polars.Expr.hash": [[449, "polars-expr-hash"]], "polars.Expr.list.concat": [[480, "polars-expr-list-concat"]], "polars.Expr.list.contains": [[481, "polars-expr-list-contains"]], "polars.Expr.list.diff": [[484, "polars-expr-list-diff"]], "polars.Expr.keep_name": [[470, "polars-expr-keep-name"]], "polars.Expr.is_first": [[458, "polars-expr-is-first"]], "polars.Expr.is_not": [[465, "polars-expr-is-not"]], "polars.Expr.is_last": [[462, "polars-expr-is-last"]], "polars.Expr.list.count_match": [[482, "polars-expr-list-count-match"]], "polars.Expr.list.min": [[498, "polars-expr-list-min"]], "polars.Expr.list.last": [[493, "polars-expr-list-last"]], "polars.Expr.list.arg_max": [[478, "polars-expr-list-arg-max"]], "polars.Expr.is_not_null": [[467, "polars-expr-is-not-null"]], "polars.Expr.list.first": [[488, "polars-expr-list-first"]], "polars.Expr.list.mean": [[497, "polars-expr-list-mean"]], "polars.Expr.list.any": [[477, "polars-expr-list-any"]], "polars.Expr.list.all": [[476, "polars-expr-list-all"]], "polars.Expr.list.drop_nulls": [[485, "polars-expr-list-drop-nulls"]], "polars.Expr.is_null": [[468, "polars-expr-is-null"]], "polars.Expr.inspect": [[453, "polars-expr-inspect"]], "polars.Expr.is_in": [[460, "polars-expr-is-in"]], "polars.Expr.list.reverse": [[499, "polars-expr-list-reverse"]], "polars.Expr.list.gather": [[489, "polars-expr-list-gather"]], "polars.Expr.is_first_distinct": [[459, "polars-expr-is-first-distinct"]], "polars.Expr.len": [[474, "polars-expr-len"]], "polars.Expr.hist": [[451, "polars-expr-hist"]], "polars.Expr.is_between": [[455, "polars-expr-is-between"]], "polars.Expr.le": [[473, "polars-expr-le"]], "polars.Expr.list.join": [[492, "polars-expr-list-join"]], "polars.Expr.list.lengths": [[495, "polars-expr-list-lengths"]], "polars.Expr.interpolate": [[454, "polars-expr-interpolate"]], "polars.Expr.list.count_matches": [[483, "polars-expr-list-count-matches"]], "polars.Expr.list.explode": [[487, "polars-expr-list-explode"]], "polars.Expr.list.set_intersection": [[502, "polars-expr-list-set-intersection"]], "polars.Expr.gt": [[448, "polars-expr-gt"]], "polars.Expr.last": [[472, "polars-expr-last"]], "polars.Expr.is_last_distinct": [[463, "polars-expr-is-last-distinct"]], "polars.Expr.list.head": [[491, "polars-expr-list-head"]], "polars.Expr.list.set_difference": [[501, "polars-expr-list-set-difference"]], "polars.Expr.list.get": [[490, "polars-expr-list-get"]], "polars.Expr.list.sample": [[500, "polars-expr-list-sample"]], "polars.Expr.is_infinite": [[461, "polars-expr-is-infinite"]], "polars.Expr.kurtosis": [[471, "polars-expr-kurtosis"]], "polars.Expr.head": [[450, "polars-expr-head"]], "polars.Expr.limit": [[475, "polars-expr-limit"]], "polars.Expr.list.len": [[494, "polars-expr-list-len"]], "polars.Expr.is_nan": [[464, "polars-expr-is-nan"]], "polars.Expr.is_finite": [[457, "polars-expr-is-finite"]], "polars.Expr.list.eval": [[486, "polars-expr-list-eval"]], "polars.Expr.implode": [[452, "polars-expr-implode"]], "polars.Expr.is_unique": [[469, "polars-expr-is-unique"]], "polars.Expr.is_duplicated": [[456, "polars-expr-is-duplicated"]], "polars.Expr.list.arg_min": [[479, "polars-expr-list-arg-min"]], "polars.Expr.is_not_nan": [[466, "polars-expr-is-not-nan"]], "polars.Expr.dt.total_seconds": [[419, "polars-expr-dt-total-seconds"]], "polars.Expr.forward_fill": [[442, "polars-expr-forward-fill"]], "polars.Expr.dt.week": [[421, "polars-expr-dt-week"]], "polars.Expr.exp": [[432, "polars-expr-exp"]], "polars.Expr.ge": [[446, "polars-expr-ge"]], "polars.Expr.ewm_mean": [[428, "polars-expr-ewm-mean"]], "polars.Expr.dt.second": [[407, "polars-expr-dt-second"]], "polars.Expr.gather": [[444, "polars-expr-gather"]], "polars.Expr.fill_nan": [[435, "polars-expr-fill-nan"]], "polars.Expr.dt.millisecond": [[393, "polars-expr-dt-millisecond"]], "polars.Expr.dt.truncate": [[420, "polars-expr-dt-truncate"]], "polars.Expr.floor": [[440, "polars-expr-floor"]], "polars.Expr.dt.total_milliseconds": [[416, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.with_time_unit": [[423, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.nanoseconds": [[401, "polars-expr-dt-nanoseconds"]], "polars.Expr.first": [[438, "polars-expr-first"]], "polars.Expr.dt.ordinal_day": [[403, "polars-expr-dt-ordinal-day"]], "polars.Expr.gather_every": [[445, "polars-expr-gather-every"]], "polars.Expr.dt.month": [[397, "polars-expr-dt-month"]], "polars.Expr.dt.total_hours": [[414, "polars-expr-dt-total-hours"]], "polars.Expr.eq_missing": [[427, "polars-expr-eq-missing"]], "polars.Expr.exclude": [[431, "polars-expr-exclude"]], "polars.Expr.filter": [[437, "polars-expr-filter"]], "polars.Expr.dt.total_nanoseconds": [[418, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.quarter": [[404, "polars-expr-dt-quarter"]], "polars.Expr.dt.total_minutes": [[417, "polars-expr-dt-total-minutes"]], "polars.Expr.get": [[447, "polars-expr-get"]], "polars.Expr.dt.minutes": [[396, "polars-expr-dt-minutes"]], "polars.Expr.dt.minute": [[395, "polars-expr-dt-minute"]], "polars.Expr.ewm_std": [[429, "polars-expr-ewm-std"]], "polars.Expr.from_json": [[443, "polars-expr-from-json"]], "polars.Expr.dt.offset_by": [[402, "polars-expr-dt-offset-by"]], "polars.Expr.dt.microseconds": [[392, "polars-expr-dt-microseconds"]], "polars.Expr.explode": [[433, "polars-expr-explode"]], "polars.Expr.dt.replace_time_zone": [[405, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.milliseconds": [[394, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.time": [[410, "polars-expr-dt-time"]], "polars.Expr.dt.month_end": [[398, "polars-expr-dt-month-end"]], "polars.Expr.dt.nanosecond": [[400, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.month_start": [[399, "polars-expr-dt-month-start"]], "polars.Expr.dt.round": [[406, "polars-expr-dt-round"]], "polars.Expr.dt.timestamp": [[411, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[412, "polars-expr-dt-to-string"]], "polars.Expr.ewm_var": [[430, "polars-expr-ewm-var"]], "polars.Expr.fill_null": [[436, "polars-expr-fill-null"]], "polars.Expr.flatten": [[439, "polars-expr-flatten"]], "polars.Expr.entropy": [[425, "polars-expr-entropy"]], "polars.Expr.dt.weekday": [[422, "polars-expr-dt-weekday"]], "polars.Expr.dt.seconds": [[408, "polars-expr-dt-seconds"]], "polars.Expr.dt.total_microseconds": [[415, "polars-expr-dt-total-microseconds"]], "polars.Expr.extend_constant": [[434, "polars-expr-extend-constant"]], "polars.Expr.floordiv": [[441, "polars-expr-floordiv"]], "polars.Expr.dt.strftime": [[409, "polars-expr-dt-strftime"]], "polars.Expr.eq": [[426, "polars-expr-eq"]], "polars.Expr.dt.total_days": [[413, "polars-expr-dt-total-days"]], "polars.Expr.dt.year": [[424, "polars-expr-dt-year"]], "polars.Expr.bottom_k": [[347, "polars-expr-bottom-k"]], "polars.Expr.dot": [[374, "polars-expr-dot"]], "polars.Expr.clip_min": [[355, "polars-expr-clip-min"]], "polars.Expr.bin.ends_with": [[345, "polars-expr-bin-ends-with"]], "polars.Expr.cum_sum": [[364, "polars-expr-cum-sum"]], "polars.Expr.bin.contains": [[342, "polars-expr-bin-contains"]], "polars.Expr.count": [[359, "polars-expr-count"]], "polars.Expr.cum_max": [[361, "polars-expr-cum-max"]], "polars.Expr.cat.set_ordering": [[350, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.unique": [[340, "polars-expr-arr-unique"]], "polars.Expr.dt.microsecond": [[391, "polars-expr-dt-microsecond"]], "polars.Expr.clip": [[353, "polars-expr-clip"]], "polars.Expr.degrees": [[372, "polars-expr-degrees"]], "polars.Expr.arr.to_list": [[339, "polars-expr-arr-to-list"]], "polars.Expr.arr.sum": [[338, "polars-expr-arr-sum"]], "polars.Expr.dt.date": [[381, "polars-expr-dt-date"]], "polars.Expr.dt.datetime": [[382, "polars-expr-dt-datetime"]], "polars.Expr.cumulative_eval": [[370, "polars-expr-cumulative-eval"]], "polars.Expr.backward_fill": [[341, "polars-expr-backward-fill"]], "polars.Expr.cumcount": [[365, "polars-expr-cumcount"]], "polars.Expr.dt.convert_time_zone": [[380, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.is_leap_year": [[389, "polars-expr-dt-is-leap-year"]], "polars.Expr.bin.starts_with": [[346, "polars-expr-bin-starts-with"]], "polars.Expr.cut": [[371, "polars-expr-cut"]], "polars.Expr.bin.encode": [[344, "polars-expr-bin-encode"]], "polars.Expr.drop_nans": [[375, "polars-expr-drop-nans"]], "polars.Expr.cummax": [[366, "polars-expr-cummax"]], "polars.Expr.cos": [[356, "polars-expr-cos"]], "polars.Expr.dt.combine": [[379, "polars-expr-dt-combine"]], "polars.Expr.dt.hour": [[387, "polars-expr-dt-hour"]], "polars.Expr.dt.day": [[383, "polars-expr-dt-day"]], "polars.Expr.cumsum": [[369, "polars-expr-cumsum"]], "polars.Expr.dt.days": [[384, "polars-expr-dt-days"]], "polars.Expr.arr.reverse": [[336, "polars-expr-arr-reverse"]], "polars.Expr.ceil": [[352, "polars-expr-ceil"]], "polars.Expr.diff": [[373, "polars-expr-diff"]], "polars.Expr.cosh": [[357, "polars-expr-cosh"]], "polars.Expr.clip_max": [[354, "polars-expr-clip-max"]], "polars.Expr.cum_min": [[362, "polars-expr-cum-min"]], "polars.Expr.dt.hours": [[388, "polars-expr-dt-hours"]], "polars.Expr.dt.base_utc_offset": [[377, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cum_prod": [[363, "polars-expr-cum-prod"]], "polars.Expr.cot": [[358, "polars-expr-cot"]], "polars.Expr.cumprod": [[368, "polars-expr-cumprod"]], "polars.Expr.dt.epoch": [[386, "polars-expr-dt-epoch"]], "polars.Expr.cast": [[348, "polars-expr-cast"]], "polars.Expr.drop_nulls": [[376, "polars-expr-drop-nulls"]], "polars.Expr.cummin": [[367, "polars-expr-cummin"]], "polars.Expr.dt.iso_year": [[390, "polars-expr-dt-iso-year"]], "polars.Expr.dt.cast_time_unit": [[378, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cat.get_categories": [[349, "polars-expr-cat-get-categories"]], "polars.Expr.bin.decode": [[343, "polars-expr-bin-decode"]], "polars.Expr.cbrt": [[351, "polars-expr-cbrt"]], "polars.Expr.arr.sort": [[337, "polars-expr-arr-sort"]], "polars.Expr.dt.dst_offset": [[385, "polars-expr-dt-dst-offset"]], "polars.Expr.cum_count": [[360, "polars-expr-cum-count"]], "polars.DataFrame.rows_by_key": [[237, "polars-dataframe-rows-by-key"]], "polars.DataFrame.unnest": [[266, "polars-dataframe-unnest"]], "polars.DataFrame.set_sorted": [[242, "polars-dataframe-set-sorted"]], "polars.DataFrame.to_dummies": [[257, "polars-dataframe-to-dummies"]], "polars.DataFrame.unstack": [[267, "polars-dataframe-unstack"]], "polars.DataFrame.pivot": [[224, "polars-dataframe-pivot"]], "polars.DataFrame.reverse": [[233, "polars-dataframe-reverse"]], "polars.DataFrame.rolling": [[234, "polars-dataframe-rolling"]], "polars.dataframe.group_by.GroupBy.__iter__": [[277, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.shift_and_fill": [[245, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.select_seq": [[241, "polars-dataframe-select-seq"]], "polars.DataFrame.to_series": [[261, "polars-dataframe-to-series"]], "polars.DataFrame.var": [[270, "polars-dataframe-var"]], "polars.dataframe.group_by.GroupBy.agg": [[278, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.update": [[268, "polars-dataframe-update"]], "polars.DataFrame.vstack": [[271, "polars-dataframe-vstack"]], "polars.DataFrame.slice": [[247, "polars-dataframe-slice"]], "polars.DataFrame.rechunk": [[228, "polars-dataframe-rechunk"]], "polars.DataFrame.sum_horizontal": [[251, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.take_every": [[253, "polars-dataframe-take-every"]], "polars.DataFrame.rows": [[236, "polars-dataframe-rows"]], "polars.DataFrame.shrink_to_fit": [[246, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.with_row_index": [[276, "polars-dataframe-with-row-index"]], "polars.DataFrame.to_init_repr": [[258, "polars-dataframe-to-init-repr"]], "polars.DataFrame.rename": [[229, "polars-dataframe-rename"]], "polars.DataFrame.to_dict": [[255, "polars-dataframe-to-dict"]], "polars.DataFrame.with_row_count": [[275, "polars-dataframe-with-row-count"]], "polars.DataFrame.sum": [[250, "polars-dataframe-sum"]], "polars.DataFrame.to_pandas": [[260, "polars-dataframe-to-pandas"]], "polars.DataFrame.tail": [[252, "polars-dataframe-tail"]], "polars.DataFrame.width": [[272, "polars-dataframe-width"]], "polars.DataFrame.to_dicts": [[256, "polars-dataframe-to-dicts"]], "polars.DataFrame.plot": [[225, "polars-dataframe-plot"]], "polars.DataFrame.select": [[240, "polars-dataframe-select"]], "polars.DataFrame.to_numpy": [[259, "polars-dataframe-to-numpy"]], "polars.DataFrame.with_columns": [[273, "polars-dataframe-with-columns"]], "polars.DataFrame.product": [[226, "polars-dataframe-product"]], "polars.DataFrame.shape": [[243, "polars-dataframe-shape"]], "polars.DataFrame.unique": [[265, "polars-dataframe-unique"]], "polars.DataFrame.with_columns_seq": [[274, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.std": [[249, "polars-dataframe-std"]], "polars.DataFrame.transpose": [[264, "polars-dataframe-transpose"]], "polars.DataFrame.sample": [[238, "polars-dataframe-sample"]], "polars.DataFrame.replace_column": [[232, "polars-dataframe-replace-column"]], "polars.DataFrame.to_arrow": [[254, "polars-dataframe-to-arrow"]], "polars.DataFrame.schema": [[239, "polars-dataframe-schema"]], "polars.DataFrame.top_k": [[263, "polars-dataframe-top-k"]], "polars.DataFrame.sort": [[248, "polars-dataframe-sort"]], "polars.dataframe.group_by.GroupBy.all": [[279, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.replace_at_idx": [[231, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_struct": [[262, "polars-dataframe-to-struct"]], "polars.DataFrame.quantile": [[227, "polars-dataframe-quantile"]], "polars.DataFrame.upsample": [[269, "polars-dataframe-upsample"]], "polars.DataFrame.replace": [[230, "polars-dataframe-replace"]], "polars.DataFrame.row": [[235, "polars-dataframe-row"]], "polars.DataFrame.shift": [[244, "polars-dataframe-shift"]], "polars.zeros": [[751, "polars-zeros"]], "polars.repeat": [[736, "polars-repeat"]], "polars.col": [[756, "polars-col"]], "polars.LazyFrame.cache": [[777, "polars-lazyframe-cache"]], "polars.time": [[746, "polars-time"]], "polars.tail": [[745, "polars-tail"]], "polars.LazyFrame.collect": [[781, "polars-lazyframe-collect"]], "polars.var": [[749, "polars-var"]], "polars.time_ranges": [[748, "polars-time-ranges"]], "polars.min_horizontal": [[731, "polars-min-horizontal"]], "Name": [[765, "name"]], "polars.LazyFrame.cast": [[778, "polars-lazyframe-cast"]], "polars.std": [[741, "polars-std"]], "Columns / names": [[757, "columns-names"]], "polars.n_unique": [[732, "polars-n-unique"]], "polars.median": [[729, "polars-median"]], "polars.LazyFrame.collect_async": [[782, "polars-lazyframe-collect-async"]], "polars.LazyFrame.approx_n_unique": [[775, "polars-lazyframe-approx-n-unique"]], "polars.sum": [[743, "polars-sum"]], "Conversion": [[771, "conversion"]], "Parallelization": [[771, "parallelization"]], "Random": [[771, "random"]], "StringCache": [[771, "stringcache"]], "polars.LazyFrame.columns": [[783, "polars-lazyframe-columns"]], "polars.mean": [[728, "polars-mean"]], "polars.when": [[750, "polars-when"]], "API reference": [[772, "api-reference"]], "polars.rolling_cov": [[738, "polars-rolling-cov"]], "polars.reduce": [[735, "polars-reduce"]], "polars.rolling_corr": [[737, "polars-rolling-corr"]], "polars.select": [[739, "polars-select"]], "Operators": [[766, "operators"]], "Conjunction": [[766, "conjunction"]], "Comparison": [[766, "comparison"]], "Numeric": [[766, "numeric"], [303, "numeric"]], "Meta": [[762, "meta"]], "polars.time_range": [[747, "polars-time-range"]], "Input/output": [[773, "input-output"]], "CSV": [[773, "csv"]], "Feather/ IPC": [[773, "feather-ipc"]], "Parquet": [[773, "parquet"]], "Database": [[773, "database"]], "JSON": [[773, "json"]], "AVRO": [[773, "avro"]], "Spreadsheet": [[773, "spreadsheet"]], "Apache Iceberg": [[773, "apache-iceberg"]], "Delta Lake": [[773, "delta-lake"]], "Datasets": [[773, "datasets"]], "BatchedCsvReader": [[773, "batchedcsvreader"]], "Expressions": [[760, "expressions"]], "polars.LazyFrame.bottom_k": [[776, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.clone": [[780, "polars-lazyframe-clone"]], "polars.LazyFrame.clear": [[779, "polars-lazyframe-clear"]], "polars.ones": [[733, "polars-ones"]], "polars.sum_horizontal": [[744, "polars-sum-horizontal"]], "polars.quantile": [[734, "polars-quantile"]], "polars.struct": [[742, "polars-struct"]], "polars.sql_expr": [[740, "polars-sql-expr"]], "polars.min": [[730, "polars-min"]], "Window": [[770, "window"]], "polars.dataframe.group_by.GroupBy.min": [[289, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.apply": [[280, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.alias": [[309, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.median": [[288, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.and_": [[311, "polars-expr-and"]], "polars.Expr.arr.last": [[333, "polars-expr-arr-last"]], "polars.dataframe.group_by.GroupBy.map_groups": [[285, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.count": [[281, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.quantile": [[291, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arg_max": [[322, "polars-expr-arg-max"]], "polars.Expr.arr.arg_min": [[330, "polars-expr-arr-arg-min"]], "polars.Expr.arr.first": [[331, "polars-expr-arr-first"]], "polars.Expr.arg_unique": [[326, "polars-expr-arg-unique"]], "polars.Expr.agg_groups": [[308, "polars-expr-agg-groups"]], "polars.Expr.all": [[310, "polars-expr-all"]], "polars.Expr.any": [[312, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.sum": [[292, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arccos": [[316, "polars-expr-arccos"]], "polars.Expr.arcsin": [[318, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.last": [[284, "polars-dataframe-group-by-groupby-last"]], "DataFrame": [[299, "dataframe"]], "polars.Expr.arg_min": [[323, "polars-expr-arg-min"]], "Data types": [[303, "data-types"]], "Nested": [[303, "nested"]], "Other": [[303, "other"]], "polars.Expr.arccosh": [[317, "polars-expr-arccosh"]], "polars.Expr.append": [[313, "polars-expr-append"]], "polars.Expr.arctanh": [[321, "polars-expr-arctanh"]], "polars.Expr.arr.min": [[335, "polars-expr-arr-min"]], "polars.Expr.arctan": [[320, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.n_unique": [[290, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arr.all": [[327, "polars-expr-arr-all"]], "polars.Expr.arg_true": [[325, "polars-expr-arg-true"]], "polars.Expr.approx_n_unique": [[315, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.head": [[283, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arr.max": [[334, "polars-expr-arr-max"]], "polars.Expr.arr.arg_max": [[329, "polars-expr-arr-arg-max"]], "polars.Expr.arr.get": [[332, "polars-expr-arr-get"]], "polars.Expr.apply": [[314, "polars-expr-apply"]], "Exceptions": [[304, "exceptions"]], "polars.Expr.arr.any": [[328, "polars-expr-arr-any"]], "polars.dataframe.group_by.GroupBy.max": [[286, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.first": [[282, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.add": [[307, "polars-expr-add"]], "polars.Expr.abs": [[306, "polars-expr-abs"]], "polars.Expr.arg_sort": [[324, "polars-expr-arg-sort"]], "polars.Expr.arcsinh": [[319, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.tail": [[293, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.mean": [[287, "polars-dataframe-group-by-groupby-mean"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[61, "polars.List"]], "__init__() (polars.list method)": [[61, "polars.List.__init__"]], "null (class in polars)": [[62, "polars.Null"]], "__init__() (polars.null method)": [[62, "polars.Null.__init__"]], "object (class in polars)": [[63, "polars.Object"]], "__init__() (polars.object method)": [[63, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[64, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[65, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[68, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[69, "polars.SQLContext.unregister"]], "string (class in polars)": [[70, "polars.String"]], "__init__() (polars.string method)": [[70, "polars.String.__init__"]], "stringcache (class in polars)": [[71, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[71, "polars.StringCache.__init__"]], "struct (class in polars)": [[72, "polars.Struct"]], "__init__() (polars.struct method)": [[72, "polars.Struct.__init__"]], "time (class in polars)": [[73, "polars.Time"]], "__init__() (polars.time method)": [[73, "polars.Time.__init__"]], "uint16 (class in polars)": [[74, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[74, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[75, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[75, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[76, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[76, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[77, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[77, "polars.UInt8.__init__"]], "unknown (class in polars)": [[78, "polars.Unknown"]], "__init__() (polars.unknown method)": [[78, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[79, "polars.Utf8"]], "align_frames() (in module polars)": [[80, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[81, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[82, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[83, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[84, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[85, "polars.build_info"]], "collect_all() (in module polars)": [[86, "polars.collect_all"]], "collect_all_async() (in module polars)": [[87, "polars.collect_all_async"]], "concat() (in module polars)": [[88, "polars.concat"]], "disable_string_cache() (in module polars)": [[89, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[90, "polars.enable_string_cache"]], "arrowerror": [[91, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[92, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[93, "polars.exceptions.ComputeError"]], "duplicateerror": [[94, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[95, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[96, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[98, "polars.exceptions.PolarsPanicError"]], "rowserror": [[99, "polars.exceptions.RowsError"]], "schemaerror": [[100, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[101, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[102, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[103, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[104, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[105, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[106, "polars.from_dataframe"]], "from_dict() (in module polars)": [[107, "polars.from_dict"]], "from_dicts() (in module polars)": [[108, "polars.from_dicts"]], "from_numpy() (in module polars)": [[109, "polars.from_numpy"]], "from_pandas() (in module polars)": [[110, "polars.from_pandas"]], "from_records() (in module polars)": [[111, "polars.from_records"]], "from_repr() (in module polars)": [[112, "polars.from_repr"]], "get_index_type() (in module polars)": [[113, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[114, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[115, "polars.read_avro"]], "read_csv() (in module polars)": [[116, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[117, "polars.read_csv_batched"]], "read_database() (in module polars)": [[118, "polars.read_database"]], "read_database_uri() (in module polars)": [[119, "polars.read_database_uri"]], "read_delta() (in module polars)": [[120, "polars.read_delta"]], "read_excel() (in module polars)": [[121, "polars.read_excel"]], "read_ipc() (in module polars)": [[122, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[123, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[124, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[125, "polars.read_json"]], "read_ndjson() (in module polars)": [[126, "polars.read_ndjson"]], "read_ods() (in module polars)": [[127, "polars.read_ods"]], "read_parquet() (in module polars)": [[128, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[129, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[130, "polars.scan_csv"]], "scan_delta() (in module polars)": [[131, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[132, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[133, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[134, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[135, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[136, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[137, "polars.set_random_seed"]], "show_versions() (in module polars)": [[138, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[139, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[141, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[143, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[143, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[150, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[151, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[154, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[155, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[156, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[157, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[158, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[159, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[160, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[161, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[162, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[163, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[164, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[165, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[166, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[167, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[168, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[169, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[170, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[171, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[172, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[173, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[174, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[175, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[176, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[177, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[178, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[179, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[180, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[181, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[182, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[183, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[184, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[185, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[186, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[187, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[188, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[189, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[190, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[191, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[192, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[193, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[194, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[196, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[197, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[198, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[199, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[200, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[201, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[202, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[203, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[204, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[205, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[206, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[207, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[208, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[209, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[210, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[211, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[212, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[214, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[215, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[216, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[217, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[219, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[220, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[221, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[222, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[223, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[224, "polars.DataFrame.pivot"]], "plot (polars.dataframe property)": [[225, "polars.DataFrame.plot"]], "product() (polars.dataframe method)": [[226, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[227, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[228, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[229, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[230, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[231, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[232, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[233, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[234, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[235, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[236, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[237, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[238, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[239, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[240, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[241, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[242, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[243, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[244, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[245, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[246, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[247, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[248, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[249, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[250, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[251, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[252, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[253, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[254, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[255, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[256, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[257, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[258, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[259, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[260, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[261, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[262, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[263, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[264, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[265, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[266, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[267, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[268, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[269, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[270, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[271, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[272, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[273, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[275, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[276, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[306, "polars.Expr.abs"]], "add() (polars.expr method)": [[307, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[308, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[309, "polars.Expr.alias"]], "all() (polars.expr method)": [[310, "polars.Expr.all"]], "and_() (polars.expr method)": [[311, "polars.Expr.and_"]], "any() (polars.expr method)": [[312, "polars.Expr.any"]], "append() (polars.expr method)": [[313, "polars.Expr.append"]], "apply() (polars.expr method)": [[314, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[315, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[316, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[317, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[318, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[319, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[320, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[321, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[322, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[323, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[324, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[325, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[326, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[327, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[328, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[329, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[330, "polars.Expr.arr.arg_min"]], "first() (polars.expr.arr method)": [[331, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[332, "polars.Expr.arr.get"]], "last() (polars.expr.arr method)": [[333, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[334, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[335, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[336, "polars.Expr.arr.reverse"]], "sort() (polars.expr.arr method)": [[337, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[338, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[339, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[340, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[341, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[342, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[343, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[344, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[345, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[346, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[347, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[348, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[349, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[350, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[351, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[352, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[353, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[354, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[355, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[356, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[357, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[358, "polars.Expr.cot"]], "count() (polars.expr method)": [[359, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[360, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[361, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[362, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[363, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[364, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[365, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[366, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[367, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[368, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[369, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[370, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[371, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[372, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[373, "polars.Expr.diff"]], "dot() (polars.expr method)": [[374, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[375, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[376, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[377, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[378, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[379, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[380, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[381, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[382, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[383, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[384, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[385, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[386, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[387, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[388, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[389, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[390, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[391, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[392, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[393, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[394, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[395, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[396, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[397, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[398, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[399, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[400, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[401, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[402, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[403, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[404, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[405, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[406, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[407, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[408, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[409, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[410, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[411, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[412, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[413, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[414, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[415, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[416, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[417, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[418, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[419, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[420, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[421, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[422, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[423, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[424, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[425, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[426, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[427, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[428, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[429, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[430, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[431, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[432, "polars.Expr.exp"]], "explode() (polars.expr method)": [[433, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[434, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[435, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[436, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[437, "polars.Expr.filter"]], "first() (polars.expr method)": [[438, "polars.Expr.first"]], "flatten() (polars.expr method)": [[439, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[440, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[441, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[442, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[443, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[444, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[445, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[446, "polars.Expr.ge"]], "get() (polars.expr method)": [[447, "polars.Expr.get"]], "gt() (polars.expr method)": [[448, "polars.Expr.gt"]], "hash() (polars.expr method)": [[449, "polars.Expr.hash"]], "head() (polars.expr method)": [[450, "polars.Expr.head"]], "hist() (polars.expr method)": [[451, "polars.Expr.hist"]], "implode() (polars.expr method)": [[452, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[453, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[454, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[455, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[456, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[457, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[458, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[459, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[460, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[461, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[462, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[463, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[464, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[465, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[466, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[467, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[468, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[469, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[470, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[471, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[472, "polars.Expr.last"]], "le() (polars.expr method)": [[473, "polars.Expr.le"]], "len() (polars.expr method)": [[474, "polars.Expr.len"]], "limit() (polars.expr method)": [[475, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[476, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[477, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[478, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[479, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[480, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[481, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[482, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[483, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[484, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[485, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[486, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[487, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[488, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[489, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[490, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[491, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[492, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[493, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[494, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[495, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[496, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[497, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[498, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[499, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[500, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[501, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[502, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[503, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[504, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[505, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[506, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[507, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[508, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[509, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[510, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[511, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[512, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[513, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[514, "polars.Expr.log"]], "log10() (polars.expr method)": [[515, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[516, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[517, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[518, "polars.Expr.lt"]], "map() (polars.expr method)": [[519, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[520, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[521, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[522, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[523, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[524, "polars.Expr.max"]], "mean() (polars.expr method)": [[525, "polars.Expr.mean"]], "median() (polars.expr method)": [[526, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[527, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[528, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[529, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[530, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[531, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[532, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[533, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[534, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[535, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[536, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[537, "polars.Expr.min"]], "mod() (polars.expr method)": [[538, "polars.Expr.mod"]], "mode() (polars.expr method)": [[539, "polars.Expr.mode"]], "mul() (polars.expr method)": [[540, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[541, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[542, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[543, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[544, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[545, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[546, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[547, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[548, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[549, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[550, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[551, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[552, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[553, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[554, "polars.Expr.or_"]], "over() (polars.expr method)": [[555, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[556, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[557, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[558, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[559, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[560, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[561, "polars.Expr.prefix"]], "product() (polars.expr method)": [[562, "polars.Expr.product"]], "qcut() (polars.expr method)": [[563, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[564, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[565, "polars.Expr.radians"]], "rank() (polars.expr method)": [[566, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[567, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[568, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[569, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[570, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[571, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[572, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[573, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[574, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[575, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[576, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[577, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[578, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[579, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[580, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[581, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[582, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[583, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[584, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[585, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[586, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[587, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[588, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[589, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[590, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[591, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[592, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[593, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[594, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[595, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[596, "polars.Expr.sign"]], "sin() (polars.expr method)": [[597, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[598, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[599, "polars.Expr.skew"]], "slice() (polars.expr method)": [[600, "polars.Expr.slice"]], "sort() (polars.expr method)": [[601, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[602, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[603, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[604, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[605, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[606, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[607, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[608, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[609, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[610, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[611, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[612, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[613, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[614, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[615, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[616, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[617, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[618, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[619, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[620, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[621, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[622, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[623, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[624, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[625, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[626, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[627, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[628, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[629, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[630, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[631, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[632, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[633, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[634, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[635, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[636, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[637, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[638, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[639, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[640, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[641, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[642, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[643, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[644, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[645, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[646, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[647, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[648, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[649, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[650, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[651, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[652, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[653, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[654, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[655, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[656, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[657, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[658, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[659, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[660, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[661, "polars.Expr.sum"]], "tail() (polars.expr method)": [[662, "polars.Expr.tail"]], "take() (polars.expr method)": [[663, "polars.Expr.take"]], "take_every() (polars.expr method)": [[664, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[665, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[666, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[667, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[668, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[669, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[670, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[671, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[672, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[673, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[674, "polars.Expr.var"]], "where() (polars.expr method)": [[675, "polars.Expr.where"]], "xor() (polars.expr method)": [[676, "polars.Expr.xor"]], "all() (in module polars)": [[677, "polars.all"]], "all_horizontal() (in module polars)": [[678, "polars.all_horizontal"]], "any() (in module polars)": [[679, "polars.any"]], "any_horizontal() (in module polars)": [[680, "polars.any_horizontal"]], "apply() (in module polars)": [[681, "polars.apply"]], "approx_n_unique() (in module polars)": [[682, "polars.approx_n_unique"]], "arange() (in module polars)": [[683, "polars.arange"]], "arctan2() (in module polars)": [[684, "polars.arctan2"]], "arctan2d() (in module polars)": [[685, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[686, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[687, "polars.arg_where"]], "coalesce() (in module polars)": [[688, "polars.coalesce"]], "concat_list() (in module polars)": [[689, "polars.concat_list"]], "concat_str() (in module polars)": [[690, "polars.concat_str"]], "corr() (in module polars)": [[691, "polars.corr"]], "count() (in module polars)": [[692, "polars.count"]], "cov() (in module polars)": [[693, "polars.cov"]], "cum_count() (in module polars)": [[694, "polars.cum_count"]], "cum_fold() (in module polars)": [[695, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[696, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[697, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[698, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[699, "polars.cumfold"]], "cumreduce() (in module polars)": [[700, "polars.cumreduce"]], "cumsum() (in module polars)": [[701, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[702, "polars.cumsum_horizontal"]], "date() (in module polars)": [[703, "polars.date"]], "date_range() (in module polars)": [[704, "polars.date_range"]], "date_ranges() (in module polars)": [[705, "polars.date_ranges"]], "datetime() (in module polars)": [[706, "polars.datetime"]], "datetime_range() (in module polars)": [[707, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[708, "polars.datetime_ranges"]], "duration() (in module polars)": [[709, "polars.duration"]], "element() (in module polars)": [[710, "polars.element"]], "exclude() (in module polars)": [[711, "polars.exclude"]], "first() (in module polars)": [[712, "polars.first"]], "fold() (in module polars)": [[713, "polars.fold"]], "format() (in module polars)": [[714, "polars.format"]], "from_epoch() (in module polars)": [[715, "polars.from_epoch"]], "groups() (in module polars)": [[716, "polars.groups"]], "head() (in module polars)": [[717, "polars.head"]], "implode() (in module polars)": [[718, "polars.implode"]], "int_range() (in module polars)": [[719, "polars.int_range"]], "int_ranges() (in module polars)": [[720, "polars.int_ranges"]], "last() (in module polars)": [[721, "polars.last"]], "lit() (in module polars)": [[722, "polars.lit"]], "map() (in module polars)": [[723, "polars.map"]], "map_batches() (in module polars)": [[724, "polars.map_batches"]], "map_groups() (in module polars)": [[725, "polars.map_groups"]], "max() (in module polars)": [[726, "polars.max"]], "max_horizontal() (in module polars)": [[727, "polars.max_horizontal"]], "mean() (in module polars)": [[728, "polars.mean"]], "median() (in module polars)": [[729, "polars.median"]], "min() (in module polars)": [[730, "polars.min"]], "min_horizontal() (in module polars)": [[731, "polars.min_horizontal"]], "n_unique() (in module polars)": [[732, "polars.n_unique"]], "ones() (in module polars)": [[733, "polars.ones"]], "quantile() (in module polars)": [[734, "polars.quantile"]], "reduce() (in module polars)": [[735, "polars.reduce"]], "repeat() (in module polars)": [[736, "polars.repeat"]], "rolling_corr() (in module polars)": [[737, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[738, "polars.rolling_cov"]], "select() (in module polars)": [[739, "polars.select"]], "sql_expr() (in module polars)": [[740, "polars.sql_expr"]], "std() (in module polars)": [[741, "polars.std"]], "struct() (in module polars)": [[742, "polars.struct"]], "sum() (in module polars)": [[743, "polars.sum"]], "sum_horizontal() (in module polars)": [[744, "polars.sum_horizontal"]], "tail() (in module polars)": [[745, "polars.tail"]], "time() (in module polars)": [[746, "polars.time"]], "time_range() (in module polars)": [[747, "polars.time_range"]], "time_ranges() (in module polars)": [[748, "polars.time_ranges"]], "var() (in module polars)": [[749, "polars.var"]], "when() (in module polars)": [[750, "polars.when"]], "zeros() (in module polars)": [[751, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[775, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[776, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[777, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[778, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[779, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[780, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[781, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[782, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[783, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[784, "polars.LazyFrame.count"]], "deserialize() (polars.lazyframe class method)": [[785, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[786, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[787, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[788, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[789, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[790, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[791, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[792, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[793, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[794, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[795, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[796, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[797, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[798, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[799, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[800, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[801, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[802, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[803, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[804, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[805, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[806, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[807, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[808, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[809, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[810, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[811, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[812, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[813, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[814, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[815, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[816, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[817, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[818, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[819, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[820, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[821, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[822, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[823, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[824, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[825, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[826, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[827, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[828, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[829, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[830, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[831, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[832, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[833, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[834, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[835, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[836, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[837, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[838, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[839, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[840, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[841, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[842, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[843, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[844, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[845, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[846, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[847, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[848, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[849, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[850, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[852, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[853, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[854, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[855, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[856, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[857, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[858, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[859, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[860, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[861, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[862, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[863, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[864, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[865, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[866, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[873, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[873, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[873, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[873, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[873, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[873, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[873, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[873, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[873, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[873, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[873, "polars.selectors.first"]], "float() (in module polars.selectors)": [[873, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[873, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[873, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[873, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[873, "polars.selectors.matches"]], "module": [[873, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[873, "polars.selectors.numeric"]], "polars.selectors": [[873, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[873, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[873, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[873, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[873, "polars.selectors.time"]], "abs() (polars.series method)": [[875, "polars.Series.abs"]], "alias() (polars.series method)": [[876, "polars.Series.alias"]], "all() (polars.series method)": [[877, "polars.Series.all"]], "any() (polars.series method)": [[878, "polars.Series.any"]], "append() (polars.series method)": [[879, "polars.Series.append"]], "apply() (polars.series method)": [[880, "polars.Series.apply"]], "arccos() (polars.series method)": [[881, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[882, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[883, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[884, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[885, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[886, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[887, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[888, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[889, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[890, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[891, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[892, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[893, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[894, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[895, "polars.Series.arr.arg_min"]], "first() (polars.series.arr method)": [[896, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[897, "polars.Series.arr.get"]], "last() (polars.series.arr method)": [[898, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[899, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[900, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[901, "polars.Series.arr.reverse"]], "sort() (polars.series.arr method)": [[902, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[903, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[904, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[905, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[906, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[907, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[908, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[909, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[910, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[911, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[912, "polars.Series.cast"]], "cat (polars.series attribute)": [[913, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[914, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[915, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[916, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[917, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[918, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[919, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[920, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[921, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[922, "polars.Series.clear"]], "clip() (polars.series method)": [[923, "polars.Series.clip"]], "clip_max() (polars.series method)": [[924, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[925, "polars.Series.clip_min"]], "clone() (polars.series method)": [[926, "polars.Series.clone"]], "cos() (polars.series method)": [[927, "polars.Series.cos"]], "cosh() (polars.series method)": [[928, "polars.Series.cosh"]], "cot() (polars.series method)": [[929, "polars.Series.cot"]], "cum_max() (polars.series method)": [[930, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[931, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[932, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[933, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[934, "polars.Series.cummax"]], "cummin() (polars.series method)": [[935, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[936, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[937, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[938, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[939, "polars.Series.cut"]], "describe() (polars.series method)": [[940, "polars.Series.describe"]], "diff() (polars.series method)": [[941, "polars.Series.diff"]], "dot() (polars.series method)": [[942, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[943, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[944, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[945, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[946, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[947, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[948, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[949, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[950, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[951, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[952, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[953, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[954, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[955, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[956, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[957, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[958, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[959, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[960, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[961, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[962, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[963, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[964, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[965, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[966, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[967, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[968, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[969, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[970, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[971, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[972, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[973, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[974, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[975, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[976, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[977, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[978, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[979, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[980, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[981, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[982, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[983, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[984, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[985, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[986, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[987, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[988, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[989, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[990, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[991, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[992, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[993, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[994, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[995, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[996, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[997, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[998, "polars.Series.dtype"]], "entropy() (polars.series method)": [[999, "polars.Series.entropy"]], "equals() (polars.series method)": [[1000, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1001, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1002, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[1003, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1004, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1005, "polars.Series.exp"]], "explode() (polars.series method)": [[1006, "polars.Series.explode"]], "extend() (polars.series method)": [[1007, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1008, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1009, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1010, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1011, "polars.Series.filter"]], "flags (polars.series attribute)": [[1012, "polars.Series.flags"]], "floor() (polars.series method)": [[1013, "polars.Series.floor"]], "gather() (polars.series method)": [[1014, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1015, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1016, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1017, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1018, "polars.Series.hash"]], "head() (polars.series method)": [[1019, "polars.Series.head"]], "hist() (polars.series method)": [[1020, "polars.Series.hist"]], "implode() (polars.series method)": [[1021, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1022, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1023, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1024, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1025, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1026, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1027, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1028, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1029, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1030, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1031, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1032, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1033, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1034, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1035, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1036, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1037, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1038, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1039, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1040, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1041, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1042, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1043, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1044, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1045, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1046, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1047, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1048, "polars.Series.len"]], "limit() (polars.series method)": [[1049, "polars.Series.limit"]], "list (polars.series attribute)": [[1050, "polars.Series.list"]], "all() (polars.series.list method)": [[1051, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1052, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1053, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1054, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1055, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1056, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1057, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1058, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1059, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1060, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1061, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1062, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1063, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1064, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1065, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1066, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1067, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1068, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1069, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1070, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1071, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1072, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1073, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1074, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1075, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1076, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1077, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1078, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1079, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1080, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1081, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1082, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1083, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1084, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1085, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1086, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1087, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1088, "polars.Series.list.unique"]], "log() (polars.series method)": [[1089, "polars.Series.log"]], "log10() (polars.series method)": [[1090, "polars.Series.log10"]], "log1p() (polars.series method)": [[1091, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1092, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1093, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1094, "polars.Series.map_elements"]], "max() (polars.series method)": [[1095, "polars.Series.max"]], "mean() (polars.series method)": [[1096, "polars.Series.mean"]], "median() (polars.series method)": [[1097, "polars.Series.median"]], "min() (polars.series method)": [[1098, "polars.Series.min"]], "mode() (polars.series method)": [[1099, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1100, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1101, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1102, "polars.Series.name"]], "nan_max() (polars.series method)": [[1103, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1104, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1105, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1106, "polars.Series.not_"]], "null_count() (polars.series method)": [[1107, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1108, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1109, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1110, "polars.Series.peak_min"]], "plot (polars.series attribute)": [[1111, "polars.Series.plot"]], "product() (polars.series method)": [[1112, "polars.Series.product"]], "qcut() (polars.series method)": [[1113, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1114, "polars.Series.quantile"]], "rank() (polars.series method)": [[1115, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1116, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1117, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1118, "polars.Series.rename"]], "replace() (polars.series method)": [[1119, "polars.Series.replace"]], "reshape() (polars.series method)": [[1120, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1121, "polars.Series.reverse"]], "rle() (polars.series method)": [[1122, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1123, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1124, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1125, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1126, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1127, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1128, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1129, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1130, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1131, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1132, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1133, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1134, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1135, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1136, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1137, "polars.Series.sample"]], "scatter() (polars.series method)": [[1138, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1139, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1140, "polars.Series.series_equal"]], "set() (polars.series method)": [[1141, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1142, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1143, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1144, "polars.Series.shape"]], "shift() (polars.series method)": [[1145, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1146, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1147, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1148, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1149, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1150, "polars.Series.sign"]], "sin() (polars.series method)": [[1151, "polars.Series.sin"]], "sinh() (polars.series method)": [[1152, "polars.Series.sinh"]], "skew() (polars.series method)": [[1153, "polars.Series.skew"]], "slice() (polars.series method)": [[1154, "polars.Series.slice"]], "sort() (polars.series method)": [[1155, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1156, "polars.Series.sqrt"]], "std() (polars.series method)": [[1157, "polars.Series.std"]], "str (polars.series attribute)": [[1158, "polars.Series.str"]], "concat() (polars.series.str method)": [[1159, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1160, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1161, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1162, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1163, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1164, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1165, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1166, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1167, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1168, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1169, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1170, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1171, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1172, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1173, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1174, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1175, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1176, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1177, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1178, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1179, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1180, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1181, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1182, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1183, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1184, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1185, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1186, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1187, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1188, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1189, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1190, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1191, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1192, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1193, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1194, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1195, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1196, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1197, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1198, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1199, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1200, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1201, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1202, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1203, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1204, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1205, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1206, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1207, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1208, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1209, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1210, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1211, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1212, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1213, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1214, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1215, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1216, "polars.Series.sum"]], "tail() (polars.series method)": [[1217, "polars.Series.tail"]], "take() (polars.series method)": [[1218, "polars.Series.take"]], "take_every() (polars.series method)": [[1219, "polars.Series.take_every"]], "tan() (polars.series method)": [[1220, "polars.Series.tan"]], "tanh() (polars.series method)": [[1221, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1222, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1223, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1224, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1225, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1226, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1227, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1228, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1229, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1230, "polars.Series.top_k"]], "unique() (polars.series method)": [[1231, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1232, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1233, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1234, "polars.Series.value_counts"]], "var() (polars.series method)": [[1235, "polars.Series.var"]], "view() (polars.series method)": [[1236, "polars.Series.view"]], "zip_with() (polars.series method)": [[1237, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1254, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1254, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1254, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1254, "polars.SQLContext.__init__"]]}})