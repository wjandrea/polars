Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.plot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.plot", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.plot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.plot.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.plot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.plot", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 106, 136, 154, 209, 284, 298, 515, 716, 751, 848, 901, 1077, 1229], "refer": [0, 40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 129, 162, 225, 298, 301, 401, 404, 513, 558, 606, 638, 639, 640, 644, 751, 776, 860, 965, 968, 1098, 1183, 1184, 1185, 1189, 1229, 1233], "input": [0, 80, 86, 108, 116, 117, 157, 185, 188, 209, 213, 222, 240, 241, 244, 248, 251, 263, 273, 274, 277, 298, 306, 345, 423, 447, 507, 514, 515, 524, 547, 562, 594, 634, 635, 636, 637, 668, 670, 672, 673, 675, 678, 680, 681, 682, 689, 693, 703, 710, 711, 712, 714, 715, 716, 718, 722, 730, 733, 735, 741, 751, 763, 767, 788, 791, 818, 819, 820, 822, 826, 831, 837, 838, 841, 860, 906, 1007, 1073, 1074, 1077, 1102, 1128, 1229], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 121, 155, 164, 186, 187, 189, 190, 203, 209, 213, 216, 222, 224, 234, 236, 240, 251, 269, 273, 298, 309, 311, 313, 363, 504, 511, 512, 513, 515, 523, 535, 555, 567, 572, 574, 576, 578, 597, 613, 665, 669, 671, 673, 683, 695, 696, 714, 715, 716, 751, 763, 789, 790, 792, 793, 802, 803, 807, 808, 816, 818, 820, 837, 843, 848, 860, 867, 868, 870, 922, 1077, 1096, 1142, 1158, 1217, 1229], "seri": [0, 1, 2, 16, 30, 71, 72, 81, 82, 83, 84, 88, 89, 90, 105, 107, 110, 112, 139, 141, 142, 146, 166, 175, 178, 181, 183, 186, 191, 194, 195, 196, 198, 200, 202, 210, 211, 212, 213, 217, 218, 230, 231, 232, 234, 238, 250, 251, 255, 258, 261, 262, 278, 298, 312, 313, 324, 334, 341, 342, 344, 397, 426, 429, 432, 436, 437, 445, 449, 452, 453, 456, 458, 459, 460, 472, 479, 481, 502, 504, 509, 511, 513, 515, 552, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 575, 583, 586, 597, 627, 638, 639, 640, 644, 648, 655, 656, 664, 673, 675, 679, 686, 687, 690, 691, 695, 696, 698, 699, 704, 706, 710, 711, 713, 714, 715, 716, 724, 726, 727, 730, 733, 738, 739, 742, 751, 763, 785, 789, 816, 842, 860, 1221, 1223, 1225, 1228, 1230, 1233, 1234, 1235, 1236, 1238], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 86, 87, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 133, 134, 135, 139, 140, 143, 144, 152, 296, 297, 301, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 700, 701, 702, 703, 704, 705, 706, 708, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 747, 751, 763, 772, 773, 777, 781, 782, 786, 789, 797, 798, 799, 800, 802, 803, 807, 808, 812, 815, 825, 826, 832, 833, 834, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 886, 888, 922, 923, 961, 1003, 1044, 1077, 1096, 1156, 1174, 1175, 1198, 1206, 1207, 1217, 1229, 1237, 1238], "lazyfram": [0, 1, 64, 65, 67, 69, 80, 81, 82, 83, 84, 86, 87, 88, 130, 131, 132, 133, 134, 135, 136, 139, 140, 146, 207, 223, 224, 241, 274, 298, 429, 504, 751, 763, 859, 863, 1237, 1238], "express": [0, 13, 58, 59, 60, 86, 87, 143, 146, 148, 157, 171, 173, 175, 185, 188, 209, 220, 224, 235, 240, 241, 244, 248, 263, 273, 274, 277, 284, 298, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 323, 324, 331, 334, 336, 337, 338, 345, 348, 349, 350, 351, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 377, 379, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 423, 425, 426, 428, 429, 433, 435, 436, 438, 439, 440, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 462, 465, 466, 470, 471, 473, 474, 475, 478, 479, 484, 486, 503, 504, 509, 510, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 526, 528, 530, 532, 534, 535, 536, 537, 538, 539, 542, 543, 544, 546, 547, 551, 552, 553, 554, 555, 557, 561, 562, 563, 565, 581, 582, 583, 585, 587, 589, 590, 592, 594, 597, 598, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 613, 621, 622, 627, 628, 629, 630, 642, 651, 652, 655, 657, 658, 661, 662, 664, 665, 667, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 716, 718, 722, 724, 726, 727, 728, 729, 730, 731, 733, 735, 737, 738, 739, 741, 742, 747, 750, 763, 767, 772, 773, 780, 781, 782, 785, 788, 791, 812, 818, 819, 822, 823, 824, 826, 831, 837, 838, 839, 841, 848, 860, 863, 906, 921, 931, 991, 1007, 1040, 1041, 1044, 1077, 1102, 1122, 1128, 1129, 1143, 1145, 1146, 1151, 1152, 1153, 1154, 1156, 1166, 1167, 1229], "selector": [0, 40, 158, 165, 167, 171, 215, 222, 224, 257, 265, 267, 298, 423, 429, 702, 751, 763, 769, 777, 778, 781, 807, 832, 860], "extend": [0, 108, 271, 298, 426, 751, 763, 869, 991, 1229], "function": [0, 40, 71, 80, 81, 82, 83, 84, 87, 89, 90, 106, 112, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 135, 139, 140, 141, 142, 144, 154, 155, 162, 170, 178, 209, 215, 223, 224, 259, 260, 264, 267, 268, 279, 284, 298, 309, 313, 362, 398, 420, 421, 422, 443, 504, 511, 512, 513, 515, 535, 547, 551, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 591, 659, 669, 673, 684, 686, 687, 690, 691, 692, 693, 702, 703, 704, 706, 708, 709, 712, 714, 715, 716, 719, 720, 723, 724, 726, 732, 736, 740, 742, 747, 751, 763, 772, 773, 776, 782, 802, 803, 807, 811, 834, 843, 848, 860, 870, 921, 962, 984, 985, 986, 987, 1003, 1070, 1077, 1096, 1107, 1108, 1121, 1124, 1131, 1136, 1211, 1229, 1238], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 64, 71, 72, 80, 81, 83, 88, 90, 95, 96, 100, 102, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 139, 140, 141, 142, 144, 145, 146, 148, 154, 160, 172, 184, 185, 186, 187, 188, 189, 190, 203, 204, 205, 207, 209, 222, 223, 228, 234, 235, 236, 237, 246, 254, 259, 260, 264, 273, 276, 296, 298, 309, 310, 311, 315, 316, 317, 318, 319, 320, 323, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 340, 341, 345, 348, 349, 350, 351, 363, 364, 369, 370, 373, 374, 375, 377, 379, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 425, 436, 438, 439, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 465, 466, 470, 471, 473, 479, 484, 486, 492, 503, 505, 510, 515, 542, 543, 546, 547, 555, 557, 558, 561, 562, 563, 565, 567, 570, 571, 572, 573, 574, 576, 577, 578, 579, 581, 589, 590, 591, 597, 600, 601, 603, 605, 606, 607, 608, 611, 612, 613, 627, 628, 629, 630, 638, 639, 640, 642, 644, 647, 657, 658, 659, 661, 662, 665, 668, 673, 675, 684, 694, 695, 696, 697, 698, 699, 700, 710, 711, 713, 714, 715, 716, 724, 727, 737, 738, 739, 742, 747, 751, 763, 770, 771, 772, 782, 788, 789, 790, 791, 792, 793, 811, 816, 837, 860, 867, 868, 880, 882, 883, 886, 887, 888, 889, 891, 895, 897, 905, 906, 909, 922, 923, 929, 930, 933, 934, 935, 937, 939, 941, 942, 946, 948, 951, 953, 954, 955, 956, 958, 959, 960, 962, 963, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 989, 990, 1003, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1034, 1035, 1036, 1037, 1039, 1045, 1050, 1052, 1058, 1069, 1071, 1077, 1089, 1096, 1098, 1102, 1103, 1105, 1118, 1120, 1131, 1136, 1142, 1143, 1145, 1146, 1148, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1172, 1173, 1174, 1175, 1183, 1184, 1185, 1187, 1189, 1192, 1209, 1210, 1211, 1212, 1214, 1219, 1228, 1229, 1237], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 86, 87, 95, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 125, 126, 127, 130, 131, 132, 134, 138, 139, 140, 141, 142, 145, 146, 155, 178, 184, 186, 187, 189, 190, 191, 204, 205, 209, 234, 254, 260, 262, 265, 298, 309, 311, 315, 316, 317, 318, 319, 320, 323, 331, 334, 336, 337, 338, 340, 341, 342, 345, 348, 349, 350, 351, 363, 364, 369, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 423, 425, 436, 439, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 466, 470, 471, 473, 479, 484, 486, 503, 504, 515, 555, 557, 561, 562, 563, 565, 567, 589, 590, 597, 600, 601, 603, 605, 606, 607, 608, 611, 612, 613, 627, 628, 629, 630, 638, 642, 657, 658, 659, 665, 673, 675, 684, 694, 695, 696, 697, 698, 699, 700, 702, 703, 710, 711, 712, 713, 714, 715, 716, 724, 727, 737, 738, 739, 742, 747, 751, 763, 772, 773, 780, 782, 789, 790, 792, 793, 797, 812, 816, 824, 832, 860, 867, 868, 880, 882, 883, 887, 889, 891, 895, 897, 899, 906, 922, 923, 929, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 989, 1001, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1034, 1035, 1036, 1037, 1039, 1045, 1050, 1052, 1069, 1070, 1089, 1096, 1102, 1103, 1105, 1131, 1142, 1143, 1145, 1146, 1148, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1172, 1173, 1174, 1175, 1183, 1187, 1209, 1210, 1212, 1220, 1229, 1237], "config": [0, 80, 240, 273, 298, 599, 623, 700, 763, 772, 818, 837, 860, 1144, 1168], "except": [0, 139, 192, 206, 208, 252, 298, 702, 763, 798, 860, 863, 1002, 1032, 1200, 1210, 1219, 1229], "test": [0, 6, 118, 119, 121, 127, 763, 794, 801, 860], "util": [0, 112, 706, 763, 782, 860], "sql": [0, 38, 64, 68, 118, 119, 205, 244, 298, 497, 584, 684, 731, 751, 763, 822, 860, 1063, 1128, 1229], "These": [1, 40, 118, 152, 264, 298, 412, 750, 751, 962, 976], "allow": [1, 13, 39, 40, 58, 59, 60, 71, 90, 95, 106, 118, 130, 133, 134, 135, 136, 146, 148, 154, 203, 206, 207, 235, 236, 238, 259, 260, 265, 276, 298, 394, 401, 404, 492, 513, 515, 560, 581, 638, 639, 640, 751, 797, 798, 802, 803, 807, 832, 839, 860, 863, 958, 965, 968, 983, 1058, 1077, 1100, 1120, 1123, 1183, 1184, 1185, 1211, 1229, 1238], "you": [1, 15, 19, 40, 45, 60, 69, 80, 87, 88, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 122, 125, 126, 128, 130, 134, 136, 152, 172, 186, 187, 189, 190, 202, 203, 209, 220, 224, 225, 234, 235, 236, 237, 256, 259, 264, 284, 298, 301, 390, 391, 394, 397, 401, 404, 412, 423, 429, 447, 478, 504, 513, 515, 560, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 599, 612, 623, 686, 695, 700, 704, 716, 724, 727, 742, 751, 773, 778, 789, 790, 792, 793, 794, 801, 816, 824, 848, 860, 863, 954, 955, 961, 962, 965, 968, 976, 990, 1007, 1044, 1077, 1100, 1106, 1144, 1157, 1168, 1185, 1219, 1229, 1233, 1238], "regist": [1, 64, 66, 67, 68, 69, 81, 82, 83, 84, 147, 149, 751, 1237], "custom": [1, 32, 39, 40, 81, 82, 83, 84, 147, 148, 149, 155, 209, 279, 284, 298, 313, 401, 404, 504, 511, 513, 515, 568, 569, 673, 714, 715, 716, 751, 802, 803, 843, 848, 860, 870, 965, 968, 1070, 1077, 1107, 1108, 1229, 1238], "dedic": [1, 106, 203, 236, 298], "namespac": [1, 225, 297, 298, 750, 763, 859, 1238], "underli": [1, 71, 90, 98, 105, 107, 108, 109, 111, 118, 125, 126, 128, 134, 143, 146, 148, 171, 172, 203, 204, 236, 254, 298, 335, 370, 371, 375, 379, 381, 382, 383, 385, 387, 389, 392, 395, 396, 397, 399, 413, 414, 415, 416, 560, 579, 598, 602, 751, 781, 860, 863, 890, 900, 930, 931, 935, 939, 941, 942, 946, 948, 951, 953, 956, 959, 960, 961, 963, 977, 978, 979, 980, 990, 1100, 1118, 1131, 1143, 1147, 1205, 1210, 1229], "polar": [1, 298, 301, 750, 751, 757, 763, 860, 863, 1229, 1233, 1237], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 144, 237, 260, 298, 738, 747, 751, 757, 763, 860, 1209, 1210, 1229, 1237], "without": [1, 87, 112, 120, 123, 129, 131, 132, 136, 267, 268, 298, 313, 362, 398, 443, 570, 571, 572, 573, 574, 576, 577, 578, 599, 623, 730, 751, 773, 834, 860, 898, 901, 921, 962, 1003, 1096, 1144, 1168, 1210, 1229], "requir": [1, 39, 40, 45, 60, 80, 106, 110, 118, 139, 140, 141, 142, 157, 162, 235, 260, 263, 298, 332, 420, 421, 422, 505, 515, 586, 638, 639, 640, 662, 727, 751, 767, 826, 831, 860, 888, 985, 986, 987, 1071, 1130, 1183, 1184, 1185, 1210, 1211, 1214, 1229, 1233], "subclass": [1, 298], "mixin": 1, "expr": [1, 80, 81, 82, 83, 84, 171, 173, 205, 206, 220, 224, 235, 240, 241, 273, 274, 298, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 746, 747, 751, 752, 753, 756, 757, 758, 759, 760, 781, 783, 797, 798, 813, 818, 819, 820, 823, 837, 838, 860, 921, 931, 958, 976, 992, 997, 1040, 1041, 1044, 1049, 1064, 1067, 1129, 1143, 1149, 1176, 1201, 1229], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 69, 71, 80, 87, 88, 89, 90, 97, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 144, 146, 152, 154, 157, 162, 167, 170, 173, 177, 178, 184, 185, 186, 187, 188, 189, 190, 203, 205, 206, 207, 209, 215, 216, 222, 224, 234, 235, 236, 237, 240, 241, 242, 244, 248, 255, 260, 263, 268, 269, 273, 274, 277, 298, 309, 311, 326, 345, 353, 355, 356, 398, 412, 417, 419, 420, 421, 422, 447, 449, 452, 453, 456, 458, 459, 460, 463, 468, 497, 504, 513, 514, 543, 547, 555, 558, 561, 562, 563, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 588, 591, 593, 594, 608, 609, 610, 611, 618, 619, 620, 642, 647, 653, 669, 670, 672, 678, 680, 681, 682, 683, 684, 689, 693, 695, 696, 698, 699, 718, 722, 730, 733, 735, 738, 739, 741, 743, 744, 746, 750, 751, 752, 753, 756, 757, 758, 759, 760, 763, 767, 772, 773, 778, 782, 783, 788, 789, 790, 791, 792, 793, 794, 797, 798, 801, 803, 807, 808, 812, 814, 816, 818, 819, 821, 822, 826, 831, 834, 837, 838, 839, 841, 860, 863, 867, 868, 882, 898, 906, 915, 916, 962, 976, 982, 984, 985, 986, 987, 1000, 1007, 1011, 1015, 1016, 1020, 1021, 1022, 1023, 1030, 1034, 1063, 1070, 1096, 1098, 1102, 1103, 1114, 1128, 1133, 1136, 1153, 1154, 1155, 1163, 1164, 1165, 1185, 1187, 1192, 1199, 1211, 1219, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236, 1238], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 66, 80, 86, 105, 108, 110, 111, 116, 117, 120, 121, 122, 124, 127, 128, 130, 133, 134, 143, 144, 148, 152, 158, 164, 167, 174, 192, 198, 200, 202, 203, 204, 205, 207, 208, 213, 215, 219, 220, 228, 235, 236, 237, 241, 247, 251, 252, 257, 259, 265, 267, 268, 269, 274, 298, 310, 312, 333, 351, 362, 367, 368, 369, 423, 428, 434, 441, 444, 446, 449, 453, 459, 460, 462, 466, 477, 478, 484, 500, 504, 512, 513, 531, 534, 535, 536, 537, 538, 539, 545, 553, 558, 562, 564, 569, 586, 592, 594, 600, 601, 607, 608, 609, 610, 611, 616, 621, 622, 626, 632, 633, 634, 635, 652, 670, 686, 687, 688, 689, 692, 693, 695, 702, 704, 709, 726, 733, 734, 735, 741, 751, 757, 763, 769, 772, 773, 778, 780, 782, 784, 797, 802, 803, 807, 812, 819, 824, 825, 832, 834, 838, 839, 860, 863, 921, 923, 926, 927, 929, 1002, 1009, 1027, 1032, 1043, 1044, 1050, 1066, 1070, 1098, 1102, 1108, 1137, 1145, 1146, 1152, 1153, 1154, 1155, 1156, 1161, 1166, 1167, 1171, 1177, 1178, 1179, 1180, 1200, 1229, 1237, 1238], "support": [1, 39, 40, 45, 88, 105, 106, 107, 108, 109, 110, 111, 112, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 135, 143, 148, 152, 203, 204, 205, 206, 210, 212, 217, 236, 237, 247, 248, 250, 256, 260, 298, 498, 547, 562, 592, 594, 623, 627, 747, 751, 757, 797, 798, 825, 826, 860, 863, 1064, 1102, 1137, 1168, 1172, 1211, 1229, 1237], "target": [1, 38, 39, 40, 85, 121, 298, 606, 638, 639, 640, 863, 1151, 1183, 1184, 1185], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 64, 65, 69, 71, 80, 86, 87, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 154, 155, 156, 157, 160, 162, 167, 168, 170, 172, 176, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 200, 201, 202, 203, 205, 206, 207, 209, 210, 212, 214, 215, 216, 217, 219, 220, 222, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 240, 241, 244, 245, 247, 249, 250, 253, 254, 256, 259, 260, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 279, 284, 297, 298, 309, 312, 313, 314, 323, 332, 339, 341, 342, 345, 357, 358, 359, 360, 361, 362, 363, 369, 370, 382, 390, 391, 394, 397, 398, 401, 404, 412, 415, 419, 425, 441, 443, 445, 446, 447, 450, 452, 454, 457, 462, 474, 478, 479, 484, 487, 492, 493, 494, 495, 496, 497, 499, 502, 504, 505, 508, 509, 511, 512, 513, 514, 515, 519, 520, 521, 522, 523, 524, 534, 536, 537, 538, 539, 540, 541, 543, 547, 553, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 581, 583, 584, 585, 586, 587, 592, 593, 594, 599, 600, 606, 610, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 632, 633, 634, 635, 636, 637, 641, 647, 649, 652, 655, 656, 660, 662, 663, 664, 665, 669, 673, 674, 681, 684, 686, 690, 692, 693, 702, 703, 704, 706, 708, 709, 712, 714, 716, 719, 720, 723, 724, 730, 732, 736, 740, 741, 742, 747, 751, 763, 764, 766, 767, 768, 771, 772, 773, 778, 780, 782, 788, 789, 790, 791, 792, 793, 795, 797, 798, 802, 803, 807, 808, 812, 814, 816, 818, 819, 820, 822, 823, 824, 825, 826, 830, 831, 832, 834, 837, 838, 839, 840, 843, 848, 859, 860, 863, 869, 870, 879, 888, 894, 897, 899, 900, 901, 906, 909, 917, 918, 919, 920, 921, 922, 929, 930, 931, 942, 954, 955, 958, 961, 962, 965, 968, 976, 979, 984, 989, 990, 998, 999, 1001, 1003, 1008, 1012, 1014, 1015, 1017, 1018, 1024, 1026, 1028, 1029, 1040, 1044, 1045, 1050, 1053, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1068, 1071, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1090, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1106, 1107, 1109, 1110, 1112, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1137, 1138, 1140, 1144, 1145, 1151, 1155, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1177, 1178, 1179, 1180, 1185, 1186, 1192, 1193, 1198, 1199, 1201, 1202, 1205, 1207, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1218, 1219, 1229, 1233, 1237, 1238], "featur": [1, 45, 49, 51, 85, 298], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 64, 69, 71, 80, 85, 86, 87, 88, 90, 92, 94, 95, 97, 101, 103, 105, 106, 107, 108, 109, 110, 111, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 156, 157, 160, 164, 167, 169, 170, 172, 175, 179, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208, 209, 212, 215, 216, 220, 222, 223, 224, 232, 234, 235, 236, 237, 238, 241, 244, 247, 248, 249, 250, 252, 254, 259, 260, 263, 264, 265, 267, 268, 269, 270, 274, 276, 284, 297, 298, 306, 309, 311, 312, 313, 314, 324, 327, 362, 363, 367, 368, 369, 371, 381, 394, 398, 401, 412, 420, 421, 422, 425, 429, 441, 443, 445, 447, 463, 469, 477, 478, 481, 482, 492, 497, 498, 502, 504, 508, 513, 515, 519, 522, 523, 524, 547, 555, 558, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 581, 582, 583, 584, 587, 588, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 606, 607, 608, 611, 612, 616, 618, 619, 620, 621, 623, 626, 627, 630, 632, 633, 634, 635, 638, 639, 640, 642, 644, 647, 665, 666, 669, 671, 674, 679, 681, 683, 684, 685, 686, 687, 690, 691, 695, 696, 698, 699, 702, 704, 708, 709, 713, 716, 719, 720, 723, 724, 727, 728, 729, 730, 732, 736, 738, 739, 740, 741, 742, 747, 751, 766, 767, 771, 772, 773, 778, 780, 782, 785, 788, 789, 790, 791, 792, 793, 796, 797, 798, 800, 802, 803, 807, 808, 812, 816, 819, 820, 822, 824, 825, 826, 827, 831, 832, 834, 835, 838, 843, 848, 860, 863, 867, 868, 869, 870, 883, 898, 901, 906, 909, 921, 922, 923, 926, 927, 929, 931, 941, 958, 962, 965, 976, 983, 984, 985, 986, 987, 989, 990, 994, 1000, 1001, 1002, 1003, 1008, 1010, 1017, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1043, 1044, 1047, 1048, 1058, 1063, 1064, 1068, 1070, 1077, 1096, 1098, 1100, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1120, 1121, 1122, 1123, 1124, 1126, 1128, 1132, 1133, 1136, 1137, 1140, 1142, 1143, 1144, 1145, 1146, 1151, 1152, 1153, 1156, 1157, 1161, 1163, 1164, 1165, 1166, 1168, 1171, 1172, 1175, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1187, 1189, 1192, 1200, 1205, 1210, 1211, 1217, 1218, 1219, 1229, 1237, 1238], "primarili": 1, "intend": [1, 139, 140, 141, 142, 647, 1192], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 60, 64, 65, 66, 67, 69, 71, 72, 80, 87, 88, 89, 90, 106, 108, 109, 111, 113, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 155, 156, 158, 165, 167, 173, 174, 175, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 203, 204, 206, 209, 210, 212, 215, 217, 219, 220, 222, 223, 224, 225, 234, 235, 236, 237, 238, 240, 241, 245, 248, 249, 250, 256, 257, 258, 259, 260, 264, 265, 267, 268, 269, 270, 273, 274, 277, 284, 298, 301, 307, 309, 311, 313, 314, 324, 335, 336, 342, 346, 347, 362, 367, 368, 376, 380, 384, 386, 388, 393, 397, 398, 400, 401, 404, 412, 415, 417, 420, 421, 422, 423, 428, 429, 443, 446, 447, 463, 478, 492, 504, 513, 514, 515, 518, 547, 555, 558, 560, 563, 566, 567, 569, 570, 571, 572, 573, 574, 576, 577, 578, 581, 583, 585, 586, 591, 593, 594, 596, 598, 599, 602, 603, 604, 606, 607, 609, 610, 612, 613, 621, 623, 627, 629, 631, 634, 635, 636, 637, 638, 639, 640, 644, 647, 666, 669, 670, 671, 672, 674, 682, 683, 685, 686, 688, 689, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 706, 713, 716, 717, 718, 721, 722, 724, 727, 728, 729, 730, 732, 733, 734, 735, 738, 739, 740, 741, 742, 747, 750, 751, 762, 763, 766, 769, 772, 773, 777, 778, 782, 783, 784, 785, 788, 789, 790, 792, 793, 794, 798, 800, 801, 807, 816, 818, 819, 823, 826, 827, 832, 834, 835, 837, 838, 841, 848, 860, 863, 867, 868, 870, 890, 891, 899, 901, 907, 908, 921, 922, 926, 927, 936, 940, 947, 949, 952, 957, 961, 962, 964, 965, 968, 976, 979, 982, 985, 986, 987, 992, 993, 997, 1000, 1003, 1006, 1007, 1008, 1014, 1017, 1024, 1026, 1028, 1030, 1044, 1058, 1070, 1076, 1077, 1096, 1098, 1100, 1103, 1106, 1108, 1120, 1121, 1124, 1126, 1129, 1130, 1136, 1140, 1143, 1144, 1147, 1148, 1151, 1152, 1154, 1155, 1157, 1158, 1166, 1168, 1172, 1174, 1183, 1184, 1185, 1189, 1192, 1201, 1206, 1208, 1209, 1210, 1211, 1218, 1219, 1229, 1233, 1237, 1238], "librari": [1, 98, 118, 121, 513, 751, 1238], "author": 1, "domain": [1, 607, 1152], "specif": [1, 35, 39, 40, 105, 107, 109, 111, 116, 119, 120, 121, 125, 126, 127, 131, 145, 146, 158, 203, 298, 401, 404, 638, 639, 640, 644, 769, 860, 863, 965, 968, 1183, 1184, 1185, 1189, 1229, 1238], "capabl": [1, 40, 298], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 71, 80, 81, 82, 83, 84, 108, 116, 117, 118, 119, 120, 121, 130, 131, 132, 139, 140, 147, 149, 157, 158, 167, 172, 173, 185, 186, 187, 188, 189, 190, 196, 206, 234, 259, 263, 265, 269, 298, 309, 394, 398, 401, 412, 426, 447, 449, 453, 456, 458, 459, 460, 504, 515, 524, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 620, 642, 695, 696, 698, 699, 700, 738, 739, 741, 751, 767, 769, 778, 780, 789, 790, 792, 793, 798, 816, 820, 831, 832, 860, 958, 962, 965, 976, 990, 991, 1007, 1011, 1016, 1020, 1021, 1022, 1023, 1070, 1106, 1124, 1165, 1187, 1210, 1229, 1238], "mai": [1, 39, 49, 51, 60, 87, 88, 105, 107, 108, 109, 111, 116, 118, 120, 122, 125, 126, 131, 132, 133, 134, 136, 139, 141, 164, 170, 172, 186, 206, 209, 234, 245, 260, 267, 268, 269, 298, 313, 362, 369, 370, 382, 394, 398, 412, 423, 443, 481, 502, 504, 513, 515, 523, 567, 570, 571, 572, 573, 574, 576, 577, 578, 585, 612, 686, 687, 690, 691, 695, 696, 698, 699, 704, 726, 738, 739, 751, 772, 773, 782, 789, 798, 802, 803, 816, 823, 834, 840, 843, 848, 860, 900, 901, 921, 923, 929, 930, 942, 958, 962, 976, 984, 990, 1003, 1047, 1077, 1096, 1129, 1157, 1185, 1210, 1229, 1238], "exist": [1, 38, 39, 40, 80, 120, 131, 146, 264, 268, 273, 274, 298, 308, 334, 337, 338, 371, 514, 751, 814, 834, 837, 838, 860, 863, 931, 1076, 1229], "belong": [1, 186, 298, 789, 860], "core": [1, 260, 298, 1238], "cannot": [1, 116, 117, 121, 122, 127, 150, 209, 237, 238, 284, 298, 335, 423, 492, 515, 581, 602, 629, 650, 716, 751, 824, 848, 860, 890, 1058, 1077, 1120, 1147, 1174, 1229], "overrid": [1, 40, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 125, 126, 127, 143, 144, 148, 150, 298, 514, 751, 860, 1076, 1229], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 105, 106, 107, 108, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 146, 147, 148, 149, 152, 157, 158, 161, 164, 165, 166, 167, 168, 170, 171, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 189, 190, 192, 194, 198, 200, 201, 203, 205, 206, 210, 212, 214, 215, 216, 217, 219, 220, 222, 224, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 242, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 306, 307, 308, 334, 336, 337, 338, 341, 363, 366, 372, 394, 397, 398, 401, 404, 412, 423, 425, 429, 431, 435, 436, 439, 445, 447, 472, 473, 482, 483, 484, 498, 501, 504, 512, 515, 523, 525, 526, 528, 535, 536, 537, 538, 539, 544, 547, 551, 553, 555, 561, 562, 564, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 586, 593, 594, 648, 649, 650, 652, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 682, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 747, 751, 758, 767, 769, 772, 773, 774, 776, 777, 778, 780, 781, 782, 785, 788, 789, 790, 792, 793, 795, 797, 798, 807, 808, 812, 814, 815, 816, 817, 820, 821, 823, 824, 825, 826, 831, 832, 833, 834, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 866, 895, 897, 922, 923, 932, 958, 961, 962, 965, 968, 976, 989, 993, 1039, 1040, 1041, 1050, 1070, 1086, 1087, 1096, 1101, 1102, 1121, 1124, 1125, 1193, 1196, 1206, 1207, 1208, 1217, 1229, 1234, 1237, 1238], "dt": [1, 80, 121, 127, 234, 298, 567, 700, 751, 760, 816, 860, 863, 1236], "attempt": [1, 259, 298], "do": [1, 40, 58, 59, 60, 80, 86, 87, 116, 130, 139, 140, 141, 142, 172, 186, 187, 189, 190, 202, 206, 224, 234, 254, 264, 267, 298, 362, 478, 513, 547, 567, 633, 634, 635, 724, 727, 742, 751, 772, 773, 780, 789, 790, 792, 793, 798, 802, 803, 812, 816, 824, 860, 863, 921, 990, 1044, 1178, 1179, 1180, 1219, 1229], "so": [1, 118, 119, 130, 150, 184, 186, 187, 189, 190, 224, 234, 298, 324, 447, 482, 504, 515, 567, 623, 633, 634, 635, 751, 789, 790, 792, 793, 816, 860, 1048, 1168, 1178, 1179, 1180], "rais": [1, 20, 21, 25, 39, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 121, 127, 130, 139, 141, 154, 224, 235, 298, 335, 397, 398, 412, 481, 502, 523, 555, 598, 602, 620, 638, 639, 640, 642, 644, 697, 713, 751, 890, 961, 962, 976, 1047, 1068, 1096, 1143, 1147, 1165, 1183, 1184, 1185, 1187, 1189, 1210, 1219, 1229], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 81, 83, 84, 86, 87, 90, 95, 96, 98, 105, 116, 117, 118, 119, 120, 121, 123, 127, 128, 130, 132, 133, 144, 146, 148, 158, 159, 160, 170, 173, 178, 186, 187, 189, 190, 202, 203, 204, 206, 209, 220, 224, 231, 232, 234, 235, 254, 259, 264, 267, 268, 273, 284, 298, 308, 331, 335, 340, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 371, 372, 394, 397, 401, 415, 426, 428, 429, 435, 436, 439, 462, 474, 475, 478, 481, 482, 502, 503, 504, 512, 513, 515, 524, 534, 535, 554, 555, 563, 566, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 598, 602, 607, 609, 638, 639, 640, 642, 644, 655, 661, 669, 675, 679, 695, 696, 698, 699, 701, 703, 706, 710, 711, 712, 713, 724, 726, 727, 730, 733, 738, 739, 741, 742, 747, 751, 763, 769, 770, 771, 772, 773, 780, 782, 785, 789, 790, 792, 793, 798, 803, 812, 816, 824, 834, 837, 839, 848, 860, 863, 887, 890, 895, 905, 907, 908, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 931, 965, 979, 984, 991, 1017, 1029, 1040, 1041, 1044, 1047, 1048, 1068, 1069, 1077, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1121, 1124, 1143, 1147, 1152, 1154, 1183, 1184, 1185, 1187, 1189, 1210, 1219, 1229, 1237], "attributeerror": 1, "howev": [1, 108, 118, 170, 209, 259, 298, 984, 1229], "can": [1, 19, 32, 40, 45, 48, 69, 71, 72, 80, 89, 90, 96, 106, 108, 116, 117, 118, 121, 122, 127, 128, 130, 133, 135, 136, 144, 145, 146, 148, 150, 152, 157, 159, 167, 168, 178, 185, 186, 187, 188, 189, 190, 198, 200, 202, 209, 220, 224, 225, 234, 237, 240, 248, 259, 263, 264, 267, 273, 284, 298, 301, 309, 313, 353, 356, 362, 390, 391, 394, 397, 412, 426, 429, 447, 462, 478, 504, 513, 515, 523, 531, 534, 536, 537, 538, 539, 547, 553, 555, 560, 567, 570, 571, 572, 573, 574, 576, 577, 578, 583, 586, 588, 591, 594, 599, 611, 623, 633, 634, 635, 638, 652, 678, 704, 706, 716, 741, 747, 750, 751, 762, 767, 772, 778, 780, 782, 789, 790, 792, 793, 816, 818, 820, 826, 831, 837, 840, 860, 863, 870, 901, 921, 922, 954, 955, 958, 961, 962, 976, 991, 1007, 1044, 1070, 1077, 1082, 1096, 1100, 1102, 1121, 1124, 1126, 1130, 1133, 1136, 1144, 1145, 1146, 1153, 1156, 1168, 1178, 1179, 1180, 1183, 1185, 1210, 1229, 1233, 1237], "other": [1, 25, 40, 45, 69, 87, 116, 117, 118, 130, 139, 140, 141, 142, 167, 169, 172, 175, 179, 205, 206, 215, 216, 235, 237, 240, 241, 268, 271, 273, 274, 296, 298, 306, 310, 312, 324, 345, 366, 418, 419, 429, 433, 438, 440, 447, 452, 465, 472, 493, 494, 495, 496, 510, 519, 522, 530, 532, 542, 543, 546, 562, 594, 651, 659, 661, 668, 670, 672, 680, 681, 682, 689, 693, 695, 718, 722, 730, 733, 735, 751, 763, 773, 778, 785, 797, 798, 807, 808, 818, 819, 834, 837, 838, 839, 860, 863, 869, 906, 925, 983, 990, 1015, 1038, 1059, 1060, 1061, 1062, 1102, 1123, 1212, 1220, 1228, 1229], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 64, 66, 71, 80, 85, 88, 90, 116, 117, 120, 122, 124, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 148, 152, 155, 167, 172, 186, 189, 191, 203, 205, 206, 209, 210, 212, 217, 224, 234, 236, 237, 250, 256, 258, 259, 268, 269, 284, 298, 307, 309, 311, 313, 324, 344, 345, 394, 402, 423, 432, 441, 462, 515, 534, 536, 537, 538, 539, 547, 553, 560, 570, 571, 572, 573, 574, 576, 577, 578, 599, 623, 652, 663, 695, 696, 716, 751, 772, 778, 789, 790, 792, 793, 794, 797, 798, 801, 816, 834, 848, 860, 867, 868, 869, 903, 906, 922, 958, 990, 996, 1001, 1017, 1077, 1096, 1100, 1144, 1168, 1205, 1208, 1229, 1237, 1238], "gener": [1, 118, 119, 137, 143, 144, 145, 146, 148, 154, 162, 224, 238, 257, 259, 264, 298, 492, 581, 587, 675, 695, 698, 710, 711, 727, 738, 739, 751, 860, 1058, 1120, 1132, 1206, 1229, 1238], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 122, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 747, 751, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1126, 1128, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1163, 1164, 1166, 1167, 1168, 1169, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1229, 1233, 1237, 1238], "register_expr_namespac": [1, 81, 83, 84], "greet": 1, "def": [1, 71, 81, 82, 83, 84, 144, 145, 146, 148, 152, 223, 264, 298, 306, 551, 607, 635, 668, 715, 751, 773, 811, 860, 863, 1152, 1238], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 143, 1237], "self": [1, 65, 66, 67, 69, 81, 82, 83, 84, 86, 87, 159, 160, 164, 172, 192, 194, 195, 196, 208, 210, 212, 214, 215, 217, 221, 222, 224, 227, 228, 230, 231, 232, 238, 246, 247, 249, 250, 252, 257, 264, 266, 269, 270, 271, 275, 276, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 333, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 529, 530, 531, 532, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 747, 751, 766, 767, 768, 769, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 860, 869, 870, 895, 909, 990, 994, 1004, 1075, 1076, 1077, 1088, 1092, 1093, 1099, 1102, 1121, 1124, 1126, 1138, 1216, 1220, 1229], "_expr": [1, 82], "hello": [1, 25, 65, 68, 633, 634, 635, 1050, 1178, 1179, 1180], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 64, 68, 71, 80, 81, 82, 83, 84, 85, 86, 87, 97, 99, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 145, 155, 157, 159, 162, 163, 166, 168, 170, 171, 172, 173, 174, 177, 178, 180, 181, 184, 185, 186, 188, 189, 192, 194, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 218, 219, 220, 222, 223, 224, 234, 235, 236, 237, 238, 251, 252, 253, 259, 260, 263, 264, 265, 269, 273, 274, 280, 282, 284, 287, 292, 298, 309, 311, 315, 316, 317, 318, 319, 320, 323, 324, 331, 334, 336, 337, 338, 339, 348, 349, 350, 351, 363, 364, 369, 373, 374, 375, 377, 379, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 425, 436, 437, 439, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 466, 467, 470, 471, 473, 479, 481, 482, 483, 484, 486, 487, 492, 501, 502, 503, 509, 514, 524, 526, 531, 551, 555, 557, 561, 562, 563, 565, 581, 582, 588, 589, 590, 597, 600, 601, 603, 605, 606, 607, 608, 611, 612, 613, 614, 615, 617, 618, 619, 624, 625, 627, 628, 629, 630, 642, 647, 654, 656, 657, 658, 660, 661, 663, 664, 665, 668, 669, 673, 675, 676, 677, 678, 679, 684, 694, 695, 696, 697, 698, 699, 700, 703, 706, 708, 710, 711, 712, 713, 714, 715, 716, 724, 727, 730, 733, 736, 737, 738, 739, 741, 742, 751, 767, 770, 772, 773, 775, 779, 780, 782, 787, 789, 790, 792, 793, 794, 797, 800, 801, 803, 811, 812, 816, 820, 824, 829, 830, 831, 832, 837, 838, 844, 846, 851, 856, 860, 867, 868, 869, 877, 878, 880, 881, 882, 883, 887, 889, 891, 894, 898, 901, 905, 922, 923, 929, 933, 934, 935, 937, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 962, 963, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 983, 984, 989, 990, 998, 1000, 1002, 1003, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1058, 1067, 1068, 1069, 1075, 1076, 1077, 1082, 1089, 1096, 1102, 1103, 1104, 1105, 1106, 1120, 1122, 1123, 1133, 1142, 1143, 1145, 1146, 1148, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1169, 1170, 1172, 1173, 1174, 1175, 1187, 1192, 1200, 1202, 1213, 1215, 1216, 1217, 1220, 1229, 1237, 1238], "lit": [1, 308, 334, 447, 462, 534, 686, 690, 704, 724, 727, 742, 751, 993, 1229], "alia": [1, 17, 79, 80, 82, 84, 186, 208, 224, 234, 266, 273, 298, 306, 310, 334, 336, 337, 338, 339, 352, 353, 354, 355, 356, 363, 365, 369, 370, 371, 372, 375, 377, 378, 379, 382, 383, 387, 389, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 431, 433, 438, 440, 445, 447, 451, 455, 462, 465, 467, 510, 515, 519, 520, 521, 522, 524, 527, 530, 532, 534, 542, 543, 546, 548, 552, 555, 558, 560, 580, 582, 598, 599, 601, 604, 606, 607, 612, 613, 623, 624, 627, 628, 629, 630, 631, 636, 637, 648, 649, 650, 651, 659, 660, 661, 667, 668, 675, 676, 677, 680, 681, 682, 695, 698, 700, 701, 704, 705, 710, 715, 716, 726, 733, 738, 741, 751, 789, 795, 801, 816, 833, 837, 860, 922, 929, 930, 932, 935, 937, 938, 939, 945, 946, 948, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 965, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 1032, 1044, 1096, 1101, 1151, 1152, 1174, 1175, 1229], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 65, 68, 599, 623, 633, 634, 635, 645, 1050, 1144, 1168, 1178, 1179, 1180, 1190], "select": [1, 13, 38, 64, 65, 66, 80, 81, 82, 83, 115, 116, 117, 118, 119, 120, 122, 124, 128, 130, 136, 145, 201, 202, 206, 209, 220, 223, 235, 241, 247, 261, 266, 269, 298, 305, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 341, 343, 344, 348, 349, 350, 351, 362, 364, 365, 366, 367, 368, 370, 371, 372, 381, 382, 383, 390, 391, 394, 397, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 430, 432, 434, 437, 441, 443, 444, 445, 446, 448, 449, 453, 461, 462, 463, 464, 466, 478, 479, 504, 506, 507, 508, 509, 513, 515, 516, 517, 518, 529, 531, 533, 534, 540, 541, 544, 545, 546, 549, 550, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 569, 575, 579, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 607, 608, 638, 648, 650, 653, 657, 658, 660, 662, 663, 664, 665, 666, 669, 671, 674, 676, 677, 678, 679, 681, 683, 684, 685, 688, 700, 702, 703, 704, 705, 706, 708, 712, 717, 719, 720, 721, 723, 726, 727, 731, 732, 733, 734, 736, 740, 747, 751, 774, 798, 811, 819, 820, 825, 833, 839, 860, 863, 886, 888, 961, 997, 1044, 1121, 1124, 1137, 1156, 1183, 1201, 1229, 1237], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 61, 64, 65, 66, 68, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 102, 105, 106, 107, 108, 109, 110, 111, 112, 130, 136, 146, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 178, 180, 181, 183, 185, 186, 191, 192, 194, 196, 197, 198, 200, 201, 202, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 227, 229, 230, 232, 233, 234, 238, 240, 244, 247, 248, 249, 250, 251, 252, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 747, 751, 766, 767, 769, 770, 772, 773, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 869, 871, 872, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 897, 900, 902, 903, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 924, 926, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 945, 946, 948, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1027, 1029, 1034, 1035, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1082, 1089, 1091, 1092, 1093, 1096, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1128, 1132, 1133, 1134, 1135, 1137, 1138, 1139, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1163, 1164, 1166, 1167, 1168, 1169, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1198, 1200, 1203, 1204, 1206, 1207, 1208, 1212, 1213, 1214, 1215, 1216, 1217, 1220, 1229, 1237], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 80, 81, 82, 83, 84, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 127, 130, 136, 138, 139, 140, 141, 142, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 306, 307, 308, 309, 311, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 351, 352, 353, 354, 355, 356, 362, 363, 365, 366, 367, 368, 370, 371, 372, 378, 379, 381, 382, 387, 389, 394, 396, 397, 398, 399, 401, 403, 404, 405, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 512, 515, 530, 531, 532, 534, 535, 536, 537, 538, 539, 542, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 591, 593, 594, 595, 598, 599, 600, 603, 604, 606, 607, 608, 609, 612, 613, 616, 621, 623, 624, 626, 627, 628, 629, 630, 631, 632, 639, 644, 648, 649, 650, 651, 652, 654, 660, 663, 664, 665, 667, 668, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 747, 751, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 869, 871, 873, 874, 875, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 894, 895, 897, 900, 902, 903, 904, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 935, 938, 939, 941, 943, 944, 945, 950, 951, 953, 959, 961, 962, 963, 965, 967, 968, 969, 971, 972, 974, 976, 978, 979, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1040, 1042, 1043, 1044, 1045, 1049, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1091, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1126, 1128, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1148, 1149, 1151, 1152, 1153, 1154, 1157, 1158, 1161, 1166, 1168, 1169, 1171, 1172, 1176, 1177, 1184, 1189, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1229, 1237, 1238], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 60, 61, 64, 65, 66, 67, 68, 69, 72, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 120, 121, 122, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 609, 611, 612, 613, 621, 622, 629, 630, 631, 633, 634, 635, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 747, 751, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 801, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 894, 895, 900, 902, 903, 904, 906, 909, 910, 911, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 938, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1042, 1043, 1044, 1045, 1048, 1049, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1124, 1126, 1128, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1151, 1153, 1154, 1156, 1157, 1158, 1166, 1174, 1175, 1192, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1229, 1233, 1237, 1238], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 72, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 119, 130, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 305, 306, 307, 308, 310, 312, 314, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 343, 344, 345, 350, 351, 352, 353, 354, 355, 356, 362, 363, 365, 366, 369, 371, 372, 375, 377, 379, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 591, 592, 593, 594, 595, 597, 599, 601, 603, 604, 606, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 726, 730, 731, 732, 733, 734, 736, 739, 740, 741, 747, 751, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 797, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 869, 872, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 900, 902, 903, 904, 905, 909, 910, 912, 914, 915, 916, 921, 922, 923, 924, 925, 929, 931, 933, 934, 937, 939, 943, 944, 945, 950, 951, 953, 954, 955, 960, 961, 962, 966, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1031, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1126, 1128, 1132, 1134, 1136, 1137, 1138, 1139, 1140, 1142, 1146, 1151, 1153, 1154, 1156, 1158, 1166, 1167, 1174, 1175, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1188, 1190, 1191, 1198, 1199, 1200, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1229, 1233, 1237, 1238], "column_0": [1, 209, 264, 298], "register_dataframe_namespac": [1, 82, 83, 84], "split": [1, 40, 81, 204, 298, 629, 630, 1174, 1175], "splitfram": [1, 81], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 65, 81, 82, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 130, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 178, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 696, 700, 701, 702, 703, 704, 705, 706, 708, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 747, 751, 789, 816, 820, 833, 834, 846, 848, 856, 860, 863, 886, 888, 961, 1044, 1156, 1167, 1174, 1175, 1207, 1229, 1238], "_df": [1, 81], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 64, 68, 72, 80, 81, 83, 86, 87, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 144, 145, 146, 148, 161, 165, 168, 170, 171, 175, 183, 185, 186, 194, 203, 219, 222, 235, 236, 237, 240, 248, 255, 256, 264, 265, 266, 267, 273, 277, 278, 298, 307, 331, 332, 363, 425, 431, 436, 444, 452, 511, 513, 515, 524, 525, 547, 555, 561, 563, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 593, 594, 607, 628, 648, 650, 655, 659, 678, 681, 696, 699, 701, 709, 711, 713, 716, 731, 733, 739, 751, 774, 779, 781, 785, 788, 789, 818, 826, 832, 833, 837, 839, 841, 842, 860, 863, 887, 888, 904, 922, 984, 989, 994, 997, 999, 1003, 1004, 1015, 1096, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1122, 1144, 1152, 1168, 1173, 1201, 1209, 1212, 1229, 1238], "with_row_count": [1, 298, 570, 571, 573, 576, 577, 578, 751, 860, 1121, 1229], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 65, 66, 67, 68, 69, 72, 81, 82, 83, 84, 88, 94, 105, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 157, 158, 161, 165, 166, 167, 171, 175, 176, 177, 181, 182, 184, 185, 188, 201, 202, 203, 205, 206, 209, 211, 213, 215, 216, 218, 222, 224, 229, 235, 236, 237, 239, 240, 241, 248, 251, 255, 257, 259, 262, 263, 264, 265, 266, 267, 268, 273, 274, 275, 276, 277, 298, 308, 313, 334, 336, 337, 338, 363, 423, 429, 447, 456, 458, 459, 460, 462, 504, 512, 515, 523, 525, 527, 547, 553, 555, 564, 594, 607, 608, 648, 650, 652, 669, 670, 671, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 688, 689, 692, 693, 702, 703, 708, 709, 712, 717, 718, 719, 721, 722, 723, 725, 728, 729, 730, 732, 733, 734, 735, 736, 740, 741, 747, 751, 767, 769, 774, 777, 778, 781, 785, 788, 791, 797, 798, 807, 808, 814, 817, 818, 819, 820, 826, 831, 832, 833, 834, 837, 838, 839, 840, 841, 860, 863, 866, 905, 922, 1070, 1096, 1101, 1151, 1152, 1153, 1166, 1193, 1196, 1206, 1207, 1211, 1229, 1237, 1238], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 66, 67, 81, 82, 83, 84, 114, 116, 117, 130, 155, 159, 172, 180, 186, 192, 203, 204, 208, 209, 236, 237, 238, 244, 245, 249, 252, 253, 256, 258, 270, 282, 292, 298, 339, 362, 365, 370, 371, 378, 403, 415, 426, 429, 437, 442, 467, 476, 483, 492, 493, 497, 501, 504, 548, 551, 561, 576, 578, 581, 584, 585, 591, 596, 612, 613, 621, 629, 630, 633, 634, 640, 654, 656, 660, 661, 666, 668, 683, 685, 695, 696, 697, 698, 699, 700, 706, 708, 724, 727, 728, 729, 732, 736, 740, 742, 751, 770, 772, 787, 789, 794, 801, 822, 823, 827, 829, 830, 835, 846, 856, 860, 863, 894, 905, 921, 924, 930, 931, 938, 967, 979, 990, 991, 998, 1002, 1032, 1042, 1049, 1058, 1059, 1063, 1067, 1070, 1091, 1115, 1117, 1120, 1128, 1129, 1136, 1140, 1157, 1158, 1166, 1174, 1175, 1185, 1200, 1202, 1208, 1213, 1218, 1229, 1237, 1238], "filter": [1, 81, 120, 130, 131, 136, 167, 198, 199, 200, 205, 224, 284, 298, 523, 525, 604, 631, 667, 704, 741, 751, 778, 782, 795, 797, 848, 860, 863, 1124, 1229], "col": [1, 17, 37, 40, 58, 80, 81, 82, 83, 109, 111, 130, 144, 146, 175, 185, 186, 199, 201, 207, 209, 220, 223, 224, 234, 235, 240, 248, 266, 267, 273, 277, 298, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 451, 452, 455, 456, 458, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 679, 680, 681, 682, 684, 688, 700, 702, 703, 704, 705, 706, 707, 708, 709, 712, 717, 719, 720, 721, 723, 725, 726, 732, 734, 736, 740, 741, 751, 771, 785, 788, 789, 795, 800, 811, 816, 818, 826, 833, 837, 839, 841, 860, 863, 886, 888, 958, 961, 1044, 1103, 1121, 1124, 1156, 1183, 1229, 1238], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 60, 61, 64, 69, 80, 81, 82, 84, 88, 90, 106, 116, 117, 118, 119, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 138, 143, 144, 145, 146, 148, 154, 155, 158, 159, 160, 162, 163, 164, 165, 168, 169, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 224, 226, 227, 231, 232, 236, 237, 238, 239, 240, 245, 247, 248, 249, 250, 251, 253, 257, 258, 259, 260, 261, 264, 267, 269, 270, 273, 275, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 298, 305, 307, 308, 310, 313, 315, 316, 317, 318, 319, 320, 323, 324, 325, 340, 343, 344, 346, 347, 348, 349, 350, 352, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 376, 379, 380, 383, 384, 386, 387, 388, 393, 397, 399, 400, 407, 408, 410, 411, 412, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 432, 433, 437, 438, 440, 441, 443, 446, 449, 450, 453, 454, 456, 457, 458, 459, 460, 462, 463, 465, 470, 471, 474, 475, 478, 481, 482, 487, 489, 502, 504, 506, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 524, 529, 530, 532, 534, 540, 541, 542, 543, 545, 546, 548, 551, 552, 553, 555, 556, 557, 558, 562, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 595, 596, 600, 601, 606, 607, 610, 614, 615, 616, 617, 620, 625, 626, 632, 638, 640, 651, 652, 653, 655, 656, 657, 658, 659, 661, 666, 667, 669, 673, 675, 676, 677, 678, 679, 680, 681, 683, 685, 686, 690, 692, 693, 695, 697, 701, 702, 704, 710, 711, 714, 716, 719, 720, 725, 726, 731, 737, 738, 739, 740, 741, 742, 747, 751, 769, 770, 771, 775, 777, 779, 783, 784, 787, 788, 789, 790, 791, 792, 793, 796, 797, 800, 802, 803, 806, 810, 812, 813, 817, 818, 823, 824, 826, 827, 830, 835, 837, 839, 840, 841, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 860, 863, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 895, 900, 902, 903, 905, 907, 908, 910, 911, 912, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 936, 939, 940, 944, 945, 946, 947, 948, 949, 951, 952, 956, 957, 961, 962, 963, 964, 971, 972, 974, 975, 976, 982, 985, 986, 987, 992, 996, 998, 1001, 1003, 1006, 1008, 1011, 1012, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1040, 1044, 1048, 1053, 1068, 1070, 1072, 1073, 1074, 1075, 1076, 1079, 1080, 1091, 1096, 1097, 1098, 1102, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1123, 1125, 1129, 1133, 1134, 1135, 1136, 1139, 1140, 1145, 1146, 1151, 1152, 1155, 1156, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1183, 1185, 1201, 1202, 1203, 1204, 1206, 1211, 1212, 1216, 1218, 1219, 1229, 1238], "drop": [1, 108, 166, 167, 209, 265, 273, 298, 365, 367, 368, 476, 477, 555, 751, 778, 832, 837, 860, 924, 926, 927, 1042, 1043, 1096, 1229], "aaa": [1, 40, 298, 598, 648, 650, 1143], "bbb": [1, 40, 298, 648, 650, 863], "ccc": [1, 40, 298, 648, 650], "ddd": [1, 40, 298, 648, 650], "eee": [1, 40, 298, 863], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 71, 72, 80, 81, 88, 90, 92, 94, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 146, 157, 158, 162, 163, 165, 166, 167, 168, 171, 175, 176, 177, 181, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 201, 202, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 248, 249, 250, 251, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 277, 298, 308, 309, 311, 323, 331, 345, 351, 363, 371, 373, 374, 375, 379, 381, 382, 383, 385, 387, 389, 392, 395, 396, 399, 401, 402, 404, 413, 414, 416, 423, 425, 429, 431, 443, 447, 462, 466, 472, 479, 481, 499, 502, 503, 504, 514, 515, 521, 523, 525, 534, 536, 537, 538, 539, 547, 553, 555, 559, 561, 563, 567, 570, 571, 572, 573, 574, 576, 577, 578, 586, 593, 594, 597, 605, 629, 630, 638, 639, 640, 641, 642, 644, 649, 652, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 747, 751, 767, 769, 775, 777, 778, 779, 781, 785, 788, 789, 790, 791, 792, 793, 797, 798, 803, 804, 805, 806, 807, 809, 810, 811, 813, 814, 816, 817, 818, 819, 820, 821, 826, 827, 828, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 848, 860, 863, 867, 868, 887, 898, 900, 906, 922, 933, 934, 935, 939, 941, 942, 946, 948, 951, 953, 956, 959, 960, 963, 965, 966, 968, 977, 978, 980, 989, 1000, 1003, 1038, 1045, 1047, 1065, 1069, 1096, 1103, 1130, 1142, 1150, 1174, 1175, 1183, 1184, 1185, 1186, 1187, 1189, 1198, 1206, 1207, 1229, 1238], "txt": [1, 17, 130], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 64, 71, 72, 79, 89, 90, 108, 112, 116, 117, 118, 119, 130, 139, 140, 141, 142, 143, 144, 145, 148, 151, 157, 158, 168, 170, 171, 178, 184, 185, 186, 188, 206, 222, 224, 234, 237, 239, 240, 241, 248, 258, 259, 263, 264, 267, 269, 273, 274, 277, 298, 306, 336, 337, 342, 394, 398, 401, 404, 412, 423, 425, 431, 435, 447, 484, 526, 547, 551, 562, 567, 570, 571, 572, 573, 574, 576, 577, 578, 594, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 649, 670, 672, 678, 680, 681, 682, 689, 693, 695, 696, 698, 699, 705, 718, 722, 730, 733, 735, 738, 739, 741, 751, 767, 769, 779, 780, 781, 788, 789, 791, 798, 816, 817, 818, 819, 820, 826, 831, 837, 838, 841, 860, 863, 892, 898, 899, 958, 962, 965, 968, 976, 989, 1007, 1028, 1050, 1102, 1141, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1208, 1229, 1238], "register_lazyframe_namespac": [1, 81, 82, 84], "dtypeoper": [1, 83], "ldf": [1, 83, 841, 842, 845, 847, 849, 850, 851, 852, 853, 854, 855], "_ldf": [1, 83], "upcast_integer_typ": [1, 83], "with_column": [1, 17, 83, 186, 223, 234, 267, 274, 298, 306, 308, 324, 326, 327, 336, 340, 345, 352, 353, 354, 355, 356, 363, 365, 369, 375, 377, 378, 379, 387, 389, 394, 395, 396, 397, 398, 399, 401, 403, 404, 413, 414, 418, 419, 427, 428, 433, 438, 440, 441, 446, 447, 451, 452, 455, 456, 458, 459, 460, 462, 465, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 510, 512, 515, 530, 532, 534, 535, 536, 537, 538, 539, 542, 543, 547, 548, 551, 552, 553, 555, 558, 562, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 580, 584, 598, 599, 601, 603, 604, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 641, 642, 643, 645, 646, 647, 649, 651, 652, 659, 661, 668, 670, 672, 680, 682, 686, 687, 689, 696, 701, 711, 715, 718, 722, 731, 735, 739, 741, 747, 751, 789, 795, 811, 816, 838, 860, 863, 922, 961, 1044, 1096, 1229], "tp": [1, 83], "cast": [1, 39, 82, 83, 105, 139, 140, 141, 142, 178, 186, 187, 189, 190, 223, 234, 260, 273, 298, 312, 355, 356, 370, 401, 404, 546, 551, 560, 567, 609, 610, 611, 647, 653, 659, 682, 731, 751, 789, 790, 792, 793, 811, 816, 837, 860, 863, 901, 915, 916, 930, 965, 968, 1100, 1154, 1155, 1156, 1192, 1199, 1207, 1212, 1229], "int64": [1, 2, 39, 40, 43, 72, 82, 83, 88, 116, 168, 178, 186, 187, 189, 190, 207, 223, 234, 239, 254, 260, 298, 328, 329, 330, 332, 355, 356, 405, 406, 407, 408, 409, 410, 411, 423, 551, 560, 567, 609, 642, 653, 659, 675, 702, 710, 711, 713, 727, 733, 751, 771, 779, 789, 790, 792, 793, 795, 800, 811, 816, 817, 820, 860, 884, 885, 886, 888, 915, 916, 969, 970, 971, 972, 973, 974, 975, 983, 1100, 1123, 1187, 1199, 1210, 1211, 1212, 1229], "int8": [1, 72, 83, 178, 298, 331, 355, 356, 375, 379, 387, 389, 396, 399, 413, 414, 503, 653, 724, 727, 742, 751, 887, 915, 916, 924, 935, 939, 951, 953, 960, 963, 977, 978, 1069, 1104, 1199, 1216, 1229], "int16": [1, 83, 355, 356, 395, 653, 751, 863, 915, 916, 959, 1199, 1208, 1229], "int32": [1, 83, 88, 105, 108, 121, 145, 146, 186, 187, 189, 190, 204, 234, 298, 340, 382, 383, 385, 392, 416, 567, 659, 727, 751, 789, 790, 792, 793, 816, 860, 863, 942, 946, 948, 956, 980, 1075, 1212, 1229], "b": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 72, 83, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 154, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 182, 183, 184, 185, 186, 191, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 229, 232, 233, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 298, 306, 308, 309, 311, 312, 325, 333, 334, 336, 337, 338, 340, 351, 363, 366, 423, 425, 427, 428, 429, 431, 434, 441, 444, 446, 447, 449, 453, 456, 458, 459, 460, 462, 466, 472, 478, 484, 493, 494, 495, 496, 512, 515, 520, 531, 534, 535, 536, 537, 544, 545, 547, 551, 553, 555, 558, 562, 564, 566, 586, 592, 594, 605, 609, 621, 649, 652, 663, 667, 669, 670, 671, 672, 674, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 701, 702, 703, 704, 705, 708, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 728, 729, 732, 733, 734, 735, 736, 740, 751, 766, 767, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 797, 799, 800, 801, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 866, 869, 898, 900, 901, 922, 923, 925, 982, 983, 984, 990, 993, 1007, 1015, 1028, 1044, 1059, 1060, 1062, 1096, 1101, 1150, 1154, 1166, 1198, 1211, 1215, 1229, 1237], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 61, 64, 66, 67, 69, 80, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 121, 130, 148, 154, 156, 157, 158, 159, 160, 163, 164, 167, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 230, 234, 236, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 305, 306, 307, 308, 310, 312, 325, 328, 329, 330, 331, 333, 339, 340, 343, 344, 345, 351, 352, 353, 354, 355, 356, 362, 364, 366, 371, 375, 395, 396, 397, 398, 401, 404, 406, 409, 411, 412, 414, 418, 419, 424, 425, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 459, 460, 462, 465, 466, 467, 475, 476, 477, 478, 479, 481, 483, 492, 493, 494, 495, 496, 497, 498, 501, 503, 507, 510, 512, 515, 530, 532, 534, 535, 536, 537, 538, 539, 542, 543, 546, 547, 549, 550, 551, 552, 553, 556, 558, 562, 563, 564, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 584, 588, 592, 593, 594, 595, 598, 601, 607, 612, 613, 618, 619, 621, 627, 628, 629, 630, 636, 637, 638, 642, 647, 648, 650, 651, 652, 654, 659, 660, 661, 668, 670, 672, 674, 676, 677, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 695, 696, 698, 699, 701, 703, 704, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 747, 751, 766, 767, 769, 770, 771, 772, 773, 775, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 816, 822, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 869, 872, 879, 884, 885, 886, 887, 894, 903, 904, 906, 921, 923, 925, 939, 946, 948, 951, 953, 954, 955, 956, 960, 961, 962, 965, 968, 970, 973, 975, 976, 977, 978, 983, 990, 992, 993, 997, 998, 1002, 1003, 1006, 1007, 1009, 1015, 1020, 1021, 1022, 1023, 1027, 1042, 1043, 1044, 1045, 1049, 1058, 1059, 1060, 1062, 1063, 1064, 1067, 1069, 1083, 1091, 1092, 1093, 1098, 1102, 1103, 1106, 1111, 1113, 1114, 1115, 1116, 1117, 1120, 1128, 1133, 1136, 1137, 1138, 1143, 1146, 1152, 1157, 1158, 1163, 1164, 1172, 1174, 1175, 1181, 1182, 1183, 1187, 1192, 1198, 1200, 1208, 1211, 1212, 1213, 1220, 1229, 1233, 1238], "c": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 81, 83, 88, 106, 108, 110, 112, 121, 130, 144, 154, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 175, 178, 182, 183, 184, 185, 186, 192, 194, 196, 204, 205, 207, 210, 212, 214, 215, 217, 219, 220, 221, 222, 224, 226, 227, 229, 232, 233, 235, 238, 239, 240, 247, 248, 249, 250, 252, 254, 257, 258, 259, 260, 261, 263, 264, 267, 268, 270, 271, 273, 277, 281, 282, 283, 285, 286, 288, 291, 292, 298, 306, 308, 309, 311, 313, 333, 363, 429, 447, 462, 472, 484, 512, 515, 534, 535, 547, 551, 555, 586, 629, 638, 663, 670, 672, 674, 680, 682, 683, 685, 686, 687, 689, 702, 703, 704, 705, 708, 712, 715, 717, 718, 719, 720, 721, 722, 723, 732, 734, 735, 736, 740, 747, 751, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 785, 788, 789, 797, 800, 807, 810, 812, 814, 815, 817, 818, 824, 825, 826, 831, 834, 837, 839, 841, 845, 846, 847, 849, 850, 852, 855, 856, 860, 863, 900, 922, 923, 1007, 1028, 1096, 1174, 1183, 1215, 1229], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 67, 69, 80, 81, 83, 84, 88, 105, 108, 109, 110, 111, 112, 114, 116, 117, 130, 138, 139, 141, 146, 158, 159, 160, 164, 171, 172, 173, 174, 178, 180, 181, 183, 184, 185, 186, 192, 193, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 218, 219, 220, 222, 224, 225, 226, 227, 230, 234, 237, 243, 244, 248, 251, 252, 254, 255, 256, 257, 259, 262, 267, 268, 269, 272, 273, 275, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 298, 301, 306, 307, 310, 326, 327, 339, 340, 344, 345, 362, 363, 364, 365, 366, 371, 372, 397, 399, 401, 404, 405, 411, 419, 422, 423, 426, 428, 432, 433, 437, 438, 440, 442, 444, 447, 451, 455, 456, 458, 459, 460, 462, 465, 467, 475, 478, 479, 481, 483, 486, 489, 492, 493, 494, 495, 496, 497, 500, 501, 530, 532, 534, 543, 546, 547, 548, 549, 550, 551, 555, 556, 558, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 582, 588, 594, 601, 611, 612, 613, 642, 651, 654, 660, 661, 674, 679, 680, 681, 683, 685, 686, 687, 688, 689, 695, 700, 701, 702, 703, 704, 708, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 726, 732, 734, 735, 736, 740, 747, 751, 769, 770, 771, 772, 773, 780, 781, 782, 783, 784, 786, 787, 788, 789, 794, 796, 797, 798, 799, 800, 801, 805, 806, 807, 812, 816, 822, 824, 825, 826, 827, 828, 829, 834, 836, 837, 840, 841, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 869, 872, 876, 879, 882, 883, 894, 904, 906, 913, 921, 922, 923, 924, 925, 931, 932, 933, 934, 935, 961, 963, 965, 966, 968, 969, 975, 977, 978, 983, 987, 990, 991, 1002, 1003, 1006, 1007, 1013, 1019, 1044, 1045, 1049, 1052, 1058, 1059, 1060, 1062, 1063, 1067, 1075, 1083, 1091, 1092, 1093, 1096, 1097, 1098, 1102, 1103, 1106, 1108, 1109, 1110, 1112, 1113, 1116, 1120, 1133, 1136, 1139, 1146, 1156, 1157, 1187, 1200, 1213, 1216, 1220, 1229, 1238], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 67, 69, 71, 81, 83, 88, 89, 90, 105, 108, 109, 110, 111, 138, 158, 161, 165, 166, 167, 168, 169, 171, 172, 175, 180, 181, 182, 183, 184, 186, 192, 194, 196, 197, 199, 201, 202, 203, 205, 209, 210, 211, 212, 213, 214, 215, 217, 218, 221, 224, 225, 226, 227, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 244, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 266, 267, 269, 270, 271, 273, 275, 282, 291, 292, 298, 301, 306, 310, 333, 340, 355, 356, 366, 371, 375, 389, 394, 395, 396, 413, 414, 417, 419, 427, 428, 434, 437, 442, 444, 446, 467, 468, 469, 479, 493, 494, 495, 496, 515, 543, 546, 554, 557, 558, 559, 563, 565, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 594, 601, 605, 612, 613, 642, 651, 654, 668, 686, 687, 688, 701, 704, 715, 716, 734, 747, 751, 769, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 789, 794, 796, 797, 799, 801, 803, 807, 810, 812, 814, 816, 817, 818, 820, 822, 824, 825, 826, 829, 833, 836, 837, 840, 846, 855, 856, 860, 863, 904, 910, 912, 915, 916, 925, 958, 978, 983, 1003, 1034, 1035, 1045, 1059, 1060, 1062, 1083, 1098, 1103, 1105, 1111, 1113, 1115, 1117, 1146, 1150, 1157, 1187, 1199, 1229, 1237, 1238], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 81, 83, 88, 158, 161, 162, 164, 165, 166, 168, 169, 171, 175, 180, 182, 186, 192, 194, 197, 205, 210, 212, 214, 216, 217, 221, 224, 227, 229, 232, 234, 235, 237, 238, 239, 240, 244, 247, 249, 250, 251, 252, 258, 259, 260, 261, 267, 269, 270, 271, 298, 306, 310, 330, 356, 371, 375, 395, 397, 398, 412, 414, 424, 437, 442, 446, 467, 493, 494, 495, 496, 546, 558, 563, 567, 577, 594, 641, 654, 686, 687, 698, 704, 715, 716, 734, 751, 769, 774, 777, 779, 781, 785, 787, 789, 794, 796, 797, 801, 808, 810, 813, 814, 816, 817, 818, 822, 829, 860, 863, 876, 886, 931, 935, 942, 961, 962, 976, 978, 988, 1029, 1059, 1060, 1062, 1102, 1103, 1116, 1186, 1229, 1238], "float32": [1, 15, 37, 58, 83, 158, 178, 258, 259, 298, 713, 769, 860, 863, 1010, 1075, 1229], "lazi": [1, 64, 65, 66, 67, 69, 83, 88, 130, 146, 206, 223, 224, 298, 515, 706, 724, 727, 742, 751, 797, 798, 839, 841, 842, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 860, 863, 1237, 1238], "i16": [1, 83, 375, 395, 414, 586, 751, 863, 959, 1208, 1229, 1238], "i32": [1, 83, 105, 108, 112, 145, 146, 240, 298, 340, 382, 383, 416, 565, 586, 741, 751, 818, 860, 942, 946, 948, 956, 980, 1075, 1105, 1229, 1238], "f32": [1, 83, 158, 258, 298, 586, 751, 769, 860, 863, 1075, 1229], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 61, 64, 66, 81, 82, 83, 84, 88, 105, 106, 107, 108, 109, 110, 111, 112, 118, 130, 157, 159, 160, 161, 165, 167, 168, 171, 172, 174, 175, 180, 181, 183, 184, 185, 186, 192, 194, 196, 198, 200, 202, 205, 206, 209, 210, 215, 216, 217, 222, 223, 224, 226, 229, 230, 232, 233, 234, 238, 240, 244, 247, 248, 250, 252, 255, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 276, 277, 278, 281, 282, 283, 284, 285, 288, 291, 292, 298, 306, 308, 312, 328, 329, 330, 332, 333, 339, 345, 352, 353, 354, 355, 356, 363, 365, 366, 378, 403, 405, 406, 407, 408, 409, 410, 411, 423, 425, 426, 428, 429, 430, 431, 433, 434, 436, 437, 439, 442, 444, 445, 446, 447, 451, 452, 455, 456, 458, 459, 460, 462, 464, 467, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 509, 512, 513, 515, 530, 531, 532, 534, 535, 536, 537, 538, 539, 547, 548, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 566, 567, 581, 583, 584, 586, 587, 588, 592, 593, 594, 621, 622, 642, 647, 648, 650, 651, 652, 653, 654, 660, 661, 662, 664, 667, 675, 680, 682, 686, 687, 688, 689, 700, 701, 702, 703, 704, 708, 710, 711, 712, 713, 715, 716, 717, 718, 721, 722, 726, 730, 731, 734, 735, 736, 741, 747, 751, 767, 770, 772, 773, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 794, 797, 798, 799, 801, 803, 804, 807, 808, 809, 811, 812, 814, 815, 816, 818, 820, 822, 825, 826, 828, 829, 831, 832, 833, 834, 837, 840, 841, 842, 845, 846, 847, 848, 849, 852, 855, 856, 860, 863, 865, 866, 869, 884, 885, 886, 888, 894, 906, 909, 913, 914, 915, 916, 922, 923, 938, 967, 969, 970, 971, 972, 973, 974, 975, 990, 991, 993, 994, 997, 998, 1002, 1015, 1042, 1043, 1044, 1045, 1049, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1070, 1077, 1082, 1096, 1101, 1102, 1103, 1105, 1109, 1112, 1116, 1120, 1121, 1124, 1128, 1132, 1133, 1137, 1138, 1187, 1198, 1200, 1207, 1213, 1214, 1220, 1229, 1237, 1238], "register_series_namespac": [1, 81, 82, 83], "math": [1, 15, 84, 364, 676, 677, 751, 910, 912, 1134, 1203, 1229], "mathshortcut": [1, 84], "": [1, 2, 16, 37, 39, 40, 45, 58, 64, 67, 72, 84, 105, 106, 112, 116, 117, 118, 119, 121, 127, 131, 132, 135, 136, 148, 157, 158, 167, 170, 175, 180, 185, 186, 188, 189, 196, 202, 205, 206, 215, 222, 224, 230, 232, 237, 240, 241, 248, 257, 263, 265, 266, 267, 268, 273, 274, 298, 378, 401, 404, 423, 429, 463, 484, 513, 515, 524, 531, 540, 541, 547, 548, 560, 565, 594, 598, 606, 607, 608, 621, 627, 628, 630, 638, 639, 640, 644, 645, 648, 650, 669, 670, 671, 672, 678, 683, 688, 689, 692, 693, 702, 705, 706, 715, 716, 717, 718, 721, 722, 730, 731, 733, 734, 735, 741, 747, 751, 767, 769, 777, 778, 788, 789, 791, 792, 798, 807, 818, 819, 826, 831, 832, 833, 834, 837, 838, 843, 848, 860, 863, 865, 866, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 929, 931, 935, 937, 938, 941, 943, 944, 948, 950, 954, 955, 959, 962, 963, 965, 968, 976, 978, 979, 980, 984, 985, 986, 987, 988, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1042, 1043, 1045, 1049, 1050, 1052, 1058, 1063, 1064, 1065, 1067, 1069, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1126, 1128, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1163, 1164, 1166, 1168, 1169, 1172, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1196, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1229, 1233], "_": [1, 80, 84, 224, 257, 298, 484, 599, 607, 612, 613, 623, 628, 629, 900, 1144, 1152, 1157, 1158, 1168, 1174, 1206, 1229], "squar": [1, 84, 284, 463, 595, 751, 848, 1030, 1139, 1229], "cube": [1, 84, 343, 552, 751, 902, 1229], "s2": [1, 71, 89, 90, 141, 142, 178, 298, 904, 925, 983, 1015, 1029, 1070, 1083, 1211, 1220, 1229], "renam": [1, 108, 116, 117, 155, 176, 179, 187, 188, 189, 190, 195, 231, 240, 241, 253, 273, 274, 277, 279, 298, 308, 313, 357, 358, 359, 360, 361, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 527, 535, 536, 537, 553, 568, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 650, 652, 655, 656, 673, 692, 693, 714, 730, 733, 751, 790, 791, 792, 793, 802, 818, 819, 830, 837, 838, 841, 843, 860, 866, 870, 917, 918, 919, 920, 922, 1012, 1018, 1040, 1053, 1068, 1076, 1096, 1107, 1123, 1125, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1196, 1201, 1202, 1207, 1229], "n2": 1, "in_plac": [1, 194, 246, 271, 298, 1099, 1131, 1138, 1229], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 66, 68, 86, 87, 88, 105, 106, 110, 112, 114, 116, 117, 118, 120, 121, 122, 124, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 147, 148, 152, 154, 157, 158, 159, 160, 164, 169, 174, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 196, 198, 199, 200, 203, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 240, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 273, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 307, 308, 309, 310, 311, 312, 313, 324, 326, 327, 334, 335, 337, 338, 340, 352, 353, 354, 355, 356, 363, 370, 372, 375, 378, 381, 383, 390, 391, 394, 395, 397, 398, 399, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 422, 436, 438, 439, 440, 443, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 463, 465, 468, 469, 473, 481, 499, 502, 504, 510, 513, 515, 519, 520, 521, 522, 523, 524, 526, 527, 542, 543, 544, 546, 549, 550, 555, 560, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 586, 591, 593, 594, 597, 598, 599, 601, 602, 604, 609, 611, 620, 628, 629, 631, 638, 639, 640, 642, 644, 648, 650, 662, 665, 668, 669, 670, 671, 672, 673, 675, 678, 679, 683, 695, 697, 698, 704, 710, 716, 724, 727, 733, 738, 741, 742, 751, 767, 769, 770, 771, 772, 773, 780, 782, 784, 788, 789, 790, 791, 792, 793, 797, 798, 800, 802, 803, 807, 812, 816, 818, 820, 824, 826, 831, 832, 833, 834, 837, 842, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 863, 867, 868, 870, 880, 882, 883, 890, 895, 898, 901, 904, 905, 922, 929, 930, 932, 935, 937, 938, 939, 941, 945, 946, 948, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 982, 983, 985, 986, 987, 994, 1000, 1003, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1034, 1035, 1047, 1065, 1068, 1077, 1083, 1089, 1092, 1093, 1096, 1100, 1114, 1123, 1136, 1138, 1142, 1143, 1144, 1146, 1147, 1149, 1154, 1156, 1165, 1173, 1174, 1176, 1183, 1184, 1185, 1187, 1189, 1210, 1211, 1217, 1219, 1220, 1229, 1238], "s3": [1, 39, 120, 131, 132, 135, 136, 298, 1070, 1229], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 64, 69, 70, 77, 80, 81, 83, 84, 88, 138, 144, 146, 158, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 180, 182, 184, 192, 194, 202, 205, 209, 210, 212, 214, 217, 227, 229, 232, 235, 237, 238, 239, 240, 244, 247, 249, 250, 252, 258, 259, 260, 261, 267, 270, 271, 273, 298, 310, 312, 325, 353, 356, 362, 371, 437, 443, 446, 476, 478, 487, 493, 494, 495, 496, 532, 546, 552, 563, 564, 569, 586, 592, 594, 614, 617, 618, 619, 638, 668, 674, 683, 685, 687, 689, 701, 703, 708, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 736, 740, 751, 769, 774, 777, 778, 779, 781, 785, 787, 794, 797, 801, 803, 812, 814, 817, 818, 822, 829, 837, 860, 863, 912, 921, 942, 1003, 1029, 1042, 1044, 1053, 1059, 1060, 1062, 1091, 1103, 1106, 1108, 1111, 1113, 1115, 1117, 1159, 1162, 1163, 1164, 1183, 1229, 1238], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 64, 69, 80, 88, 138, 162, 164, 178, 187, 192, 197, 209, 234, 236, 237, 240, 251, 252, 267, 271, 273, 291, 298, 306, 310, 312, 325, 353, 356, 364, 371, 429, 437, 446, 452, 462, 476, 491, 499, 534, 546, 557, 563, 567, 569, 575, 577, 588, 592, 607, 641, 649, 681, 686, 687, 739, 751, 790, 794, 796, 801, 816, 818, 829, 837, 855, 860, 863, 923, 935, 946, 948, 956, 962, 976, 977, 1015, 1029, 1042, 1065, 1103, 1108, 1114, 1116, 1118, 1133, 1152, 1186, 1229], "27": [1, 84, 291, 356, 389, 396, 413, 751, 855, 1229, 1238], "16": [1, 40, 54, 74, 82, 138, 179, 186, 234, 273, 298, 353, 356, 446, 514, 532, 552, 567, 642, 686, 700, 701, 704, 751, 789, 816, 824, 837, 860, 863, 962, 976, 1076, 1091, 1123, 1134, 1187, 1203, 1229], "64": [1, 53, 56, 76, 82, 84, 137, 154, 350, 532, 552, 751, 1091, 1229], "25": [1, 32, 40, 84, 112, 146, 164, 186, 206, 234, 269, 273, 298, 365, 375, 377, 395, 398, 412, 414, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 661, 695, 696, 698, 699, 700, 706, 716, 738, 739, 751, 789, 798, 805, 816, 835, 837, 860, 863, 923, 924, 937, 962, 976, 982, 1003, 1091, 1096, 1229], "125": [1, 40, 84, 298, 306, 751, 1091, 1229], "inner": [2, 61, 145, 205, 268, 298, 331, 366, 484, 503, 561, 659, 751, 797, 820, 834, 860, 887, 925, 1050, 1069, 1212, 1229], "polarsdatatyp": [2, 61, 116, 117, 130, 143, 144, 145, 146, 148, 155, 158, 209, 298, 313, 340, 423, 511, 513, 514, 515, 562, 609, 610, 673, 702, 713, 714, 715, 716, 724, 727, 742, 747, 751, 769, 860, 863, 870, 895, 1076, 1077, 1102, 1154, 1155, 1229], "pythondatatyp": [2, 61], "width": [2, 31, 40, 116, 117, 130, 225, 298, 301, 503, 860, 1069], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 60, 66, 69, 82, 108, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 155, 157, 159, 164, 170, 173, 174, 176, 180, 182, 184, 191, 192, 193, 195, 196, 201, 203, 204, 206, 208, 209, 210, 212, 217, 219, 220, 231, 232, 235, 238, 243, 244, 245, 247, 249, 250, 252, 253, 258, 261, 263, 267, 270, 272, 275, 282, 292, 298, 306, 333, 339, 362, 365, 420, 421, 422, 426, 427, 428, 434, 436, 437, 439, 441, 442, 443, 467, 473, 476, 481, 482, 483, 492, 497, 498, 501, 502, 503, 504, 546, 548, 551, 552, 555, 558, 561, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 587, 592, 596, 606, 609, 610, 615, 618, 619, 620, 621, 625, 627, 629, 630, 641, 642, 647, 654, 655, 656, 660, 666, 668, 675, 683, 685, 694, 697, 700, 706, 708, 710, 711, 724, 727, 728, 729, 732, 733, 736, 737, 740, 742, 751, 767, 770, 782, 783, 784, 787, 794, 798, 801, 812, 822, 823, 825, 827, 829, 830, 831, 835, 836, 840, 846, 856, 860, 877, 878, 894, 895, 904, 905, 921, 924, 984, 985, 986, 987, 991, 992, 993, 997, 998, 1001, 1002, 1003, 1029, 1031, 1032, 1039, 1040, 1041, 1042, 1047, 1048, 1049, 1058, 1063, 1064, 1067, 1068, 1069, 1070, 1079, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1095, 1096, 1098, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1128, 1129, 1132, 1137, 1140, 1151, 1154, 1155, 1160, 1163, 1164, 1165, 1166, 1170, 1172, 1174, 1175, 1186, 1187, 1192, 1199, 1200, 1201, 1202, 1208, 1213, 1218, 1229, 1237, 1238], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 747, 751, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1229, 1237], "fix": [2, 15, 51, 121, 144, 146, 415, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 700, 751, 979, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "length": [2, 61, 88, 116, 117, 130, 144, 184, 186, 187, 189, 190, 225, 234, 247, 298, 301, 362, 398, 412, 498, 504, 524, 562, 565, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 592, 612, 613, 615, 617, 618, 619, 625, 627, 647, 724, 727, 728, 729, 742, 751, 789, 790, 792, 793, 812, 816, 825, 860, 904, 921, 931, 962, 976, 1064, 1070, 1088, 1102, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1137, 1157, 1158, 1160, 1162, 1163, 1164, 1170, 1172, 1192, 1229], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 64, 65, 66, 67, 69, 72, 80, 81, 82, 83, 84, 86, 87, 88, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 157, 158, 159, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 201, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 277, 279, 282, 284, 290, 292, 298, 306, 308, 309, 310, 311, 312, 313, 323, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 370, 371, 372, 378, 394, 397, 398, 399, 401, 403, 404, 412, 415, 417, 418, 419, 420, 421, 422, 423, 426, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 452, 463, 465, 467, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 526, 530, 532, 535, 536, 537, 542, 543, 546, 547, 548, 551, 552, 553, 555, 556, 558, 560, 561, 562, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 647, 648, 650, 651, 652, 654, 655, 656, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 747, 751, 767, 769, 770, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 801, 802, 803, 807, 808, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 846, 848, 854, 856, 860, 863, 866, 867, 868, 869, 870, 879, 888, 889, 890, 891, 892, 893, 894, 895, 899, 905, 906, 907, 908, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 930, 931, 932, 938, 958, 961, 962, 963, 965, 967, 968, 976, 979, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 997, 998, 1001, 1002, 1003, 1006, 1007, 1017, 1025, 1026, 1030, 1032, 1038, 1039, 1040, 1041, 1042, 1044, 1047, 1048, 1049, 1050, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1076, 1077, 1091, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1132, 1136, 1137, 1138, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1192, 1193, 1196, 1200, 1201, 1202, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1217, 1218, 1219, 1220, 1229, 1237], "The": [2, 25, 38, 39, 40, 45, 60, 61, 64, 68, 71, 72, 80, 85, 86, 90, 105, 107, 108, 109, 111, 114, 116, 117, 118, 119, 121, 125, 126, 128, 130, 134, 135, 136, 139, 140, 141, 142, 150, 164, 166, 167, 168, 171, 172, 175, 184, 185, 186, 189, 191, 197, 203, 206, 209, 216, 222, 234, 235, 236, 237, 240, 241, 259, 266, 269, 273, 274, 277, 284, 298, 308, 333, 334, 335, 336, 363, 367, 368, 375, 389, 394, 395, 398, 401, 412, 413, 423, 426, 429, 434, 441, 477, 481, 502, 513, 514, 515, 547, 555, 558, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 588, 591, 597, 602, 603, 606, 609, 610, 616, 618, 619, 626, 632, 633, 634, 635, 636, 637, 638, 706, 716, 728, 729, 730, 733, 741, 743, 744, 746, 747, 751, 752, 753, 756, 758, 759, 760, 778, 781, 785, 789, 792, 794, 796, 798, 801, 803, 808, 812, 816, 818, 819, 820, 833, 837, 838, 841, 848, 860, 866, 869, 889, 890, 891, 905, 922, 923, 926, 927, 935, 953, 958, 959, 962, 965, 976, 977, 990, 991, 994, 1001, 1043, 1047, 1076, 1077, 1096, 1098, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1133, 1136, 1142, 1147, 1148, 1154, 1155, 1161, 1163, 1164, 1171, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236, 1238], "datatyp": [2, 37, 43, 58, 61, 78, 105, 107, 108, 109, 111, 113, 121, 123, 125, 126, 129, 134, 148, 168, 171, 178, 239, 298, 340, 423, 586, 659, 702, 713, 751, 763, 779, 781, 817, 820, 860, 870, 895, 923, 1017, 1024, 1026, 1028, 1077, 1130, 1212, 1229], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 61, 62, 64, 68, 71, 78, 80, 88, 90, 108, 110, 116, 117, 118, 119, 121, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 164, 167, 169, 172, 173, 174, 175, 179, 184, 186, 189, 191, 192, 197, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 222, 224, 226, 227, 229, 234, 235, 236, 237, 238, 244, 245, 248, 249, 250, 251, 252, 255, 256, 260, 263, 264, 267, 268, 269, 270, 280, 281, 283, 285, 286, 288, 289, 298, 305, 306, 307, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 356, 362, 363, 365, 367, 368, 371, 375, 389, 395, 413, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 480, 482, 483, 485, 486, 488, 489, 490, 492, 497, 500, 501, 504, 505, 507, 509, 510, 513, 514, 515, 516, 517, 518, 529, 530, 531, 532, 533, 540, 541, 542, 543, 545, 547, 548, 551, 552, 555, 556, 558, 561, 562, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 588, 589, 590, 591, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 606, 609, 610, 611, 618, 619, 621, 622, 624, 627, 629, 630, 631, 647, 649, 651, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 668, 669, 671, 674, 680, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 703, 704, 709, 712, 713, 717, 718, 719, 720, 721, 722, 723, 726, 727, 728, 729, 734, 735, 741, 751, 766, 767, 778, 783, 784, 785, 789, 792, 795, 796, 797, 798, 804, 805, 806, 807, 809, 810, 813, 814, 816, 820, 822, 823, 826, 827, 828, 831, 834, 835, 844, 845, 847, 849, 850, 852, 853, 860, 863, 865, 867, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 899, 903, 906, 907, 908, 910, 911, 912, 921, 922, 923, 924, 926, 927, 931, 935, 953, 959, 977, 983, 984, 985, 986, 987, 990, 991, 992, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1058, 1063, 1067, 1071, 1076, 1078, 1079, 1081, 1082, 1084, 1086, 1087, 1088, 1090, 1091, 1095, 1096, 1097, 1098, 1102, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1122, 1123, 1124, 1125, 1128, 1129, 1133, 1134, 1135, 1136, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1163, 1164, 1166, 1167, 1169, 1172, 1174, 1175, 1176, 1192, 1199, 1200, 1201, 1202, 1203, 1204, 1210, 1211, 1212, 1215, 1217, 1219, 1220, 1229, 1238], "within": [2, 61, 139, 140, 141, 142, 185, 186, 187, 188, 189, 190, 191, 206, 234, 269, 298, 441, 558, 567, 594, 751, 789, 790, 792, 793, 798, 816, 860, 1001, 1229, 1237], "each": [2, 37, 40, 58, 61, 80, 117, 118, 134, 139, 140, 141, 142, 144, 163, 175, 184, 185, 186, 187, 188, 189, 190, 204, 206, 209, 222, 234, 238, 260, 266, 268, 269, 276, 277, 280, 282, 284, 292, 298, 363, 398, 412, 429, 450, 451, 454, 455, 483, 486, 487, 492, 501, 508, 515, 555, 558, 566, 572, 574, 576, 578, 581, 587, 594, 607, 612, 613, 614, 617, 629, 630, 675, 678, 682, 710, 711, 733, 741, 751, 772, 775, 785, 789, 790, 792, 793, 798, 812, 816, 833, 834, 841, 843, 844, 846, 848, 856, 860, 904, 922, 962, 976, 1012, 1013, 1018, 1019, 1049, 1052, 1053, 1058, 1067, 1096, 1098, 1106, 1120, 1132, 1152, 1157, 1158, 1159, 1162, 1174, 1175, 1198, 1229, 1238], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 72, 80, 81, 82, 83, 84, 88, 89, 90, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 127, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 747, 751, 763, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1034, 1035, 1042, 1043, 1044, 1045, 1049, 1050, 1052, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1067, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1089, 1090, 1091, 1092, 1093, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1126, 1128, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1163, 1164, 1166, 1167, 1168, 1169, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1229, 1237], "dtype": [2, 15, 40, 48, 71, 72, 83, 89, 90, 105, 107, 109, 111, 112, 116, 117, 118, 119, 125, 126, 127, 130, 143, 144, 145, 146, 148, 154, 158, 186, 187, 189, 190, 206, 234, 258, 259, 260, 267, 298, 313, 340, 341, 355, 356, 415, 423, 436, 472, 481, 502, 509, 511, 513, 514, 515, 560, 561, 567, 570, 571, 572, 573, 574, 576, 577, 578, 586, 609, 610, 638, 653, 655, 659, 664, 673, 675, 702, 706, 710, 711, 713, 714, 715, 716, 724, 727, 733, 742, 751, 769, 789, 790, 792, 793, 798, 816, 860, 863, 882, 883, 884, 885, 887, 895, 897, 898, 900, 905, 915, 916, 923, 924, 979, 983, 984, 1008, 1010, 1014, 1017, 1024, 1026, 1028, 1034, 1035, 1038, 1047, 1069, 1075, 1076, 1104, 1123, 1130, 1154, 1155, 1183, 1199, 1208, 1210, 1211, 1212, 1216, 1229, 1238], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 143, 152, 155, 167, 172, 176, 179, 185, 187, 188, 189, 190, 195, 197, 203, 209, 210, 212, 217, 220, 227, 231, 235, 236, 237, 244, 250, 253, 265, 273, 279, 284, 290, 298, 306, 309, 310, 313, 345, 357, 358, 359, 360, 361, 401, 404, 418, 419, 426, 433, 438, 440, 446, 450, 454, 457, 462, 465, 474, 487, 497, 502, 510, 511, 512, 514, 515, 530, 532, 534, 536, 537, 538, 539, 542, 543, 546, 552, 553, 556, 558, 568, 570, 571, 572, 573, 574, 576, 577, 578, 584, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 634, 635, 636, 637, 641, 647, 651, 652, 655, 656, 661, 663, 668, 683, 716, 725, 743, 744, 746, 747, 751, 752, 753, 756, 757, 758, 759, 760, 763, 773, 776, 778, 790, 791, 792, 793, 796, 802, 813, 822, 830, 832, 837, 843, 848, 854, 860, 869, 870, 906, 917, 918, 919, 920, 965, 968, 990, 991, 1006, 1012, 1018, 1040, 1053, 1063, 1068, 1076, 1077, 1097, 1098, 1107, 1113, 1123, 1125, 1128, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1186, 1192, 1195, 1201, 1202, 1212, 1219, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236], "attribut": [2, 5, 48, 49, 50, 51, 61, 72, 143, 298, 743, 744, 746, 747, 752, 753, 756, 758, 759, 760, 860, 1221, 1223, 1225, 1230, 1234, 1235, 1236], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 175, 223, 260, 298, 551, 678, 705, 751, 785, 811, 860, 1077, 1210, 1211, 1229], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 71, 73, 74, 75, 76, 77, 78, 118, 162, 175, 223, 260, 298, 551, 751, 785, 811, 860, 1211, 1229, 1237], "order": [5, 15, 40, 58, 59, 60, 64, 66, 80, 86, 108, 118, 137, 139, 140, 157, 167, 175, 185, 186, 187, 188, 189, 190, 205, 222, 223, 224, 234, 238, 242, 248, 259, 263, 265, 269, 298, 323, 332, 342, 367, 368, 429, 477, 492, 499, 505, 558, 567, 571, 572, 573, 574, 576, 578, 581, 582, 583, 593, 594, 624, 634, 635, 636, 637, 650, 662, 663, 665, 678, 741, 751, 762, 767, 778, 785, 788, 789, 790, 791, 792, 793, 797, 807, 816, 821, 826, 831, 832, 860, 879, 888, 899, 901, 926, 927, 994, 1025, 1043, 1058, 1065, 1071, 1098, 1104, 1120, 1122, 1126, 1138, 1169, 1196, 1214, 1215, 1217, 1229, 1238], "categoricalord": [5, 342, 899], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 60, 62, 64, 66, 67, 69, 80, 87, 90, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 155, 159, 163, 164, 167, 173, 174, 184, 186, 187, 189, 190, 191, 197, 201, 205, 206, 207, 209, 210, 212, 215, 217, 220, 221, 224, 234, 235, 238, 244, 245, 247, 248, 250, 255, 257, 260, 264, 265, 266, 267, 268, 269, 280, 298, 309, 311, 312, 313, 325, 326, 327, 333, 345, 351, 353, 356, 363, 367, 368, 394, 397, 398, 412, 419, 420, 421, 422, 423, 426, 427, 428, 434, 441, 443, 446, 447, 456, 458, 459, 460, 466, 468, 469, 477, 482, 486, 492, 493, 494, 495, 496, 498, 504, 511, 513, 514, 515, 523, 526, 528, 543, 544, 545, 548, 552, 555, 558, 559, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 581, 584, 585, 586, 587, 588, 592, 593, 597, 598, 601, 603, 604, 607, 609, 610, 611, 612, 613, 616, 618, 619, 620, 626, 627, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 642, 644, 647, 648, 649, 650, 659, 669, 670, 671, 672, 673, 680, 682, 684, 689, 695, 696, 697, 698, 699, 700, 702, 703, 712, 713, 714, 715, 716, 718, 722, 727, 728, 729, 733, 735, 737, 738, 739, 741, 751, 770, 771, 773, 775, 778, 783, 784, 789, 790, 792, 793, 796, 797, 798, 800, 802, 803, 807, 810, 816, 820, 822, 823, 824, 825, 826, 832, 833, 834, 839, 843, 844, 848, 860, 863, 867, 868, 870, 877, 878, 882, 883, 905, 906, 922, 923, 925, 926, 927, 943, 944, 945, 950, 961, 962, 976, 981, 982, 985, 986, 987, 991, 992, 993, 995, 1001, 1003, 1005, 1006, 1007, 1017, 1022, 1023, 1026, 1029, 1030, 1031, 1034, 1035, 1043, 1048, 1052, 1058, 1059, 1060, 1062, 1064, 1070, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1090, 1094, 1096, 1097, 1098, 1102, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1120, 1121, 1124, 1125, 1127, 1128, 1129, 1132, 1133, 1136, 1137, 1140, 1142, 1143, 1146, 1148, 1149, 1152, 1154, 1155, 1156, 1157, 1158, 1161, 1163, 1164, 1165, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1187, 1189, 1192, 1207, 1208, 1209, 1211, 1212, 1218, 1229, 1237], "physic": [5, 71, 90, 116, 117, 206, 298, 342, 659, 751, 768, 797, 798, 860, 899, 900, 1212, 1229], "A": [5, 18, 37, 40, 51, 58, 64, 67, 86, 87, 112, 116, 117, 118, 119, 130, 132, 137, 150, 178, 186, 205, 206, 211, 213, 218, 224, 251, 255, 267, 268, 269, 273, 274, 298, 305, 367, 368, 371, 418, 419, 426, 438, 440, 449, 453, 456, 458, 465, 504, 510, 513, 524, 542, 543, 564, 569, 570, 571, 572, 573, 574, 576, 577, 578, 598, 599, 600, 601, 606, 607, 608, 611, 621, 622, 623, 647, 681, 700, 701, 705, 751, 789, 797, 798, 814, 834, 837, 838, 860, 863, 926, 927, 931, 991, 1108, 1109, 1110, 1112, 1115, 1116, 1117, 1143, 1144, 1145, 1146, 1151, 1152, 1153, 1156, 1166, 1167, 1168, 1192, 1229, 1237], "encod": [5, 51, 70, 116, 117, 130, 257, 298, 335, 435, 602, 649, 751, 890, 1147], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 80, 81, 106, 108, 111, 116, 117, 118, 121, 122, 124, 127, 128, 130, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 161, 167, 177, 185, 186, 187, 188, 189, 190, 191, 203, 206, 210, 212, 213, 215, 217, 234, 238, 240, 247, 250, 251, 257, 259, 264, 265, 267, 273, 298, 309, 311, 313, 345, 363, 415, 441, 452, 481, 492, 493, 494, 495, 496, 498, 502, 504, 513, 514, 515, 551, 555, 562, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 581, 587, 591, 592, 597, 616, 626, 627, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 665, 669, 671, 675, 679, 695, 696, 698, 699, 703, 710, 711, 712, 724, 727, 728, 729, 733, 738, 739, 741, 742, 751, 763, 772, 778, 780, 788, 789, 790, 791, 792, 793, 797, 798, 802, 803, 807, 816, 818, 820, 825, 832, 837, 843, 848, 860, 867, 868, 901, 906, 922, 979, 1001, 1015, 1047, 1058, 1059, 1060, 1061, 1062, 1064, 1068, 1070, 1076, 1077, 1096, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1120, 1121, 1125, 1132, 1136, 1137, 1142, 1161, 1171, 1172, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1189, 1210, 1217, 1229, 1238], "lexic": [5, 342, 863, 899, 901], "appear": [5, 40, 108, 298, 663, 751, 1215, 1229], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 60, 80, 87, 88, 105, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 125, 126, 127, 128, 130, 139, 141, 143, 144, 145, 146, 147, 148, 152, 164, 167, 170, 185, 186, 187, 188, 189, 190, 191, 203, 205, 206, 213, 215, 222, 224, 234, 235, 236, 237, 238, 244, 249, 251, 257, 265, 267, 268, 270, 275, 298, 308, 309, 311, 342, 363, 397, 398, 412, 417, 419, 420, 421, 422, 441, 481, 492, 497, 498, 502, 504, 506, 514, 523, 540, 541, 543, 548, 555, 558, 562, 567, 570, 571, 572, 573, 574, 576, 577, 578, 581, 584, 587, 596, 597, 606, 616, 620, 626, 627, 632, 633, 634, 635, 638, 639, 640, 642, 644, 665, 666, 669, 671, 675, 679, 683, 685, 695, 696, 697, 698, 699, 703, 706, 710, 711, 712, 713, 724, 727, 732, 733, 738, 739, 740, 742, 751, 772, 773, 778, 780, 788, 789, 790, 791, 792, 793, 797, 798, 807, 816, 820, 822, 827, 832, 835, 860, 867, 868, 899, 906, 922, 923, 961, 962, 976, 982, 984, 985, 986, 987, 1001, 1047, 1058, 1063, 1064, 1068, 1070, 1076, 1086, 1087, 1091, 1096, 1098, 1102, 1120, 1128, 1132, 1140, 1142, 1143, 1151, 1161, 1165, 1171, 1172, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1187, 1189, 1217, 1218, 1229, 1238], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 435, 751, 776, 860], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 478, 607, 1044, 1152], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 80, 86, 87, 88, 89, 90, 105, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 157, 158, 159, 160, 164, 169, 174, 175, 177, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 213, 222, 224, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 266, 268, 269, 271, 273, 281, 283, 285, 288, 298, 308, 309, 310, 311, 312, 313, 323, 326, 327, 332, 334, 335, 337, 338, 340, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 381, 397, 399, 412, 417, 418, 419, 420, 421, 422, 438, 440, 443, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 463, 465, 468, 469, 473, 478, 481, 492, 499, 502, 505, 510, 511, 513, 515, 519, 520, 521, 522, 523, 526, 542, 543, 544, 546, 549, 550, 555, 558, 560, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 583, 586, 591, 593, 594, 597, 598, 599, 601, 602, 604, 620, 621, 622, 623, 628, 629, 631, 638, 639, 640, 642, 644, 650, 662, 665, 668, 669, 670, 671, 672, 673, 675, 678, 679, 683, 686, 690, 695, 696, 697, 698, 699, 710, 711, 713, 716, 724, 727, 733, 738, 739, 741, 742, 751, 767, 769, 770, 772, 773, 780, 782, 784, 785, 788, 789, 790, 791, 792, 793, 797, 798, 802, 803, 807, 812, 816, 821, 824, 826, 831, 832, 833, 834, 837, 845, 847, 849, 852, 860, 863, 867, 868, 870, 879, 882, 883, 888, 890, 895, 898, 901, 905, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 941, 961, 963, 976, 982, 983, 985, 986, 987, 994, 1000, 1003, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1034, 1035, 1039, 1040, 1041, 1044, 1047, 1058, 1065, 1068, 1071, 1077, 1089, 1092, 1093, 1096, 1098, 1099, 1100, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1124, 1125, 1126, 1131, 1136, 1138, 1142, 1143, 1144, 1146, 1147, 1149, 1165, 1166, 1167, 1168, 1173, 1174, 1176, 1183, 1184, 1185, 1187, 1189, 1209, 1210, 1211, 1214, 1217, 1219, 1229, 1237], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 259, 298, 579, 641, 751, 860, 1118, 1186, 1229], "temporari": 6, "remov": [6, 9, 91, 116, 117, 130, 154, 165, 210, 212, 217, 250, 257, 298, 313, 412, 423, 512, 515, 535, 616, 626, 632, 633, 634, 635, 636, 637, 702, 751, 777, 860, 922, 962, 976, 1096, 1161, 1171, 1177, 1178, 1179, 1180, 1181, 1182, 1185, 1219, 1229], "onc": [6, 67, 116, 117, 121, 150, 209, 236, 238, 277, 298, 492, 515, 581, 636, 637, 751, 768, 841, 860, 1058, 1077, 1120, 1181, 1182, 1229], "stabil": [6, 191, 298, 441, 751, 1001, 1229], "current": [6, 7, 8, 10, 11, 35, 66, 106, 112, 118, 119, 128, 135, 159, 160, 205, 206, 298, 377, 398, 504, 548, 751, 763, 770, 771, 772, 797, 798, 860, 863, 905, 909, 929, 937, 962, 1091, 1229, 1237], "consid": [6, 87, 89, 90, 116, 117, 130, 136, 139, 140, 141, 142, 167, 169, 179, 202, 209, 215, 236, 265, 267, 268, 298, 313, 345, 362, 398, 443, 513, 515, 570, 571, 572, 573, 574, 576, 577, 578, 686, 704, 747, 751, 773, 778, 794, 801, 807, 832, 834, 848, 860, 898, 901, 906, 921, 962, 983, 1003, 1017, 1077, 1096, 1121, 1123, 1124, 1229], "beta": 6, "cfg": [7, 9, 22, 152], "previous": [7, 8], "save": [7, 8, 11, 186, 206, 234, 269, 298, 369, 377, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 747, 751, 763, 789, 798, 816, 860, 937, 958, 962, 976], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 80, 116, 118, 120, 121, 122, 124, 128, 131, 132, 133, 135, 136, 138, 143, 144, 145, 146, 147, 148, 149, 186, 201, 206, 215, 255, 259, 264, 268, 298, 463, 568, 570, 571, 572, 573, 574, 576, 577, 578, 591, 599, 623, 627, 665, 713, 733, 741, 751, 763, 789, 797, 798, 807, 820, 834, 860, 863, 1026, 1030, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1136, 1144, 1168, 1172, 1207, 1217, 1229], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 64, 65, 66, 72, 80, 88, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 158, 164, 165, 170, 172, 177, 184, 186, 189, 203, 204, 205, 206, 207, 215, 224, 225, 229, 234, 235, 237, 238, 240, 241, 257, 264, 265, 267, 268, 269, 298, 301, 352, 363, 364, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 423, 435, 446, 463, 492, 504, 515, 540, 541, 543, 548, 551, 555, 557, 567, 569, 570, 571, 573, 576, 577, 578, 581, 594, 606, 607, 609, 610, 620, 634, 635, 636, 637, 638, 639, 640, 644, 663, 676, 677, 680, 694, 695, 696, 697, 698, 700, 727, 737, 738, 739, 747, 750, 751, 769, 776, 777, 782, 789, 792, 797, 798, 807, 814, 816, 818, 819, 832, 834, 839, 860, 863, 922, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 984, 990, 1026, 1030, 1058, 1070, 1086, 1087, 1088, 1091, 1096, 1108, 1120, 1151, 1152, 1154, 1155, 1165, 1181, 1182, 1183, 1184, 1185, 1189, 1220, 1229, 1237, 1238], "json": [7, 8, 10, 11, 43, 44, 125, 126, 132, 134, 298, 435, 528, 609, 610, 611, 649, 751, 763, 776, 820, 860, 1154, 1155, 1156], "produc": [7, 8, 145, 146, 148, 205, 298, 474, 475, 523, 715, 797, 802, 803, 860, 1040, 1041], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 298, 528, 776, 820, 860, 990, 1229], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 298, 528, 583, 611, 751, 776, 820, 824, 860, 1126, 1156, 1229, 1238], "load": [8, 10, 11, 108, 110, 118, 120, 121, 127, 131, 132, 147, 149, 298, 751, 763, 794, 801, 860, 1238], "reset": [9, 152], "state": [9, 86, 87, 98, 686, 690, 763, 772, 773, 780, 782, 812, 824, 860], "note": [9, 15, 25, 39, 40, 64, 68, 69, 71, 80, 87, 89, 90, 105, 106, 107, 109, 111, 112, 116, 118, 119, 120, 121, 125, 126, 128, 131, 132, 136, 139, 141, 144, 146, 148, 150, 152, 154, 157, 162, 164, 173, 186, 187, 189, 190, 191, 201, 202, 203, 205, 206, 209, 220, 223, 224, 234, 235, 236, 237, 244, 256, 259, 263, 264, 268, 269, 273, 298, 345, 355, 356, 367, 368, 390, 391, 394, 398, 412, 441, 447, 456, 458, 462, 478, 481, 497, 502, 504, 515, 534, 536, 537, 538, 539, 553, 562, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 591, 598, 606, 607, 608, 612, 613, 621, 633, 634, 635, 638, 647, 652, 653, 661, 684, 686, 695, 696, 698, 699, 700, 704, 713, 724, 726, 727, 738, 739, 741, 742, 747, 751, 762, 767, 773, 782, 783, 789, 790, 792, 793, 794, 798, 801, 814, 816, 822, 824, 826, 831, 834, 837, 860, 906, 915, 916, 923, 926, 927, 954, 955, 958, 976, 1000, 1001, 1044, 1047, 1063, 1068, 1077, 1102, 1114, 1121, 1124, 1128, 1131, 1136, 1143, 1151, 1152, 1153, 1157, 1158, 1166, 1178, 1179, 1180, 1183, 1192, 1199, 1210, 1229, 1233, 1237], "oper": [9, 39, 40, 71, 88, 90, 95, 96, 105, 107, 108, 109, 110, 111, 116, 118, 128, 155, 160, 172, 175, 178, 185, 188, 195, 196, 207, 209, 216, 220, 222, 223, 228, 232, 234, 237, 238, 244, 254, 259, 260, 264, 267, 276, 277, 298, 306, 307, 310, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 418, 419, 433, 438, 440, 462, 465, 492, 493, 494, 495, 496, 497, 504, 510, 527, 530, 532, 534, 536, 537, 542, 543, 546, 552, 553, 560, 567, 581, 584, 651, 652, 661, 668, 669, 671, 681, 682, 701, 751, 763, 771, 782, 788, 791, 794, 797, 801, 807, 808, 816, 822, 841, 860, 909, 913, 914, 915, 916, 917, 918, 919, 920, 921, 990, 1058, 1059, 1060, 1061, 1062, 1063, 1100, 1120, 1128, 1205, 1209, 1210, 1211, 1219, 1229], "environ": [9, 35, 128, 135, 147, 150], "ani": [9, 37, 39, 40, 45, 48, 58, 85, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 135, 143, 145, 146, 148, 152, 155, 162, 167, 172, 174, 175, 178, 201, 203, 204, 209, 213, 222, 223, 225, 235, 236, 237, 251, 255, 256, 259, 260, 265, 267, 268, 298, 306, 309, 310, 313, 340, 399, 418, 419, 428, 429, 433, 436, 438, 440, 452, 465, 472, 478, 510, 511, 513, 514, 515, 527, 530, 532, 536, 537, 542, 543, 546, 547, 551, 553, 562, 563, 568, 569, 582, 597, 599, 620, 634, 635, 636, 637, 638, 639, 640, 642, 644, 651, 652, 655, 661, 668, 669, 672, 673, 683, 713, 716, 741, 751, 778, 784, 785, 811, 832, 834, 860, 863, 867, 870, 963, 990, 993, 997, 1015, 1029, 1038, 1044, 1076, 1077, 1102, 1103, 1107, 1108, 1121, 1122, 1125, 1142, 1144, 1165, 1183, 1184, 1185, 1187, 1189, 1201, 1209, 1210, 1211, 1229, 1237, 1238], "local": [9, 39, 118, 120, 131, 132, 135, 148, 298, 412, 549, 550, 751, 898, 900, 933, 934, 966, 976, 1092, 1093, 1229], "non": [9, 37, 39, 40, 49, 58, 80, 110, 137, 163, 187, 190, 204, 215, 234, 240, 241, 244, 264, 268, 273, 274, 298, 345, 351, 447, 504, 514, 548, 562, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 600, 601, 607, 612, 647, 670, 672, 680, 681, 682, 684, 689, 693, 700, 718, 722, 728, 729, 730, 733, 735, 751, 775, 790, 793, 807, 816, 818, 819, 822, 834, 837, 838, 860, 906, 923, 1007, 1070, 1091, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1128, 1145, 1146, 1152, 1157, 1192, 1210, 1229], "env": [9, 149], "back": [9, 80, 172, 260, 298, 547, 645, 751, 820, 860, 990, 1190, 1211, 1229], "contain": [10, 37, 38, 39, 40, 58, 80, 85, 106, 107, 110, 112, 118, 120, 131, 132, 139, 140, 145, 157, 167, 186, 189, 204, 220, 224, 263, 268, 280, 298, 309, 311, 313, 337, 338, 452, 514, 515, 597, 604, 606, 608, 611, 630, 631, 647, 669, 671, 684, 716, 751, 767, 778, 789, 792, 812, 831, 834, 844, 860, 863, 867, 868, 922, 1076, 1083, 1096, 1142, 1149, 1151, 1153, 1156, 1175, 1176, 1192, 1205, 1229], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 298, 820, 860], "leav": [11, 215, 298, 504, 807, 860], "directli": [11, 35, 66, 87, 118, 146, 148, 152, 237, 298, 420, 421, 422, 562, 727, 751, 773, 860, 985, 986, 987, 1102, 1229, 1238], "json_fil": 11, "ascii": [12, 25, 599, 612, 613, 615, 623, 625, 647, 1144, 1157, 1158, 1160, 1168, 1170, 1192], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 116, 117, 130, 298, 394, 605, 607, 612, 613, 615, 616, 617, 618, 619, 625, 626, 628, 629, 632, 633, 634, 635, 636, 637, 647, 812, 860, 863, 958, 1150, 1152, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1170, 1171, 1173, 1174, 1177, 1178, 1179, 1180, 1192], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 184, 298], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 65, 66, 67, 69, 105, 112, 116, 117, 120, 121, 130, 131, 132, 205, 224, 254, 260, 267, 268, 298, 797, 834, 860, 1211, 1229, 1237], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 80, 86, 87, 106, 110, 112, 116, 117, 118, 121, 122, 124, 126, 127, 128, 130, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 154, 157, 158, 159, 160, 164, 169, 178, 183, 184, 185, 186, 187, 188, 189, 190, 194, 196, 198, 199, 200, 203, 205, 206, 207, 212, 213, 219, 220, 222, 224, 226, 234, 235, 236, 237, 238, 242, 246, 248, 251, 255, 257, 259, 260, 263, 264, 265, 268, 269, 271, 273, 281, 283, 285, 286, 288, 291, 298, 309, 310, 311, 313, 323, 326, 327, 332, 334, 337, 338, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 381, 397, 399, 412, 417, 418, 419, 420, 421, 422, 440, 443, 447, 448, 449, 451, 452, 453, 455, 456, 458, 459, 460, 461, 463, 465, 468, 469, 473, 478, 481, 492, 499, 502, 505, 510, 511, 513, 515, 519, 522, 524, 526, 542, 543, 544, 546, 549, 550, 555, 558, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 583, 586, 591, 593, 594, 597, 598, 599, 601, 604, 609, 620, 621, 622, 623, 628, 629, 631, 638, 639, 640, 642, 662, 665, 668, 669, 670, 671, 672, 675, 678, 679, 683, 686, 690, 695, 696, 697, 698, 699, 710, 711, 713, 724, 727, 733, 738, 739, 741, 742, 751, 767, 769, 770, 771, 772, 773, 780, 782, 788, 789, 790, 791, 792, 793, 797, 798, 800, 802, 803, 812, 816, 821, 824, 826, 831, 832, 834, 837, 845, 847, 849, 850, 852, 855, 860, 863, 867, 868, 879, 882, 883, 888, 895, 898, 901, 904, 905, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 941, 961, 963, 976, 982, 983, 985, 986, 987, 994, 1000, 1007, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1030, 1034, 1035, 1044, 1047, 1058, 1065, 1068, 1071, 1083, 1089, 1092, 1093, 1096, 1098, 1099, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1123, 1126, 1131, 1136, 1138, 1142, 1143, 1144, 1146, 1149, 1154, 1165, 1166, 1167, 1168, 1173, 1174, 1176, 1183, 1184, 1185, 1187, 1210, 1211, 1214, 1217, 1219, 1220, 1229, 1237], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 112], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 115, 116, 117, 118, 130, 136, 171, 184, 203, 215, 236, 237, 256, 296, 298, 398, 401, 404, 526, 638, 639, 640, 644, 700, 781, 807, 820, 860, 965, 968, 1183, 1184, 1185, 1189, 1228], "style": [12, 25, 40, 118, 128, 224, 298], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 306, 607, 621, 634, 751, 863, 1152, 1166], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 306, 601, 607, 751, 1146, 1152, 1207, 1229], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 61, 64, 80, 82, 84, 88, 106, 108, 136, 146, 159, 160, 162, 164, 165, 168, 173, 174, 178, 183, 184, 185, 186, 196, 197, 205, 206, 211, 212, 213, 214, 218, 224, 226, 227, 247, 248, 249, 251, 270, 273, 277, 281, 283, 285, 286, 287, 288, 290, 291, 298, 305, 308, 315, 316, 317, 318, 319, 320, 340, 343, 344, 348, 349, 350, 362, 363, 364, 367, 368, 399, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 432, 433, 438, 440, 446, 456, 458, 459, 460, 462, 463, 465, 478, 489, 506, 507, 508, 510, 516, 517, 518, 529, 532, 534, 540, 541, 542, 543, 548, 552, 555, 556, 557, 558, 562, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 589, 590, 591, 595, 596, 657, 658, 661, 666, 676, 677, 680, 681, 683, 685, 701, 702, 716, 719, 720, 731, 732, 740, 747, 751, 770, 777, 783, 784, 788, 789, 796, 797, 798, 805, 806, 813, 826, 827, 835, 837, 839, 841, 845, 847, 849, 850, 851, 852, 854, 855, 860, 863, 871, 872, 873, 874, 875, 876, 902, 903, 910, 911, 912, 921, 922, 923, 926, 927, 963, 985, 986, 987, 988, 992, 996, 1003, 1006, 1044, 1072, 1073, 1074, 1091, 1096, 1098, 1102, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1134, 1135, 1139, 1203, 1204, 1216, 1229, 1238], "multi": [13, 40, 116, 117, 298, 423, 606, 751, 1151], "automat": [13, 66, 69, 105, 107, 108, 109, 111, 112, 116, 117, 118, 119, 121, 125, 126, 130, 134, 146, 148, 150, 240, 273, 298, 514, 562, 633, 634, 635, 751, 818, 837, 860, 1076, 1102, 1178, 1179, 1180, 1229, 1237], "turn": [13, 58, 59, 60, 86, 87, 116, 117, 130, 645, 772, 773, 780, 782, 802, 803, 812, 860, 1190], "struct": [13, 112, 220, 240, 262, 266, 273, 298, 363, 443, 504, 555, 565, 566, 608, 609, 629, 630, 665, 686, 687, 689, 690, 691, 715, 751, 818, 833, 837, 848, 860, 922, 1070, 1096, 1105, 1153, 1154, 1172, 1174, 1175, 1229], "v": [13, 14, 45, 66, 67, 170, 298, 582, 751, 1122, 1229], "v2": [13, 122, 133], "out": [13, 19, 58, 59, 60, 112, 138, 234, 237, 298, 335, 481, 482, 502, 598, 602, 741, 816, 860, 890, 1047, 1048, 1068, 1143, 1147], "separ": [14, 15, 29, 32, 37, 58, 114, 116, 117, 130, 222, 224, 257, 264, 266, 298, 313, 479, 484, 515, 605, 682, 686, 687, 690, 691, 751, 833, 860, 1045, 1050, 1150, 1198, 1206, 1229], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 60, 64, 117, 185, 186, 187, 188, 189, 190, 204, 220, 222, 224, 234, 237, 267, 269, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298, 307, 362, 425, 431, 436, 439, 478, 513, 515, 523, 525, 547, 558, 566, 567, 593, 594, 598, 606, 607, 608, 621, 665, 716, 751, 788, 789, 790, 791, 792, 793, 816, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 863, 921, 1044, 1106, 1143, 1151, 1152, 1153, 1166, 1217, 1229], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 863], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 116, 117, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 298, 363, 420, 421, 422, 447, 493, 494, 495, 496, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 591, 625, 680, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 797, 798, 816, 834, 860, 922, 985, 986, 987, 1007, 1059, 1060, 1061, 1062, 1096, 1122, 1136, 1170, 1229], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 298, 860], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 117, 138, 139, 141, 168, 184, 185, 204, 207, 258, 276, 298, 445, 526, 751, 772, 795, 860, 1015, 1208, 1229, 1238], "876": 14, "543": 14, "010": [14, 642, 1187], "101": [14, 32, 371, 642, 1187, 1238], "000": [14, 15, 32, 40, 298, 1238], "123": [14, 601, 607, 622, 647, 741, 863, 1146, 1152, 1167, 1192, 1207, 1229], "456": [14, 15, 371, 863, 931, 1207, 1229], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 118, 203, 236, 237, 256, 298, 370, 641, 860, 863, 930, 1186], "control": [15, 16, 40, 69, 87, 88, 144, 298, 562, 751, 773, 780, 860, 1102, 1229], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 60, 71, 80, 90, 99, 105, 107, 109, 111, 114, 116, 117, 119, 121, 125, 126, 127, 128, 130, 134, 135, 137, 144, 146, 147, 149, 150, 157, 159, 163, 170, 171, 173, 174, 184, 192, 203, 204, 207, 208, 219, 220, 238, 244, 245, 249, 252, 263, 267, 270, 280, 282, 292, 298, 324, 333, 339, 351, 362, 363, 365, 379, 382, 387, 389, 399, 413, 414, 416, 420, 421, 422, 426, 428, 434, 442, 456, 458, 466, 467, 476, 483, 486, 487, 492, 497, 501, 504, 551, 555, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 584, 585, 587, 596, 612, 613, 614, 617, 621, 629, 630, 641, 654, 660, 666, 683, 684, 685, 700, 708, 728, 729, 732, 736, 740, 751, 767, 770, 775, 781, 782, 783, 784, 794, 801, 812, 822, 823, 827, 829, 831, 835, 844, 846, 856, 860, 894, 905, 921, 922, 924, 939, 942, 951, 953, 963, 977, 978, 980, 984, 985, 986, 987, 991, 993, 1002, 1014, 1031, 1032, 1042, 1049, 1052, 1053, 1058, 1063, 1067, 1070, 1083, 1084, 1096, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1128, 1129, 1132, 1140, 1157, 1158, 1159, 1162, 1166, 1174, 1175, 1186, 1200, 1213, 1218, 1229, 1238], "place": [15, 16, 37, 58, 157, 166, 172, 194, 195, 196, 224, 230, 232, 237, 245, 248, 263, 271, 298, 323, 484, 585, 593, 751, 767, 823, 826, 831, 860, 869, 879, 990, 1050, 1099, 1129, 1138, 1229], "float": [15, 16, 37, 40, 52, 53, 58, 121, 136, 139, 140, 141, 142, 143, 146, 148, 154, 164, 170, 173, 206, 227, 238, 245, 290, 298, 344, 363, 367, 368, 399, 417, 418, 419, 420, 421, 422, 427, 432, 438, 440, 446, 449, 453, 456, 458, 459, 460, 465, 473, 492, 506, 510, 516, 529, 540, 541, 542, 543, 552, 555, 556, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 581, 661, 725, 727, 751, 783, 798, 813, 823, 824, 854, 860, 863, 895, 903, 922, 923, 925, 926, 927, 963, 982, 984, 985, 986, 987, 992, 996, 1003, 1014, 1030, 1039, 1040, 1041, 1058, 1072, 1079, 1080, 1086, 1087, 1095, 1096, 1097, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1124, 1125, 1136, 1140, 1199, 1210, 1218, 1229, 1238], "point": [15, 16, 40, 52, 53, 146, 148, 173, 186, 189, 207, 298, 344, 363, 367, 399, 427, 432, 456, 458, 492, 515, 579, 581, 751, 783, 789, 792, 802, 803, 814, 860, 903, 922, 926, 963, 992, 996, 1014, 1058, 1096, 1118, 1120, 1210, 1229], "standard": [15, 40, 249, 259, 298, 382, 421, 576, 591, 596, 611, 732, 747, 751, 827, 860, 942, 986, 1136, 1140, 1156, 1229, 1238], "behaviour": [15, 80, 88, 167, 298, 598, 606, 607, 621, 661, 751, 778, 860, 1143, 1151, 1152, 1166], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 60, 69, 71, 72, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 116, 117, 118, 121, 122, 124, 127, 128, 130, 131, 133, 134, 136, 139, 140, 141, 142, 146, 148, 155, 157, 168, 170, 172, 174, 178, 186, 187, 189, 190, 205, 209, 223, 234, 235, 237, 240, 241, 244, 248, 257, 259, 263, 265, 268, 274, 298, 345, 420, 421, 422, 428, 497, 504, 514, 524, 551, 562, 566, 567, 584, 593, 594, 599, 612, 613, 623, 633, 634, 635, 638, 678, 686, 690, 704, 751, 767, 784, 789, 790, 792, 793, 797, 802, 803, 816, 818, 819, 822, 826, 831, 832, 834, 838, 860, 906, 984, 985, 986, 987, 990, 993, 1063, 1076, 1102, 1106, 1121, 1124, 1128, 1144, 1157, 1158, 1168, 1178, 1179, 1180, 1183, 1206, 1229], "larger": [15, 58, 59, 60, 683, 772, 860], "should": [15, 38, 40, 58, 59, 60, 88, 105, 107, 109, 111, 120, 125, 126, 128, 130, 134, 136, 143, 144, 148, 157, 165, 203, 206, 209, 235, 236, 237, 256, 257, 263, 266, 284, 298, 307, 342, 362, 415, 423, 456, 458, 478, 515, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 582, 591, 665, 700, 713, 716, 728, 729, 741, 751, 767, 777, 782, 797, 798, 803, 820, 824, 826, 831, 833, 860, 863, 899, 921, 979, 1044, 1077, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1122, 1136, 1217, 1229], "ensur": [15, 40, 119, 145, 146, 148, 185, 188, 222, 235, 298, 447, 513, 751, 788, 791, 802, 803, 860, 863, 1210, 1229], "awar": [15, 203, 236, 237, 256, 298, 599, 623, 782, 860, 1144, 1168, 1185], "both": [15, 30, 37, 58, 71, 89, 90, 186, 187, 189, 190, 205, 206, 216, 234, 235, 268, 298, 312, 345, 363, 423, 447, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 747, 751, 762, 789, 790, 792, 793, 797, 798, 808, 816, 834, 860, 906, 1007, 1017, 1229], "limit": [15, 16, 60, 118, 119, 130, 174, 298, 333, 346, 347, 428, 434, 751, 784, 794, 860, 907, 908, 993, 1229], "represent": [15, 43, 44, 258, 298, 342, 375, 379, 382, 383, 385, 387, 389, 392, 395, 396, 399, 413, 414, 416, 659, 751, 780, 800, 860, 899, 900, 935, 939, 941, 942, 946, 948, 951, 953, 956, 959, 960, 963, 977, 978, 980, 1208, 1212, 1229], "look": [15, 186, 298, 334, 504, 513, 751, 789, 860, 889], "appli": [15, 25, 37, 40, 58, 64, 88, 130, 143, 146, 148, 178, 209, 223, 284, 298, 373, 374, 375, 379, 381, 382, 383, 385, 387, 389, 392, 395, 396, 399, 402, 413, 414, 416, 421, 422, 511, 513, 515, 551, 568, 570, 571, 573, 577, 621, 638, 639, 640, 644, 686, 687, 690, 691, 704, 714, 715, 716, 726, 741, 751, 794, 801, 802, 803, 811, 848, 860, 906, 933, 934, 935, 939, 941, 942, 946, 948, 951, 953, 956, 959, 960, 963, 966, 977, 978, 980, 986, 987, 1077, 1107, 1109, 1110, 1112, 1116, 1166, 1183, 1184, 1185, 1189, 1229], "float64": [15, 37, 40, 58, 108, 116, 146, 168, 170, 178, 239, 260, 273, 298, 315, 316, 317, 318, 319, 320, 340, 348, 349, 350, 364, 399, 423, 456, 458, 557, 589, 590, 657, 658, 702, 724, 727, 742, 751, 779, 817, 837, 860, 863, 963, 1211, 1216, 1229], "doe": [15, 37, 39, 58, 80, 88, 99, 105, 107, 108, 109, 111, 112, 116, 117, 118, 120, 121, 125, 126, 130, 131, 134, 136, 160, 172, 191, 204, 205, 225, 235, 236, 237, 265, 273, 298, 301, 415, 441, 504, 514, 634, 635, 663, 747, 751, 771, 782, 797, 803, 832, 837, 860, 909, 979, 990, 1000, 1001, 1076, 1131, 1219, 1229, 1233], "cover": 15, "nativ": [15, 116, 118, 121, 122, 124, 128, 144, 203, 209, 236, 237, 256, 284, 298, 515, 716, 751, 757, 848, 1077, 1229, 1238], "level": [15, 40, 45, 60, 130, 133, 134, 135, 146, 178, 209, 220, 298, 429, 751, 794, 801, 860], "larg": [15, 16, 19, 80, 118], "maximum": [15, 31, 37, 58, 116, 117, 130, 136, 144, 145, 146, 148, 184, 186, 210, 211, 298, 470, 516, 540, 549, 558, 717, 718, 751, 789, 804, 860, 943, 1036, 1078, 1086, 1092, 1098, 1229], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 80, 105, 106, 109, 110, 130, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 158, 164, 165, 167, 184, 186, 204, 206, 215, 222, 224, 225, 257, 259, 260, 267, 269, 298, 301, 364, 369, 370, 371, 372, 375, 377, 378, 379, 381, 382, 383, 387, 389, 390, 391, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 429, 569, 570, 571, 573, 576, 577, 578, 676, 677, 695, 696, 698, 700, 702, 738, 739, 747, 751, 763, 769, 773, 776, 777, 778, 789, 798, 803, 807, 820, 860, 910, 912, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1011, 1016, 1020, 1021, 1026, 1108, 1134, 1203, 1229, 1233, 1238], "pi": [15, 364, 751, 910, 912, 1134, 1203, 1229], "e": [15, 36, 37, 39, 41, 42, 45, 58, 106, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 129, 133, 136, 184, 192, 202, 252, 254, 259, 267, 298, 306, 313, 417, 423, 447, 506, 515, 520, 521, 523, 524, 525, 526, 527, 586, 591, 634, 635, 702, 716, 741, 751, 776, 800, 814, 860, 863, 982, 983, 1007, 1123, 1136, 1210, 1229, 1238], "const": 15, "15": [15, 40, 138, 145, 186, 196, 209, 234, 298, 362, 365, 379, 387, 391, 398, 412, 551, 567, 577, 610, 687, 738, 751, 789, 816, 860, 921, 924, 962, 976, 1155, 1229], "141592653589793": 15, "718281828459045": [15, 417, 506, 751, 982, 1072, 1229], "align": [15, 20, 21, 40, 80, 88, 298], "numer": [15, 21, 37, 40, 58, 158, 165, 206, 215, 224, 267, 298, 306, 345, 433, 447, 508, 530, 532, 552, 561, 586, 608, 647, 651, 661, 751, 763, 769, 777, 798, 807, 860, 863, 906, 923, 983, 1007, 1024, 1123, 1130, 1153, 1192, 1210, 1229, 1238], "cleanli": [15, 184, 298], "line": [15, 25, 40, 116, 117, 121, 130, 184, 198, 200, 225, 298, 301, 606, 1151], "up": [15, 40, 72, 116, 117, 119, 130, 203, 206, 236, 237, 256, 298, 313, 344, 515, 751, 797, 798, 803, 860, 863, 903, 1229], "xx": [15, 81, 83, 145, 148, 702, 863], "yy": [15, 81, 83, 145, 148, 863], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 60, 106, 138, 146, 234, 298, 308, 390, 391, 394, 398, 412, 446, 548, 558, 567, 569, 577, 592, 668, 734, 739, 751, 772, 773, 794, 801, 812, 816, 829, 860, 863, 958, 962, 976, 1077, 1108, 1229], "111": 15, "100": [15, 22, 32, 40, 108, 111, 116, 117, 125, 130, 134, 244, 298, 562, 584, 599, 609, 610, 623, 641, 751, 822, 860, 1073, 1102, 1109, 1110, 1112, 1128, 1144, 1154, 1155, 1168, 1186, 1229, 1238], "988": 15, "44": [15, 216, 298, 366, 751, 808, 860], "444": 15, "23": [15, 138, 186, 234, 298, 371, 375, 379, 387, 395, 398, 414, 567, 570, 571, 573, 576, 577, 578, 697, 700, 737, 738, 739, 751, 789, 816, 860, 863, 931, 939, 1238], "789": [15, 863], "fmt": [16, 445, 705, 751, 795, 860], "floatfmt": 16, "mix": [16, 923, 1185, 1229], "how": [16, 39, 40, 80, 88, 108, 111, 119, 128, 135, 167, 205, 224, 267, 268, 298, 342, 365, 397, 398, 412, 446, 474, 475, 476, 547, 561, 575, 609, 610, 638, 640, 697, 741, 751, 778, 797, 834, 860, 899, 924, 961, 962, 976, 1040, 1041, 1042, 1114, 1154, 1155, 1183, 1185, 1229], "full": [16, 48, 80, 85, 88, 116, 117, 120, 130, 131, 132, 136, 186, 187, 189, 190, 234, 298, 567, 638, 639, 640, 644, 751, 789, 790, 792, 793, 802, 803, 816, 860, 863, 1183, 1184, 1185, 1189, 1238], "scientif": 16, "notat": [16, 40, 298], "small": [16, 119, 145, 207, 298, 398, 782, 860, 1238], "2304980958725870923": 16, "1e6": 16, "1e": [16, 139, 140, 141, 142], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 410, 974], "00000001": [16, 668, 751], "plai": [17, 682], "sam": 17, "As": [17, 71, 89, 90, 105, 107, 108, 109, 111, 121, 125, 126, 134, 298, 504, 741, 860], "time": [17, 39, 48, 50, 64, 69, 85, 86, 87, 128, 130, 172, 186, 187, 189, 190, 206, 234, 269, 298, 339, 369, 370, 371, 372, 373, 377, 378, 394, 397, 398, 401, 403, 404, 412, 415, 472, 473, 504, 567, 570, 571, 572, 573, 574, 576, 577, 578, 587, 638, 640, 644, 659, 660, 681, 682, 695, 696, 697, 698, 699, 700, 706, 738, 739, 751, 772, 773, 789, 790, 792, 793, 798, 812, 816, 860, 863, 894, 929, 930, 931, 932, 937, 938, 958, 961, 962, 965, 967, 968, 976, 979, 990, 1038, 1040, 1041, 1132, 1183, 1185, 1189, 1212, 1213, 1229, 1238], "goe": 17, "By": [17, 19, 35, 80, 116, 117, 130, 186, 205, 206, 234, 244, 249, 268, 269, 270, 298, 394, 398, 412, 497, 567, 570, 571, 572, 573, 574, 576, 577, 578, 584, 596, 666, 683, 685, 695, 696, 698, 699, 700, 713, 732, 738, 739, 740, 751, 772, 789, 797, 798, 816, 822, 827, 835, 860, 958, 962, 976, 1063, 1128, 1140, 1210, 1218, 1229], "begin": [17, 40, 298, 420, 421, 422, 606, 751, 985, 986, 987, 1151, 1229], "beauti": 17, "friendship": 17, "len_byt": [17, 613, 614, 1158, 1159], "len": [17, 40, 144, 146, 204, 298, 351, 352, 487, 515, 751, 1053, 1229], "u32": [17, 64, 118, 156, 158, 163, 221, 275, 280, 289, 291, 298, 307, 314, 321, 322, 323, 324, 325, 351, 352, 443, 466, 470, 471, 475, 486, 533, 545, 558, 566, 570, 571, 573, 576, 577, 578, 582, 601, 612, 613, 659, 663, 669, 674, 678, 679, 684, 723, 751, 766, 769, 775, 810, 840, 844, 853, 855, 860, 879, 880, 881, 895, 900, 1003, 1052, 1098, 1106, 1146, 1157, 1158, 1212, 1215, 1217, 1229], "37": 17, "beaut": 17, "48": [17, 234, 298, 567, 751, 816, 860], "fmt_str_length": 17, "50": [17, 32, 40, 164, 172, 184, 298, 345, 398, 412, 751, 906, 923, 976, 1229], "element": [18, 19, 30, 145, 148, 157, 163, 201, 224, 235, 249, 263, 270, 298, 313, 315, 316, 317, 318, 319, 320, 339, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 368, 424, 425, 429, 441, 452, 466, 474, 475, 477, 478, 479, 486, 487, 493, 494, 495, 496, 507, 508, 515, 547, 548, 558, 561, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 588, 589, 590, 595, 596, 629, 630, 641, 657, 658, 660, 666, 683, 685, 728, 729, 732, 740, 751, 767, 775, 826, 827, 831, 835, 860, 870, 871, 872, 873, 874, 875, 876, 894, 902, 905, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 927, 988, 989, 994, 1002, 1015, 1029, 1031, 1032, 1040, 1041, 1043, 1044, 1045, 1052, 1053, 1059, 1060, 1061, 1062, 1073, 1074, 1077, 1091, 1098, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1133, 1134, 1135, 1139, 1140, 1174, 1175, 1186, 1200, 1203, 1204, 1208, 1213, 1214, 1218, 1229], "empti": [18, 36, 37, 58, 96, 108, 116, 117, 121, 127, 130, 159, 160, 186, 199, 215, 298, 713, 730, 770, 771, 789, 807, 860, 863, 905, 909, 1010, 1229], "alwai": [18, 37, 39, 58, 64, 116, 145, 185, 188, 209, 284, 298, 523, 638, 695, 741, 803, 860, 1077, 1183, 1229, 1237, 1238], "neg": [18, 49, 137, 186, 187, 189, 190, 192, 208, 234, 244, 245, 247, 252, 298, 497, 498, 551, 567, 584, 585, 592, 627, 751, 789, 790, 792, 793, 816, 822, 823, 825, 840, 860, 1002, 1032, 1063, 1064, 1128, 1129, 1137, 1172, 1200, 1229], "result": [18, 37, 43, 44, 45, 58, 59, 60, 80, 88, 109, 111, 118, 119, 120, 121, 130, 133, 135, 136, 148, 172, 186, 189, 191, 205, 220, 224, 234, 237, 244, 245, 260, 269, 277, 298, 398, 401, 404, 412, 420, 421, 422, 426, 441, 463, 503, 504, 513, 515, 547, 555, 562, 563, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 583, 584, 585, 628, 629, 640, 661, 686, 687, 690, 691, 695, 696, 697, 698, 699, 700, 715, 724, 727, 728, 729, 742, 751, 768, 772, 789, 790, 792, 793, 797, 802, 803, 812, 816, 820, 822, 823, 841, 860, 869, 922, 962, 965, 968, 976, 985, 986, 987, 990, 1001, 1030, 1069, 1077, 1096, 1102, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1126, 1128, 1129, 1173, 1174, 1185, 1210, 1229, 1237, 1238], "being": [18, 87, 116, 117, 118, 130, 136, 158, 171, 257, 267, 268, 298, 313, 362, 398, 443, 570, 571, 572, 573, 574, 576, 577, 578, 701, 751, 769, 773, 781, 782, 834, 860, 901, 921, 962, 1003, 1096, 1229, 1238], "content": [18, 587, 751, 1132, 1229], "final": [18, 40, 80, 135, 298, 420, 421, 422, 751, 782, 860, 985, 986, 987, 1229], "item": [18, 88, 117, 184, 235, 238, 298, 365, 425, 473, 476, 482, 484, 492, 581, 630, 751, 924, 989, 1039, 1042, 1048, 1050, 1058, 1120, 1175, 1229], "num": [18, 40, 262, 298, 447, 751, 1007, 1229], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 60, 64, 80, 88, 112, 119, 130, 138, 146, 148, 160, 172, 183, 184, 186, 192, 194, 196, 197, 202, 219, 223, 224, 226, 230, 232, 234, 240, 252, 273, 277, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 308, 312, 321, 322, 323, 325, 345, 353, 356, 365, 369, 371, 377, 390, 391, 397, 398, 412, 415, 441, 442, 446, 452, 462, 467, 476, 483, 498, 501, 507, 523, 525, 534, 548, 551, 562, 567, 592, 642, 654, 668, 680, 686, 695, 698, 701, 704, 706, 708, 713, 715, 736, 739, 751, 772, 773, 789, 794, 796, 801, 811, 812, 816, 818, 828, 829, 837, 841, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 863, 906, 924, 929, 931, 937, 961, 976, 979, 982, 1002, 1015, 1032, 1042, 1049, 1064, 1067, 1073, 1077, 1091, 1102, 1121, 1124, 1187, 1200, 1229, 1238], "size": [19, 45, 60, 116, 117, 118, 144, 145, 146, 148, 150, 170, 267, 298, 563, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 675, 710, 711, 728, 729, 751, 772, 860, 984, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1229, 1238], "overwrit": [19, 38, 39, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 134, 154, 268, 298, 308, 751, 782, 860], "chunk": [19, 60, 114, 116, 117, 128, 130, 133, 134, 135, 146, 148, 172, 204, 219, 298, 312, 559, 751, 860, 869, 904, 990, 999, 1083, 1099, 1205, 1229], "stream": [19, 41, 42, 58, 59, 60, 86, 87, 124, 157, 185, 188, 205, 263, 265, 298, 513, 751, 767, 772, 773, 780, 782, 788, 791, 797, 802, 803, 807, 812, 824, 826, 831, 832, 860], "engin": [19, 38, 118, 119, 121, 150, 185, 188, 205, 209, 265, 284, 298, 513, 751, 788, 791, 797, 802, 803, 807, 832, 848, 860, 1077, 1229], "determin": [19, 37, 40, 58, 78, 80, 88, 108, 111, 116, 117, 118, 121, 127, 128, 130, 135, 137, 155, 165, 178, 186, 189, 203, 204, 209, 224, 234, 264, 269, 298, 342, 381, 397, 398, 412, 443, 504, 514, 523, 555, 561, 562, 570, 571, 572, 573, 574, 576, 577, 578, 591, 599, 609, 610, 638, 640, 641, 697, 724, 727, 742, 751, 789, 792, 816, 860, 899, 941, 961, 962, 976, 1003, 1070, 1076, 1096, 1102, 1136, 1144, 1154, 1155, 1183, 1185, 1186, 1229], "schema": [19, 33, 36, 38, 39, 64, 81, 82, 83, 88, 100, 101, 103, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 128, 129, 130, 134, 135, 144, 146, 155, 159, 160, 168, 170, 204, 209, 216, 220, 259, 298, 326, 327, 328, 329, 330, 331, 332, 503, 504, 523, 609, 610, 668, 733, 751, 770, 771, 779, 802, 803, 808, 820, 843, 848, 860, 863, 886, 909, 1154, 1155, 1229], "thread": [19, 37, 58, 87, 114, 116, 117, 119, 150, 298, 313, 478, 515, 751, 773, 860, 1044], "pool": [19, 87, 150, 773, 860], "For": [19, 39, 40, 116, 117, 119, 120, 121, 130, 131, 132, 167, 172, 205, 206, 225, 234, 284, 298, 301, 420, 421, 422, 504, 515, 524, 560, 591, 598, 606, 607, 608, 621, 686, 690, 700, 704, 705, 747, 751, 778, 798, 816, 848, 860, 985, 986, 987, 990, 1017, 1100, 1136, 1143, 1151, 1152, 1153, 1166, 1210, 1229, 1233], "some": [19, 35, 40, 71, 90, 108, 116, 117, 118, 121, 130, 154, 167, 298, 747, 778, 860, 1015, 1229, 1238], "dataset": [19, 45, 51, 116, 117, 128, 130, 136, 205, 298, 463, 751, 763, 797, 802, 803, 860, 1030, 1229], "esp": 19, "have": [19, 35, 39, 40, 48, 71, 80, 90, 106, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 148, 172, 203, 205, 228, 234, 236, 237, 256, 298, 362, 420, 421, 422, 515, 524, 558, 562, 567, 608, 751, 776, 797, 807, 816, 824, 840, 860, 863, 921, 923, 985, 986, 987, 990, 1000, 1098, 1102, 1185, 1229, 1238], "too": [19, 566, 751, 782, 860], "optimist": 19, "lead": [19, 45, 112, 136, 186, 187, 189, 190, 213, 234, 244, 251, 298, 436, 439, 497, 513, 515, 567, 583, 584, 616, 632, 633, 635, 655, 683, 751, 789, 790, 792, 793, 802, 803, 816, 822, 843, 848, 860, 1063, 1077, 1126, 1128, 1161, 1177, 1178, 1180, 1229], "memori": [19, 60, 88, 105, 106, 109, 110, 111, 116, 117, 118, 121, 122, 128, 130, 133, 134, 135, 154, 172, 209, 237, 246, 284, 298, 547, 559, 586, 751, 772, 860, 990, 1077, 1099, 1130, 1131, 1229], "error": [19, 39, 87, 116, 117, 130, 158, 224, 235, 298, 308, 335, 340, 462, 481, 484, 502, 534, 598, 602, 606, 608, 609, 611, 638, 639, 640, 644, 751, 769, 773, 843, 848, 860, 890, 895, 1047, 1050, 1068, 1143, 1147, 1151, 1153, 1154, 1156, 1183, 1184, 1185, 1189, 1229], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 60, 80, 81, 83, 88, 97, 99, 104, 108, 109, 111, 112, 116, 117, 118, 121, 122, 124, 125, 128, 130, 133, 134, 135, 136, 139, 140, 144, 146, 155, 157, 159, 167, 172, 175, 178, 180, 184, 185, 186, 188, 191, 192, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 215, 220, 237, 238, 247, 252, 253, 256, 258, 263, 265, 267, 268, 275, 280, 282, 284, 292, 298, 324, 425, 437, 442, 467, 479, 504, 547, 548, 563, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 592, 594, 605, 609, 610, 654, 656, 675, 678, 684, 690, 691, 704, 708, 710, 711, 726, 728, 729, 736, 741, 751, 767, 770, 772, 778, 782, 785, 786, 787, 789, 794, 797, 798, 799, 801, 803, 807, 825, 829, 830, 831, 832, 834, 840, 844, 846, 848, 856, 860, 989, 990, 998, 1002, 1045, 1091, 1103, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1137, 1150, 1154, 1155, 1200, 1202, 1229, 1238], "per": [19, 37, 40, 58, 144, 146, 157, 184, 220, 221, 241, 248, 263, 274, 287, 289, 290, 298, 313, 478, 481, 482, 502, 515, 594, 665, 678, 751, 767, 819, 826, 831, 838, 851, 853, 854, 860, 1044, 1047, 1048, 1068, 1217, 1229], "everi": [19, 37, 58, 116, 117, 130, 180, 186, 189, 253, 256, 269, 298, 326, 327, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 398, 412, 425, 437, 470, 471, 476, 479, 482, 483, 493, 498, 501, 605, 656, 686, 687, 690, 691, 751, 782, 787, 789, 792, 830, 860, 882, 883, 913, 914, 915, 916, 917, 918, 919, 920, 921, 962, 976, 989, 998, 1000, 1036, 1037, 1042, 1045, 1048, 1049, 1059, 1064, 1067, 1150, 1202, 1229], "process": [19, 37, 58, 59, 60, 116, 117, 118, 130, 150, 298, 772, 860], "liter": [20, 21, 25, 39, 118, 121, 147, 148, 149, 240, 241, 244, 268, 273, 274, 298, 308, 334, 345, 371, 418, 419, 426, 433, 438, 440, 447, 465, 510, 514, 530, 532, 542, 543, 552, 562, 598, 601, 621, 622, 651, 661, 670, 672, 680, 681, 682, 689, 693, 694, 697, 713, 718, 722, 730, 733, 735, 737, 751, 784, 818, 819, 822, 834, 837, 838, 860, 863, 889, 906, 931, 991, 1007, 1102, 1121, 1124, 1128, 1143, 1146, 1166, 1167, 1229], "left": [20, 21, 40, 66, 80, 139, 140, 141, 142, 186, 187, 189, 190, 205, 206, 234, 268, 298, 363, 420, 421, 422, 446, 447, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 615, 659, 680, 686, 687, 690, 691, 695, 696, 698, 699, 704, 726, 738, 739, 741, 751, 789, 790, 792, 793, 797, 798, 816, 834, 860, 922, 985, 986, 987, 1007, 1096, 1122, 1160, 1212, 1229], "center": [20, 21, 40, 298, 420, 421, 422, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 751, 985, 986, 987, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "cell": [20, 21, 40, 298], "valueerror": [20, 25], "recognis": [20, 21, 25, 143], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 80, 112, 121, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 269, 298, 301, 369, 370, 371, 372, 373, 375, 377, 378, 379, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 473, 567, 570, 571, 572, 573, 574, 576, 577, 578, 638, 640, 659, 695, 696, 698, 699, 700, 706, 713, 738, 739, 751, 769, 789, 790, 792, 793, 798, 816, 860, 863, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 1026, 1039, 1040, 1041, 1086, 1087, 1121, 1125, 1183, 1185, 1212, 1229], "date": [21, 40, 48, 80, 116, 117, 119, 121, 127, 130, 136, 146, 158, 164, 184, 186, 187, 189, 190, 204, 206, 225, 234, 298, 301, 370, 371, 372, 375, 378, 381, 382, 383, 389, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 473, 567, 570, 571, 572, 573, 574, 576, 577, 578, 638, 639, 659, 695, 696, 698, 699, 706, 713, 737, 751, 769, 789, 790, 792, 793, 798, 816, 860, 863, 930, 931, 932, 935, 938, 939, 941, 942, 943, 944, 945, 946, 950, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 1026, 1039, 1040, 1041, 1086, 1087, 1121, 1125, 1183, 1184, 1212, 1229], "333": [21, 580, 751, 1119, 1229], "mno": [21, 25], "2023": [21, 40, 112, 138, 204, 298, 371, 700, 713, 863, 931], "29": [21, 146, 369, 390, 929, 954], "2001": [21, 370, 375, 378, 379, 381, 387, 389, 394, 395, 396, 398, 403, 412, 413, 414, 415, 570, 571, 573, 576, 577, 578, 638, 751, 863, 930, 935, 938, 939, 941, 943, 944, 945, 946, 948, 950, 951, 953, 956, 958, 959, 960, 962, 967, 976, 977, 978, 979, 980, 1183], "null": [21, 37, 39, 58, 66, 80, 88, 108, 116, 117, 126, 130, 136, 154, 157, 159, 163, 164, 167, 169, 174, 178, 179, 197, 205, 212, 213, 214, 221, 224, 227, 244, 245, 248, 249, 250, 251, 255, 260, 263, 266, 268, 270, 273, 280, 298, 309, 311, 312, 313, 323, 326, 327, 333, 335, 345, 351, 353, 356, 365, 367, 368, 394, 405, 406, 407, 408, 409, 410, 411, 419, 420, 421, 422, 423, 426, 427, 428, 434, 446, 456, 458, 459, 460, 466, 468, 469, 476, 477, 480, 481, 482, 485, 486, 493, 494, 495, 496, 497, 502, 504, 515, 543, 544, 545, 548, 559, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 585, 586, 588, 593, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 618, 619, 620, 627, 629, 630, 631, 642, 647, 648, 649, 650, 659, 669, 670, 671, 672, 680, 681, 682, 684, 689, 702, 713, 718, 722, 728, 729, 733, 735, 741, 751, 767, 770, 775, 778, 784, 796, 797, 810, 820, 822, 823, 826, 831, 833, 834, 837, 839, 844, 860, 867, 868, 870, 879, 882, 883, 890, 905, 906, 924, 926, 927, 969, 970, 971, 972, 973, 974, 975, 983, 985, 986, 987, 991, 993, 1000, 1006, 1022, 1023, 1031, 1034, 1035, 1042, 1043, 1047, 1052, 1060, 1062, 1063, 1068, 1070, 1077, 1090, 1091, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1123, 1128, 1129, 1133, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1163, 1164, 1165, 1172, 1174, 1175, 1176, 1187, 1192, 1208, 1210, 1211, 1212, 1219, 1229, 1237, 1238], "07": [21, 371, 397, 398, 412, 638, 695, 698, 706, 863, 931, 961, 1183], "05": [21, 136, 139, 140, 141, 142, 146, 158, 206, 269, 298, 371, 372, 397, 399, 401, 404, 405, 695, 698, 769, 798, 860, 863, 931, 932, 933, 934, 961, 962, 965, 966, 968, 969, 976], "visibl": [22, 170, 298, 984, 1229], "eg": [22, 30, 40, 88, 119, 152, 298, 398, 638, 640, 661, 751, 1000, 1183, 1185, 1229], "low": [22, 118, 150, 555, 751, 1096, 1229], "rang": [22, 40, 118, 119, 164, 170, 186, 204, 298, 364, 375, 389, 395, 396, 398, 412, 413, 446, 675, 681, 694, 695, 696, 697, 698, 699, 710, 711, 737, 738, 739, 751, 789, 860, 923, 935, 953, 959, 960, 962, 976, 977, 984, 1091, 1229], "98": [22, 196, 298, 339, 436, 439, 593, 641, 660, 751, 1186], "99": [22, 40, 173, 174, 196, 199, 268, 298, 307, 339, 426, 428, 436, 439, 593, 660, 741, 751, 783, 784, 834, 860, 982, 991, 1229], "tbl_col": 22, "95": [22, 307, 751], "96": [22, 307, 751], "97": [22, 196, 298, 307, 751], "move": [23, 237, 298, 420, 421, 422, 570, 571, 573, 577, 751, 985, 986, 987, 1109, 1110, 1112, 1116, 1229], "inlin": [23, 237, 298, 598, 606, 607, 621, 1143, 1151, 1152, 1166], "parenthes": 23, "inform": [24, 28, 38, 85, 120, 128, 131, 132, 135, 139, 141, 162, 164, 225, 298, 301, 463, 591, 598, 606, 607, 621, 751, 812, 860, 900, 1030, 1136, 1143, 1151, 1152, 1166, 1229, 1233], "below": [24, 39, 120, 131, 132, 167, 186, 224, 298, 428, 695, 696, 698, 699, 738, 739, 741, 747, 751, 778, 789, 860], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 80, 112], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 606, 611, 1151, 1156], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 85, 118, 120, 131, 132, 146, 157, 164, 170, 222, 237, 263, 264, 267, 268, 298, 363, 399, 443, 447, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 628, 629, 633, 634, 686, 690, 728, 729, 751, 767, 831, 834, 860, 863, 922, 923, 963, 984, 1003, 1007, 1096, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1173, 1174, 1178, 1219, 1229], "divid": [25, 363, 398, 412, 420, 421, 422, 463, 555, 751, 922, 962, 976, 985, 986, 987, 1030, 1096, 1229], "same": [25, 39, 40, 68, 71, 80, 86, 87, 88, 89, 90, 122, 130, 139, 140, 141, 142, 144, 152, 175, 185, 205, 209, 224, 237, 248, 265, 273, 274, 277, 284, 298, 305, 312, 331, 367, 368, 429, 436, 439, 503, 519, 522, 547, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 594, 612, 650, 751, 772, 773, 785, 788, 797, 802, 803, 826, 832, 837, 838, 841, 860, 865, 870, 887, 922, 926, 927, 931, 1069, 1077, 1096, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1157, 1220, 1229], "dens": [25, 184, 298, 558, 751, 1098, 1229], "space": [25, 186, 298, 789, 860], "horizont": [25, 88, 178, 194, 210, 211, 212, 213, 217, 218, 250, 251, 267, 298, 670, 672, 681, 682, 686, 687, 689, 690, 691, 693, 701, 704, 718, 722, 726, 735], "markdown": 25, "compat": [25, 40, 45, 60, 298, 598, 600, 601, 606, 607, 608, 621, 622, 860, 863, 1143, 1145, 1146, 1151, 1152, 1153, 1166, 1167], "utf8": [25, 116, 117, 130], "No": [25, 645, 1190], "round": [25, 40, 82, 112, 118, 298, 344, 350, 432, 580, 657, 751, 903, 996, 1119, 1229], "corner": [25, 40, 112, 298], "op": [25, 148, 298, 561, 751, 860, 1185, 1229], "one": [25, 37, 38, 40, 58, 69, 80, 97, 105, 107, 108, 109, 110, 111, 116, 117, 121, 125, 126, 127, 130, 147, 148, 149, 152, 174, 175, 184, 185, 186, 187, 189, 190, 203, 215, 224, 234, 235, 236, 242, 244, 259, 262, 278, 298, 307, 363, 428, 429, 436, 439, 497, 504, 508, 567, 584, 593, 607, 623, 716, 731, 741, 747, 751, 784, 785, 788, 789, 790, 792, 793, 807, 816, 821, 822, 839, 842, 860, 869, 922, 993, 1026, 1063, 1070, 1074, 1096, 1128, 1152, 1168, 1193, 1229, 1233], "more": [25, 40, 43, 45, 60, 69, 80, 88, 89, 90, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 125, 126, 127, 128, 131, 132, 139, 141, 146, 148, 152, 162, 164, 175, 202, 203, 207, 209, 215, 220, 225, 235, 236, 238, 259, 265, 284, 298, 301, 310, 313, 332, 429, 463, 492, 505, 508, 513, 515, 546, 581, 591, 607, 612, 638, 639, 640, 662, 702, 731, 741, 751, 807, 832, 860, 863, 870, 888, 900, 923, 1026, 1030, 1058, 1071, 1077, 1120, 1136, 1152, 1157, 1183, 1184, 1185, 1214, 1229, 1233, 1238], "semigraph": 25, "box": [25, 209, 298], "draw": [25, 30, 145, 1238], "found": [25, 37, 40, 58, 66, 92, 101, 103, 108, 112, 168, 298, 582, 611, 636, 637, 638, 640, 751, 860, 1122, 1156, 1181, 1182, 1183, 1185, 1229, 1237], "unicod": 25, "block": [25, 87, 185, 188, 265, 298, 741, 773, 788, 791, 814, 832, 840, 848, 860, 1121, 1124, 1229], "http": [25, 40, 41, 42, 106, 118, 119, 154, 162, 298, 606, 608, 1151, 1153], "en": [25, 40, 298], "wikipedia": 25, "org": [25, 41, 42, 106, 118, 119, 154, 162, 298], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 298], "etc": [26, 39, 40, 116, 120, 122, 124, 131, 132, 133, 298, 751, 863, 1121, 1124, 1229], "between": [29, 88, 143, 144, 146, 148, 162, 227, 290, 298, 340, 365, 366, 447, 476, 484, 493, 494, 495, 496, 548, 555, 556, 574, 597, 676, 677, 683, 685, 725, 728, 729, 751, 813, 854, 860, 895, 900, 924, 925, 1007, 1042, 1050, 1059, 1060, 1061, 1062, 1091, 1096, 1097, 1113, 1142, 1229], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 60, 64, 150, 164, 174, 185, 211, 224, 234, 298, 346, 353, 358, 428, 504, 547, 558, 562, 567, 570, 583, 630, 718, 731, 751, 784, 788, 816, 860, 907, 913, 917, 923, 993, 1070, 1098, 1109, 1126, 1175, 1229], "tbl_row": 30, "also": [32, 37, 40, 58, 69, 71, 108, 118, 121, 127, 130, 144, 145, 146, 147, 148, 152, 168, 185, 186, 187, 189, 190, 216, 220, 234, 236, 240, 248, 268, 273, 298, 353, 356, 394, 397, 429, 447, 515, 558, 562, 570, 571, 572, 573, 574, 576, 577, 578, 594, 633, 634, 686, 687, 690, 691, 695, 704, 706, 726, 741, 750, 751, 757, 788, 789, 790, 792, 793, 808, 816, 818, 826, 834, 837, 839, 860, 863, 961, 1007, 1098, 1102, 1145, 1146, 1178, 1229, 1233], "char": [32, 607, 1152], "omit": [32, 108, 112, 144, 146, 148, 152, 220, 237, 298, 738, 739, 863], "set_decimal_separ": 32, "x": [32, 66, 67, 72, 80, 88, 106, 112, 116, 117, 119, 130, 144, 146, 154, 170, 194, 198, 200, 205, 215, 224, 225, 236, 237, 267, 298, 301, 306, 308, 310, 364, 418, 419, 433, 438, 440, 441, 465, 472, 484, 508, 510, 512, 513, 515, 530, 532, 535, 536, 537, 538, 539, 542, 543, 546, 552, 553, 561, 562, 566, 588, 591, 629, 651, 652, 659, 661, 668, 670, 672, 676, 677, 686, 687, 689, 704, 713, 715, 718, 722, 726, 735, 741, 751, 797, 803, 807, 825, 860, 863, 900, 993, 1028, 1077, 1102, 1133, 1136, 1174, 1212, 1229, 1237], "1234567": 32, "987654": [32, 863], "10101": 32, "y": [32, 72, 80, 88, 106, 112, 144, 146, 154, 170, 198, 200, 205, 215, 224, 225, 236, 237, 267, 298, 301, 306, 308, 310, 401, 404, 418, 419, 438, 440, 465, 472, 484, 510, 512, 515, 535, 536, 537, 538, 539, 542, 543, 546, 553, 561, 562, 566, 638, 639, 640, 652, 661, 668, 670, 672, 676, 677, 689, 700, 713, 718, 722, 735, 751, 797, 807, 825, 860, 863, 900, 965, 968, 1102, 1183, 1184, 1185, 1229], "1234": [32, 580, 751, 1119, 1229], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 146, 186, 206, 269, 298, 369, 370, 372, 377, 379, 383, 387, 390, 391, 394, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 570, 571, 573, 576, 577, 578, 638, 640, 644, 698, 700, 738, 739, 751, 789, 798, 860, 863, 929, 930, 932, 933, 934, 937, 938, 939, 945, 946, 951, 954, 955, 956, 958, 961, 962, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 979, 1183, 1185, 1189], "321": [32, 1238], "strip": [33, 616, 626, 633, 634, 635, 636, 637, 1161, 1171, 1178, 1179, 1180], "trail": [33, 184, 298, 626, 632, 633, 634, 1171, 1177, 1178, 1179], "zero": [33, 40, 105, 106, 115, 116, 117, 122, 124, 128, 145, 154, 174, 203, 235, 254, 260, 298, 428, 504, 508, 582, 591, 647, 661, 751, 770, 784, 860, 905, 993, 1070, 1136, 1192, 1205, 1210, 1211, 1229], "enabl": [33, 34, 71, 89, 90, 139, 140, 141, 142, 151, 240, 273, 298, 309, 311, 562, 583, 599, 623, 665, 747, 751, 772, 818, 837, 860, 867, 868, 1102, 1126, 1144, 1168, 1217, 1229], "d": [33, 36, 37, 39, 40, 41, 42, 45, 108, 136, 184, 186, 191, 192, 196, 205, 252, 254, 267, 271, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 306, 308, 378, 401, 404, 447, 551, 586, 601, 607, 629, 638, 639, 640, 680, 700, 706, 751, 789, 797, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 900, 938, 965, 968, 1007, 1146, 1152, 1174, 1183, 1184, 1185, 1229], "01": [33, 80, 146, 158, 164, 184, 186, 234, 269, 298, 369, 370, 371, 372, 378, 379, 382, 383, 387, 389, 390, 391, 394, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 567, 570, 571, 573, 576, 577, 578, 638, 639, 640, 644, 695, 696, 698, 700, 751, 769, 789, 816, 860, 863, 930, 931, 932, 933, 934, 938, 939, 945, 946, 951, 954, 955, 956, 958, 961, 962, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 1183, 1184, 1185, 1189], "6789": 33, "scale": [33, 49, 170, 298, 515, 551, 641, 751, 984, 1186, 1229], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 108, 120, 121, 131, 132, 144, 165, 167, 171, 185, 188, 222, 240, 241, 242, 248, 266, 273, 274, 277, 298, 306, 377, 423, 426, 547, 594, 598, 606, 607, 621, 678, 680, 681, 682, 702, 730, 733, 751, 777, 781, 788, 791, 818, 819, 821, 826, 833, 837, 838, 841, 860, 929, 937, 991, 1143, 1151, 1152, 1166, 1229, 1233], "verbos": [34, 139, 141, 152, 607, 1152], "debug": [34, 772, 782, 802, 803, 860, 1238], "log": [34, 82, 339, 417, 508, 532, 552, 660, 751, 894, 982, 1213, 1229], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 67, 81, 83, 85, 105, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146, 177, 203, 222, 229, 235, 236, 237, 239, 255, 256, 264, 298, 514, 566, 751, 814, 817, 860, 1076, 1229], "show": [35, 40, 68, 164, 167, 184, 207, 221, 298, 443, 751, 778, 812, 824, 860, 1003, 1229], "variabl": [35, 61, 66, 128, 135, 147, 150, 215, 257, 298, 807, 860, 1206, 1229, 1237], "chang": [35, 80, 87, 116, 117, 118, 136, 267, 268, 269, 298, 313, 362, 363, 365, 398, 443, 514, 515, 548, 555, 570, 571, 572, 573, 574, 576, 577, 578, 702, 751, 773, 834, 860, 900, 901, 921, 922, 962, 1003, 1076, 1091, 1096, 1131, 1229], "restrict": [35, 630, 1175], "dictionari": [35, 40, 72, 105, 107, 108, 109, 111, 116, 117, 118, 119, 123, 125, 126, 129, 130, 134, 203, 222, 235, 236, 237, 255, 256, 298, 514, 751, 860, 1076, 1229], "those": [35, 40, 116, 121, 237, 268, 298, 558, 606, 702, 716, 751, 834, 860, 863, 1098, 1151, 1229], "been": [35, 40, 154, 155, 176, 179, 187, 188, 189, 190, 195, 231, 253, 279, 298, 313, 357, 358, 359, 360, 361, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 515, 553, 558, 568, 570, 571, 572, 573, 574, 576, 577, 578, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 652, 655, 656, 673, 692, 693, 714, 751, 790, 791, 792, 793, 802, 830, 843, 860, 870, 917, 918, 919, 920, 1012, 1018, 1040, 1053, 1068, 1076, 1098, 1107, 1123, 1125, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1201, 1202, 1229], "set_fmt_float": 35, "via": [35, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 203, 236, 298, 313, 515, 608, 751, 776, 860, 1153], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 115, 116, 121, 122, 124, 127, 298], "bytesio": [36, 37, 40, 41, 42, 45, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 129, 298, 776, 860], "compress": [36, 41, 42, 45, 59, 60, 298, 860], "avrocompress": [36, 298], "uncompress": [36, 41, 42, 45, 60, 122, 133, 298, 860], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 117, 122, 152, 298, 345, 528, 751, 800, 824, 860, 906, 1229], "apach": [36, 41, 42, 45, 115, 118, 119, 132, 298, 763], "avro": [36, 115, 298, 763], "writeabl": [36, 37, 41, 42, 43, 44, 45, 298], "like": [36, 37, 39, 41, 42, 43, 44, 45, 87, 106, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 186, 198, 200, 205, 259, 298, 369, 478, 527, 558, 606, 634, 635, 665, 747, 751, 773, 776, 789, 860, 929, 1044, 1098, 1151, 1217, 1229], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 72, 88, 106, 107, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 144, 146, 148, 154, 185, 186, 188, 189, 206, 207, 234, 237, 259, 260, 298, 695, 696, 698, 699, 713, 738, 739, 763, 776, 789, 790, 792, 793, 798, 816, 860, 863, 896, 928, 1033, 1141, 1195, 1205, 1229], "snappi": [36, 45, 60, 298, 860], "deflat": [36, 298], "pathlib": [36, 37, 41, 42, 45, 130, 298], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 191, 192, 193, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 243, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 270, 271, 272, 276, 298, 341, 363, 394, 437, 442, 445, 467, 519, 522, 523, 524, 525, 526, 527, 555, 563, 597, 601, 603, 605, 607, 608, 624, 628, 630, 633, 634, 635, 636, 637, 643, 646, 654, 674, 683, 685, 703, 707, 708, 712, 717, 719, 720, 721, 723, 725, 730, 732, 736, 740, 741, 747, 751, 769, 774, 777, 778, 779, 785, 795, 796, 797, 810, 814, 817, 818, 832, 833, 836, 839, 860, 863, 897, 922, 958, 1050, 1096, 1103, 1146, 1148, 1150, 1152, 1153, 1169, 1175, 1181, 1182, 1188, 1191, 1229], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 68, 158, 161, 162, 165, 166, 167, 168, 169, 172, 175, 178, 181, 182, 183, 192, 194, 196, 197, 199, 205, 209, 210, 211, 212, 213, 214, 217, 218, 221, 224, 227, 229, 230, 232, 235, 238, 239, 240, 247, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 265, 266, 270, 271, 276, 298, 341, 445, 519, 520, 521, 522, 523, 524, 525, 526, 527, 591, 601, 603, 605, 607, 608, 624, 628, 630, 636, 637, 674, 683, 685, 703, 708, 712, 717, 719, 720, 721, 723, 730, 732, 736, 740, 741, 747, 751, 769, 774, 777, 778, 779, 785, 795, 796, 797, 810, 814, 817, 818, 832, 833, 836, 860, 863, 897, 1050, 1136, 1146, 1148, 1150, 1152, 1153, 1169, 1175, 1181, 1182, 1229], "ham": [36, 37, 39, 41, 42, 45, 158, 161, 162, 165, 166, 167, 168, 169, 175, 182, 191, 192, 194, 205, 210, 212, 214, 217, 221, 227, 229, 232, 235, 238, 239, 240, 247, 249, 250, 252, 257, 258, 259, 260, 261, 265, 270, 271, 298, 341, 526, 769, 774, 777, 778, 779, 785, 797, 810, 814, 817, 818, 832, 839, 860, 897], "dirpath": [36, 37, 41, 42, 45, 130, 298], "new_fil": [36, 37, 41, 42, 45, 298], "textiowrapp": [37, 298], "include_bom": [37, 58, 298, 860], "include_head": [37, 40, 58, 117, 264, 298, 860], "line_termin": [37, 58, 298, 860], "quote_char": [37, 58, 116, 117, 130, 298, 860], "batch_siz": [37, 58, 116, 117, 118, 134, 136, 298, 860], "1024": [37, 45, 58, 60, 116, 117, 118, 134, 298, 860], "datetime_format": [37, 58, 298, 860], "date_format": [37, 58, 298, 860], "time_format": [37, 58, 298, 860], "null_valu": [37, 58, 116, 117, 130, 298, 860], "quote_styl": [37, 58, 298, 860], "csvquotestyl": [37, 58, 298, 860], "comma": [37, 298], "csv": [37, 58, 59, 60, 116, 117, 121, 130, 298, 763, 860], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 60, 64, 71, 85, 87, 88, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 147, 154, 155, 157, 167, 172, 184, 186, 187, 189, 190, 192, 201, 202, 203, 206, 208, 209, 213, 220, 224, 234, 236, 237, 238, 244, 247, 251, 252, 256, 257, 259, 263, 264, 265, 267, 268, 298, 309, 311, 313, 371, 390, 391, 429, 443, 463, 492, 497, 498, 504, 513, 515, 526, 547, 555, 558, 560, 562, 563, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 584, 587, 591, 592, 597, 607, 608, 609, 610, 616, 626, 627, 628, 629, 630, 632, 633, 634, 635, 638, 639, 640, 644, 647, 665, 669, 671, 673, 675, 679, 683, 684, 686, 695, 696, 698, 699, 700, 703, 704, 710, 711, 712, 713, 716, 724, 727, 728, 729, 733, 738, 739, 741, 742, 751, 767, 772, 773, 778, 780, 789, 790, 792, 793, 797, 798, 803, 807, 814, 816, 820, 822, 825, 831, 832, 834, 843, 848, 860, 863, 867, 868, 870, 906, 922, 931, 954, 955, 990, 1000, 1002, 1003, 1029, 1030, 1032, 1058, 1063, 1064, 1070, 1077, 1096, 1098, 1100, 1102, 1103, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1122, 1126, 1128, 1132, 1136, 1137, 1142, 1152, 1153, 1154, 1155, 1161, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1189, 1192, 1200, 1205, 1210, 1217, 1219, 1229, 1237], "instead": [37, 43, 44, 64, 68, 80, 87, 88, 116, 117, 118, 121, 127, 128, 130, 136, 146, 184, 186, 202, 203, 209, 220, 222, 225, 235, 236, 237, 240, 241, 244, 245, 260, 273, 274, 298, 301, 323, 346, 347, 363, 376, 380, 384, 386, 388, 393, 397, 400, 412, 423, 497, 513, 555, 584, 585, 612, 613, 616, 626, 632, 633, 634, 635, 636, 637, 638, 640, 647, 675, 679, 695, 696, 697, 698, 699, 700, 703, 710, 711, 712, 724, 727, 733, 738, 739, 742, 751, 773, 783, 789, 818, 819, 820, 822, 823, 834, 837, 838, 860, 863, 879, 907, 908, 922, 936, 940, 947, 949, 952, 957, 961, 964, 976, 1008, 1014, 1017, 1024, 1026, 1028, 1063, 1096, 1121, 1124, 1128, 1129, 1157, 1158, 1161, 1171, 1177, 1178, 1179, 1180, 1183, 1185, 1192, 1211, 1229, 1233, 1237], "whether": [37, 58, 109, 111, 148, 151, 157, 169, 179, 202, 242, 263, 298, 309, 311, 326, 327, 381, 399, 468, 469, 583, 751, 767, 802, 803, 821, 826, 831, 860, 863, 867, 868, 882, 883, 898, 901, 941, 963, 983, 1034, 1035, 1123, 1229, 1237], "utf": [37, 58, 70, 298, 860], "bom": [37, 58, 298, 860], "header": [37, 40, 45, 58, 60, 112, 116, 117, 121, 130, 168, 224, 264, 298, 860], "field": [37, 39, 58, 72, 101, 103, 108, 259, 266, 298, 504, 565, 607, 608, 609, 629, 630, 650, 686, 687, 690, 691, 715, 733, 751, 833, 860, 922, 1070, 1096, 1105, 1153, 1172, 1174, 1175, 1196, 1198, 1229], "symbol": [37, 58, 116, 117, 130, 298, 751, 860], "end": [37, 40, 58, 116, 117, 128, 130, 186, 298, 334, 337, 338, 369, 398, 423, 447, 498, 598, 604, 607, 618, 627, 631, 634, 637, 675, 695, 696, 698, 699, 702, 710, 711, 738, 739, 741, 751, 789, 794, 801, 812, 860, 863, 892, 929, 962, 1007, 1064, 1149, 1152, 1163, 1172, 1176, 1229], "byte": [37, 45, 58, 60, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 170, 298, 612, 614, 860, 984, 1157, 1159, 1229], "quot": [37, 38, 58, 116, 117, 130, 298, 860], "specifi": [37, 40, 58, 80, 92, 101, 103, 121, 127, 146, 157, 158, 165, 170, 171, 174, 185, 186, 187, 188, 189, 190, 205, 222, 234, 235, 237, 240, 241, 242, 244, 248, 263, 266, 273, 274, 277, 298, 345, 420, 421, 422, 423, 428, 547, 561, 562, 570, 571, 572, 573, 574, 576, 577, 578, 584, 594, 678, 680, 681, 682, 695, 696, 698, 699, 702, 730, 733, 738, 739, 751, 767, 769, 777, 781, 784, 788, 789, 790, 791, 792, 793, 797, 816, 818, 819, 821, 822, 826, 831, 833, 837, 838, 841, 860, 906, 984, 985, 986, 987, 993, 1102, 1128, 1229], "defin": [37, 40, 48, 58, 118, 143, 144, 146, 155, 158, 167, 171, 186, 187, 189, 190, 209, 220, 223, 234, 268, 279, 284, 298, 313, 447, 481, 502, 515, 551, 555, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 673, 695, 696, 698, 699, 713, 716, 733, 738, 739, 751, 769, 778, 781, 789, 790, 792, 793, 811, 816, 834, 843, 848, 860, 863, 870, 1007, 1047, 1077, 1096, 1106, 1229], "chrono": [37, 58, 298, 401, 404, 638, 639, 640, 644, 860, 965, 968, 1183, 1184, 1185, 1189], "rust": [37, 45, 58, 98, 118, 122, 124, 128, 209, 284, 298, 608, 860, 1077, 1153, 1229], "crate": [37, 58, 298, 598, 600, 601, 606, 607, 608, 621, 622, 638, 639, 640, 644, 860, 863, 1143, 1145, 1146, 1151, 1152, 1153, 1166, 1167, 1183, 1184, 1185, 1189], "fraction": [37, 58, 139, 140, 141, 142, 238, 298, 399, 492, 548, 581, 638, 640, 751, 860, 963, 1058, 1091, 1120, 1183, 1185, 1229], "second": [37, 58, 139, 140, 141, 142, 145, 186, 206, 234, 269, 298, 394, 398, 411, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 638, 640, 695, 696, 697, 698, 699, 700, 737, 738, 739, 741, 751, 789, 798, 816, 860, 863, 958, 962, 975, 976, 1183, 1185, 1238], "infer": [37, 58, 72, 105, 107, 108, 109, 110, 111, 116, 117, 118, 121, 125, 126, 128, 130, 134, 135, 155, 209, 298, 412, 563, 609, 610, 638, 639, 640, 641, 644, 727, 751, 860, 962, 976, 1103, 1154, 1155, 1183, 1184, 1185, 1186, 1189, 1229], "timeunit": [37, 48, 50, 58, 298, 370, 371, 403, 415, 640, 695, 696, 697, 698, 699, 700, 860, 863, 930, 931, 967, 979, 1185], "frame": [37, 38, 40, 58, 64, 65, 66, 67, 68, 69, 80, 87, 88, 108, 117, 121, 127, 139, 140, 146, 158, 159, 203, 204, 209, 216, 220, 223, 235, 236, 237, 260, 267, 268, 298, 769, 770, 808, 811, 834, 860, 863, 905, 1229, 1237, 1238], "repres": [37, 40, 58, 62, 78, 105, 107, 109, 110, 111, 118, 121, 249, 270, 276, 298, 456, 458, 513, 596, 666, 669, 683, 685, 700, 702, 713, 715, 716, 728, 729, 732, 740, 747, 751, 827, 835, 860, 1121, 1125, 1140, 1218, 1229], "necessari": [37, 58, 71, 90, 121, 259, 298, 860], "non_numer": [37, 58, 298, 860], "never": [37, 58, 118, 164, 205, 235, 298, 797, 860], "strategi": [37, 58, 80, 88, 116, 143, 144, 145, 146, 148, 174, 186, 189, 205, 206, 219, 268, 298, 313, 428, 504, 515, 751, 784, 789, 792, 797, 798, 834, 860, 993, 1070, 1229], "put": [37, 58, 298, 860], "around": [37, 58, 298, 860], "thei": [37, 40, 58, 71, 87, 88, 89, 90, 108, 130, 152, 207, 237, 298, 623, 634, 635, 751, 773, 860, 863], "record": [37, 42, 58, 124, 136, 206, 259, 298, 798, 860], "termin": [37, 58, 298, 860], "indistinguish": [37, 58, 298, 860], "even": [37, 58, 116, 298, 551, 555, 751, 860, 1096, 1229], "invalid": [37, 58, 116, 117, 130, 298, 609, 611, 642, 661, 751, 860, 1154, 1156, 1187], "g": [37, 58, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 133, 136, 154, 202, 259, 267, 298, 306, 313, 423, 515, 586, 702, 751, 776, 814, 860, 983, 1123, 1210, 1229, 1238], "pars": [37, 58, 64, 116, 117, 121, 126, 130, 133, 134, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 277, 298, 345, 447, 514, 547, 562, 594, 609, 610, 620, 641, 642, 670, 672, 678, 680, 681, 682, 689, 693, 706, 718, 722, 730, 731, 733, 735, 741, 751, 767, 788, 791, 818, 819, 822, 826, 831, 837, 838, 841, 860, 906, 1007, 1102, 1128, 1154, 1155, 1165, 1185, 1186, 1187, 1229], "valid": [37, 40, 48, 51, 58, 64, 118, 122, 124, 128, 148, 152, 170, 205, 298, 362, 598, 600, 601, 606, 607, 608, 611, 621, 622, 741, 751, 797, 860, 863, 921, 984, 1000, 1143, 1145, 1146, 1151, 1152, 1153, 1156, 1166, 1167, 1229], "integ": [37, 40, 54, 55, 56, 57, 58, 74, 75, 76, 77, 137, 144, 146, 147, 149, 167, 186, 234, 257, 298, 310, 344, 399, 432, 433, 546, 555, 560, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 620, 642, 668, 675, 706, 710, 711, 727, 751, 778, 789, 816, 860, 863, 903, 963, 996, 1017, 1096, 1100, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1125, 1165, 1187, 1229, 1237, 1238], "aren": [37, 58, 298, 860], "t": [37, 39, 58, 66, 67, 88, 116, 121, 127, 130, 186, 209, 223, 265, 267, 298, 313, 362, 369, 377, 397, 417, 420, 421, 422, 478, 515, 547, 551, 606, 635, 638, 640, 741, 751, 789, 811, 832, 860, 863, 921, 961, 982, 983, 985, 986, 987, 1044, 1077, 1123, 1151, 1179, 1180, 1183, 1185, 1210, 1219, 1229], "strictli": [37, 58, 71, 90, 298, 782, 860], "table_nam": [38, 40, 298], "connect": [38, 116, 118, 119, 122, 124, 128, 133, 135, 136, 298, 764], "if_table_exist": [38, 298], "dbwritemod": [38, 298], "fail": [38, 39, 106, 120, 122, 126, 128, 131, 135, 139, 140, 154, 265, 298, 324, 402, 504, 638, 639, 640, 644, 751, 832, 860, 1077, 1183, 1184, 1185, 1189, 1229], "dbwriteengin": [38, 298], "sqlalchemi": [38, 118, 138, 298], "databas": [38, 118, 119, 298, 763], "qualifi": [38, 298], "creat": [38, 40, 71, 90, 105, 109, 111, 118, 119, 131, 132, 144, 145, 146, 147, 148, 149, 159, 160, 186, 187, 190, 221, 224, 225, 234, 269, 273, 298, 371, 398, 412, 504, 559, 567, 570, 571, 573, 576, 577, 578, 627, 681, 694, 695, 696, 697, 698, 699, 700, 737, 738, 739, 747, 751, 770, 771, 780, 789, 790, 793, 816, 837, 860, 905, 909, 922, 931, 962, 976, 1088, 1096, 1099, 1172, 1210, 1229, 1237, 1238], "append": [38, 39, 146, 172, 205, 206, 298, 559, 741, 751, 797, 798, 860, 990, 1229], "your": [38, 40, 71, 80, 90, 116, 117, 118, 121, 136, 203, 209, 236, 237, 240, 256, 273, 277, 284, 298, 313, 515, 608, 638, 639, 640, 647, 716, 751, 794, 801, 803, 818, 837, 841, 848, 860, 1077, 1153, 1183, 1184, 1185, 1192, 1229, 1238], "special": [38, 116, 117, 130, 298, 569, 607, 751, 870, 1077, 1108, 1152, 1229], "uri": [38, 39, 118, 119, 120, 131, 132, 298], "postgresql": [38, 118, 119, 298, 547, 751], "user": [38, 118, 119, 155, 209, 223, 279, 284, 298, 313, 513, 515, 551, 583, 673, 716, 751, 811, 843, 848, 860, 870, 1077, 1126, 1229], "pass": [38, 39, 40, 45, 67, 80, 107, 118, 119, 121, 128, 130, 135, 136, 139, 141, 144, 146, 148, 157, 162, 165, 185, 186, 189, 192, 208, 222, 223, 225, 234, 240, 244, 248, 252, 263, 269, 273, 277, 298, 301, 313, 378, 394, 397, 426, 445, 497, 514, 515, 547, 551, 562, 567, 570, 571, 572, 573, 574, 576, 577, 578, 584, 594, 633, 634, 635, 669, 678, 684, 695, 706, 733, 741, 747, 751, 767, 777, 788, 789, 790, 792, 793, 795, 802, 803, 811, 816, 818, 822, 824, 826, 831, 837, 841, 848, 860, 870, 938, 961, 991, 1002, 1032, 1063, 1076, 1077, 1102, 1128, 1178, 1179, 1180, 1200, 1229, 1233], "server": [38, 118, 119, 298], "port": [38, 116, 118, 119, 122, 124, 133, 298], "sqlite": [38, 118, 298], "db": [38, 119, 298], "replac": [38, 39, 116, 117, 130, 173, 174, 231, 232, 264, 273, 274, 298, 371, 397, 513, 514, 622, 623, 751, 783, 837, 838, 860, 931, 961, 1076, 1121, 1124, 1125, 1167, 1168, 1229], "insert": [38, 116, 117, 122, 124, 128, 130, 133, 134, 135, 195, 196, 230, 264, 266, 298, 582, 597, 647, 751, 833, 860, 1122, 1142, 1192, 1229], "mode": [38, 39, 58, 59, 60, 64, 139, 141, 224, 298, 607, 724, 727, 742, 751, 772, 860, 1152, 1229, 1237], "new": [38, 39, 40, 121, 130, 152, 180, 194, 195, 196, 209, 220, 221, 229, 230, 253, 264, 266, 267, 268, 273, 274, 298, 308, 371, 425, 437, 446, 512, 535, 562, 621, 622, 629, 630, 648, 650, 656, 747, 751, 763, 787, 814, 830, 833, 834, 837, 838, 843, 848, 860, 866, 931, 989, 998, 1088, 1101, 1102, 1166, 1167, 1174, 1175, 1193, 1196, 1202, 1207, 1229, 1237], "alreadi": [38, 39, 298, 362, 478, 665, 751, 921, 1044, 1217, 1229], "adbc": [38, 118, 119, 298], "affect": [38, 139, 140, 141, 142, 298], "driver": [38, 118, 119, 298], "provid": [38, 40, 67, 116, 117, 119, 120, 128, 130, 131, 132, 135, 146, 148, 175, 201, 298, 335, 336, 423, 443, 504, 513, 515, 602, 603, 606, 609, 611, 634, 635, 636, 637, 706, 733, 751, 763, 785, 860, 890, 891, 1003, 1029, 1077, 1147, 1148, 1151, 1154, 1156, 1229, 1237, 1238], "otherwis": [38, 85, 118, 121, 145, 150, 209, 216, 237, 240, 284, 298, 335, 345, 363, 420, 421, 422, 504, 515, 523, 551, 555, 560, 571, 572, 573, 574, 576, 578, 598, 602, 669, 684, 716, 741, 751, 808, 818, 848, 860, 890, 906, 922, 985, 986, 987, 1070, 1077, 1096, 1100, 1121, 1124, 1143, 1147, 1229], "deltalak": [39, 120, 131, 138, 298], "deltat": [39, 298], "ignor": [39, 145, 146, 148, 212, 213, 250, 251, 268, 298, 309, 311, 365, 397, 420, 421, 422, 476, 540, 541, 597, 669, 671, 751, 867, 868, 924, 961, 985, 986, 987, 1042, 1086, 1087, 1142, 1229], "merg": [39, 216, 298, 808, 860], "overwrite_schema": [39, 298], "storage_opt": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 298], "delta_write_opt": [39, 298], "delta_merge_opt": [39, 298], "tablemerg": [39, 298], "delta": [39, 50, 120, 131, 249, 270, 298, 576, 578, 596, 666, 683, 685, 728, 729, 732, 740, 751, 763, 827, 835, 860, 1115, 1117, 1140, 1218, 1229], "handl": [39, 88, 112, 116, 117, 130, 136, 298, 365, 476, 647, 751, 772, 860, 924, 1042, 1192, 1229], "throw": [39, 158, 298, 340, 609, 611, 751, 769, 860, 895, 1154, 1156, 1229], "add": [39, 40, 117, 172, 186, 189, 209, 273, 274, 275, 298, 363, 536, 537, 553, 555, 652, 700, 704, 741, 751, 789, 792, 797, 837, 838, 839, 840, 860, 990, 1229], "anyth": [39, 235, 298], "updat": [39, 164, 298, 860], "extra": [39, 45, 60, 116, 117, 120, 121, 122, 124, 130, 131, 132, 133, 172, 186, 298, 751, 789, 860, 990, 1229], "storag": [39, 116, 120, 122, 124, 128, 131, 132, 133, 135, 298], "backend": [39, 118, 119, 120, 131, 132, 298], "cloud": [39, 118, 120, 128, 131, 132, 135, 136, 298], "configur": [39, 120, 131, 132, 152, 298], "authent": [39, 120, 131, 132, 298], "see": [39, 40, 41, 42, 48, 118, 119, 120, 121, 128, 131, 132, 135, 139, 140, 141, 142, 146, 148, 162, 186, 205, 223, 224, 225, 298, 301, 345, 428, 463, 513, 591, 598, 606, 607, 621, 695, 696, 698, 699, 726, 738, 739, 747, 751, 772, 789, 860, 863, 900, 906, 1030, 1136, 1143, 1151, 1152, 1166, 1229, 1233, 1238], "here": [39, 40, 45, 105, 107, 108, 109, 111, 118, 119, 120, 125, 126, 128, 131, 132, 134, 135, 144, 146, 148, 298, 515, 608, 611, 751, 860, 1156], "gc": [39, 120, 131, 132, 298], "azur": [39, 120, 128, 131, 132, 135, 298], "keyword": [39, 67, 120, 128, 131, 162, 223, 235, 240, 241, 273, 274, 277, 298, 429, 551, 730, 733, 741, 751, 811, 818, 819, 837, 838, 841, 860, 1229], "argument": [39, 45, 90, 116, 120, 128, 130, 131, 162, 165, 171, 185, 186, 187, 188, 189, 190, 210, 212, 217, 222, 223, 224, 234, 240, 241, 242, 248, 250, 260, 266, 269, 273, 274, 277, 298, 398, 412, 423, 429, 447, 547, 551, 567, 570, 571, 572, 573, 574, 576, 577, 578, 594, 633, 634, 635, 669, 676, 677, 678, 680, 681, 682, 684, 702, 730, 733, 741, 751, 777, 781, 788, 789, 790, 791, 792, 793, 811, 816, 818, 819, 821, 826, 833, 837, 838, 841, 860, 962, 976, 1007, 1178, 1179, 1180, 1211, 1229], "while": [39, 87, 117, 120, 121, 131, 146, 148, 152, 203, 215, 264, 268, 298, 613, 773, 807, 834, 860, 1000, 1158, 1229], "lake": [39, 120, 131, 298, 763], "typeerror": [39, 298], "unsupport": [39, 298], "arrowinvaliderror": [39, 298], "could": [39, 78, 93, 158, 298, 340, 686, 690, 700, 704, 751, 769, 778, 860, 895, 1000, 1229], "primit": [39, 298, 452, 751, 1210, 1229], "tablenotfounderror": [39, 298], "doesn": [39, 116, 130, 186, 298, 417, 751, 789, 860, 982, 1219, 1229], "action": [39, 298], "trigger": [39, 260, 298, 751, 1211, 1229], "categor": [39, 51, 71, 89, 90, 106, 139, 140, 141, 142, 205, 257, 298, 341, 342, 363, 555, 562, 659, 751, 863, 896, 897, 898, 899, 900, 901, 922, 1096, 1102, 1212, 1229], "protocol": [39, 106, 119, 154, 298], "nullabl": [39, 298], "To": [39, 87, 173, 210, 212, 217, 250, 298, 345, 367, 368, 428, 598, 606, 607, 621, 634, 635, 636, 637, 645, 751, 783, 860, 906, 926, 927, 1000, 1143, 1151, 1152, 1166, 1190, 1210, 1229], "pyarrow": [39, 45, 105, 106, 110, 116, 119, 120, 122, 124, 128, 131, 136, 138, 254, 259, 260, 298, 764, 1205, 1209, 1210, 1211, 1229], "ha": [39, 40, 80, 87, 118, 121, 130, 154, 155, 176, 179, 186, 187, 188, 189, 190, 195, 231, 234, 253, 269, 279, 298, 313, 339, 357, 358, 359, 360, 361, 362, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 524, 553, 567, 568, 570, 571, 572, 573, 574, 576, 577, 578, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 652, 655, 656, 660, 673, 692, 693, 703, 712, 714, 747, 751, 773, 789, 790, 791, 792, 793, 802, 816, 830, 843, 848, 860, 870, 894, 905, 917, 918, 919, 920, 921, 923, 1000, 1012, 1014, 1018, 1040, 1053, 1068, 1076, 1107, 1123, 1125, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1201, 1202, 1213, 1229], "last": [39, 139, 140, 141, 142, 157, 192, 206, 208, 224, 237, 248, 252, 263, 265, 292, 298, 323, 362, 375, 390, 395, 413, 454, 455, 462, 482, 501, 504, 534, 536, 537, 538, 539, 553, 593, 630, 652, 654, 702, 736, 751, 767, 798, 826, 829, 831, 832, 856, 860, 863, 879, 921, 935, 954, 959, 977, 1002, 1018, 1019, 1032, 1048, 1067, 1175, 1200, 1229], "filesystem": [39, 120, 131, 132, 298], "table_path": [39, 120, 131, 132, 298], "match": [39, 40, 48, 88, 99, 105, 107, 108, 109, 111, 125, 126, 134, 139, 140, 141, 142, 174, 205, 206, 235, 268, 298, 521, 562, 575, 598, 599, 600, 601, 604, 606, 607, 609, 611, 621, 622, 623, 631, 638, 639, 640, 702, 741, 751, 784, 797, 798, 834, 860, 863, 1017, 1026, 1102, 1114, 1143, 1144, 1145, 1146, 1149, 1151, 1152, 1154, 1156, 1166, 1167, 1168, 1176, 1183, 1184, 1185, 1229], "version": [39, 85, 90, 120, 121, 131, 138, 154, 155, 176, 179, 186, 187, 188, 189, 190, 191, 195, 210, 212, 217, 231, 245, 250, 253, 279, 298, 313, 346, 347, 357, 358, 359, 360, 361, 376, 380, 384, 386, 388, 390, 391, 393, 397, 400, 412, 441, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 553, 568, 585, 599, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 638, 640, 652, 655, 656, 673, 692, 693, 695, 697, 702, 714, 726, 751, 789, 790, 791, 792, 793, 802, 823, 830, 843, 860, 870, 907, 908, 917, 918, 919, 920, 922, 936, 940, 947, 949, 952, 954, 955, 957, 961, 962, 964, 976, 1001, 1008, 1012, 1014, 1017, 1018, 1024, 1026, 1028, 1040, 1053, 1068, 1076, 1096, 1107, 1123, 1125, 1129, 1144, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1183, 1185, 1201, 1202, 1219, 1229], "old": [39, 229, 298, 562, 751, 814, 860, 1102, 1229], "existing_table_path": [39, 298], "store": [39, 116, 128, 132, 172, 203, 236, 298, 341, 897, 990, 1229], "bucket": [39, 120, 131, 132, 135, 298, 398, 412, 443, 751, 962, 976, 1003, 1229], "prefix": [39, 152, 298, 308, 338, 512, 535, 537, 538, 539, 631, 635, 636, 647, 652, 751, 863, 893, 1176, 1181, 1192], "aws_region": [39, 131, 135, 298], "the_aws_region": [39, 298], "aws_access_key_id": [39, 120, 131, 135, 298], "the_aws_access_key_id": [39, 120, 131, 132, 298], "aws_secret_access_kei": [39, 120, 131, 135, 298], "the_aws_secret_access_kei": [39, 120, 131, 132, 298], "pa": [39, 105, 136, 298], "check": [39, 48, 116, 117, 130, 139, 140, 141, 142, 151, 169, 179, 186, 187, 189, 190, 199, 201, 205, 234, 298, 334, 337, 338, 447, 452, 473, 567, 598, 604, 631, 751, 789, 790, 792, 793, 797, 802, 803, 816, 860, 889, 892, 893, 983, 1008, 1010, 1014, 1015, 1017, 1024, 1025, 1026, 1028, 1029, 1039, 1123, 1143, 1149, 1176, 1229], "doc": [39, 41, 42, 119, 139, 141, 162, 298], "evolut": [39, 298], "yet": [39, 298], "packag": [39, 118, 121, 298], "therefor": [39, 106, 170, 298, 515, 741, 751, 984, 1229], "effect": [39, 40, 178, 186, 189, 259, 298, 377, 515, 695, 696, 751, 789, 792, 840, 860, 929, 937], "predic": [39, 58, 59, 60, 86, 87, 130, 133, 134, 135, 136, 175, 201, 235, 298, 429, 667, 704, 741, 751, 772, 773, 780, 782, 785, 802, 803, 812, 814, 824, 840, 860, 994, 1121, 1124, 1229], "source_alia": [39, 298], "target_alia": [39, 298], "when_matched_update_al": [39, 298], "when_not_matched_insert_al": [39, 298], "execut": [39, 65, 66, 68, 71, 88, 118, 207, 298, 478, 665, 751, 768, 802, 803, 812, 860, 1044, 1217, 1229, 1237], "workbook": [40, 121, 298], "worksheet": [40, 121, 127, 298], "posit": [40, 165, 171, 185, 188, 222, 240, 241, 242, 244, 248, 266, 273, 274, 277, 298, 420, 421, 422, 423, 497, 547, 555, 584, 594, 608, 620, 642, 676, 677, 678, 680, 681, 682, 702, 730, 733, 751, 777, 781, 788, 791, 818, 819, 821, 822, 826, 833, 837, 838, 841, 860, 985, 986, 987, 1063, 1096, 1128, 1153, 1165, 1187, 1229], "tupl": [40, 119, 121, 127, 155, 203, 209, 235, 236, 237, 243, 276, 298, 563, 751, 812, 824, 860, 863, 1103, 1229], "a1": [40, 81, 83, 298], "table_styl": [40, 298], "column_format": [40, 298], "columnformatdict": [40, 298], "dtype_format": [40, 298], "oneormoredatatyp": [40, 144, 298, 1026, 1229], "conditional_format": [40, 298], "conditionalformatdict": [40, 298], "header_format": [40, 298], "column_tot": [40, 298], "columntotalsdefinit": [40, 298], "column_width": [40, 298], "columnwidthsdefinit": [40, 298], "row_tot": [40, 298], "rowtotalsdefinit": [40, 298], "row_height": [40, 298], "sparklin": [40, 298], "sequenc": [40, 72, 80, 105, 107, 108, 109, 111, 116, 117, 118, 121, 125, 126, 127, 130, 134, 144, 145, 146, 157, 164, 171, 172, 205, 206, 215, 220, 222, 223, 224, 237, 248, 257, 263, 267, 268, 269, 298, 363, 452, 504, 511, 513, 551, 555, 562, 594, 636, 637, 650, 673, 678, 686, 687, 690, 691, 704, 706, 714, 715, 716, 726, 731, 751, 767, 781, 797, 798, 807, 811, 826, 831, 834, 860, 922, 923, 990, 1070, 1096, 1102, 1121, 1125, 1196, 1229], "formula": [40, 298, 417, 751, 982, 1229], "autofilt": [40, 298], "autofit": [40, 298], "hidden_column": [40, 298], "selectortyp": [40, 298, 702, 863], "hide_gridlin": [40, 298], "sheet_zoom": [40, 298], "freeze_pan": [40, 298], "excel": [40, 121, 298], "open": [40, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 298, 776, 860], "xlsxwriter": [40, 138, 298], "close": [40, 118, 186, 187, 189, 190, 234, 298, 363, 447, 508, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 591, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 816, 860, 922, 1007, 1096, 1136, 1229], "xlsx": [40, 121, 298], "work": [40, 49, 51, 106, 117, 136, 230, 241, 274, 298, 309, 311, 313, 332, 344, 345, 423, 432, 478, 505, 515, 547, 566, 612, 613, 662, 751, 819, 838, 860, 863, 867, 868, 888, 903, 906, 996, 1044, 1071, 1157, 1158, 1214, 1229], "directori": [40, 45, 128, 298], "sheet1": [40, 298], "medium": [40, 298], "kei": [40, 80, 85, 88, 128, 132, 135, 186, 203, 205, 206, 216, 222, 224, 229, 233, 236, 237, 268, 298, 429, 515, 562, 733, 751, 782, 789, 797, 798, 808, 814, 815, 834, 860, 1102, 1229], "follow": [40, 45, 85, 116, 117, 120, 130, 131, 132, 139, 186, 206, 209, 223, 234, 269, 298, 394, 398, 412, 551, 558, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 650, 661, 695, 696, 698, 699, 716, 738, 739, 741, 743, 744, 746, 751, 752, 753, 756, 758, 759, 760, 789, 798, 811, 816, 860, 958, 962, 976, 1098, 1121, 1124, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236, 1238], "first_column": [40, 298], "last_column": [40, 298], "banded_column": [40, 298], "banded_row": [40, 298], "sheet": [40, 121, 127, 298], "chart": [40, 298, 812, 860], "subsequ": [40, 69, 228, 260, 298, 504, 741, 780, 860], "colnam": [40, 130, 146, 168, 298, 741, 779, 860], "given": [40, 64, 65, 80, 105, 107, 108, 109, 111, 116, 117, 118, 119, 121, 125, 126, 127, 130, 134, 135, 141, 142, 143, 144, 146, 147, 148, 149, 155, 157, 170, 171, 173, 186, 187, 189, 190, 201, 209, 222, 223, 234, 235, 237, 244, 245, 248, 263, 268, 298, 345, 369, 372, 401, 403, 404, 417, 443, 447, 473, 497, 504, 506, 515, 547, 551, 558, 561, 563, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 584, 585, 607, 608, 618, 619, 638, 640, 647, 650, 673, 702, 714, 715, 716, 727, 728, 729, 751, 767, 781, 789, 790, 792, 793, 802, 803, 811, 816, 822, 823, 826, 831, 834, 843, 848, 860, 863, 870, 906, 929, 932, 965, 967, 968, 982, 984, 1003, 1007, 1029, 1039, 1063, 1070, 1072, 1075, 1077, 1088, 1098, 1103, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1128, 1129, 1152, 1153, 1163, 1164, 1183, 1185, 1192, 1216, 1220, 1229, 1237, 1238], "dd": [40, 298], "mm": [40, 298], "yyyi": [40, 298], "overridden": [40, 105, 107, 109, 111, 125, 126, 150, 298, 860], "basi": [40, 146, 298], "param": [40, 105, 107, 108, 109, 111, 116, 117, 125, 126, 130, 145, 146, 148, 235, 298, 860], "It": [40, 71, 90, 164, 216, 223, 284, 298, 523, 566, 747, 751, 802, 803, 808, 848, 860, 1121, 1124, 1229], "float_dtyp": [40, 298], "simplifi": [40, 58, 59, 60, 86, 87, 298, 772, 773, 780, 782, 812, 824, 860], "uniform": [40, 298, 555, 751, 1096, 1229], "condit": [40, 167, 175, 235, 298, 429, 604, 631, 679, 704, 741, 751, 778, 785, 860], "suppli": [40, 105, 107, 108, 109, 111, 118, 125, 126, 134, 175, 235, 298, 429, 551, 751, 785, 860], "typenam": [40, 298], "3_color_scal": [40, 298], "data_bar": [40, 298], "make": [40, 72, 88, 105, 110, 116, 117, 122, 124, 128, 133, 216, 220, 228, 269, 298, 421, 422, 443, 538, 539, 547, 561, 629, 751, 808, 860, 986, 987, 1003, 1174, 1229, 1238], "icon": [40, 298], "multipl": [40, 67, 86, 87, 88, 116, 117, 121, 127, 130, 133, 134, 135, 144, 148, 157, 165, 170, 172, 175, 185, 186, 194, 204, 222, 224, 237, 240, 242, 248, 263, 268, 273, 277, 298, 481, 502, 520, 524, 531, 532, 547, 562, 563, 566, 570, 571, 572, 573, 574, 576, 577, 578, 594, 678, 690, 691, 704, 714, 715, 717, 721, 726, 731, 734, 741, 747, 751, 767, 772, 773, 777, 785, 788, 789, 818, 821, 826, 831, 834, 837, 841, 848, 860, 869, 984, 990, 1047, 1068, 1082, 1102, 1103, 1229], "singl": [40, 65, 80, 87, 88, 116, 117, 118, 119, 121, 128, 130, 135, 144, 158, 165, 166, 167, 172, 181, 191, 201, 205, 209, 222, 235, 237, 248, 298, 313, 345, 394, 436, 439, 441, 474, 475, 481, 502, 513, 515, 559, 562, 563, 594, 597, 667, 673, 678, 681, 682, 711, 715, 716, 731, 739, 751, 769, 772, 777, 778, 797, 826, 860, 906, 958, 990, 1001, 1040, 1041, 1047, 1099, 1102, 1103, 1142, 1205, 1229], "across": [40, 80, 191, 211, 213, 218, 251, 298, 441, 670, 672, 686, 687, 689, 693, 718, 722, 735, 751, 1001, 1229], "heatmap": [40, 298], "min": [40, 45, 60, 164, 174, 218, 224, 234, 298, 347, 354, 359, 428, 547, 558, 567, 573, 722, 730, 751, 784, 816, 860, 908, 914, 918, 923, 993, 1098, 1112, 1229, 1238], "entir": [40, 298, 772, 860], "made": [40, 118, 298, 1210, 1229], "abov": [40, 139, 224, 298, 741], "than": [40, 58, 59, 60, 104, 109, 111, 116, 117, 118, 121, 127, 130, 136, 146, 148, 159, 185, 188, 203, 206, 209, 222, 235, 236, 238, 267, 284, 298, 438, 440, 465, 492, 510, 515, 526, 555, 566, 581, 591, 612, 618, 619, 630, 647, 683, 695, 716, 751, 772, 788, 791, 798, 848, 860, 1058, 1077, 1096, 1106, 1120, 1136, 1157, 1163, 1164, 1175, 1192, 1229, 1238], "bold": [40, 298], "font_color": [40, 298], "702963": [40, 298], "total": [40, 170, 280, 298, 376, 380, 384, 386, 388, 393, 400, 405, 406, 407, 408, 409, 410, 411, 466, 486, 684, 751, 844, 936, 940, 947, 949, 952, 957, 964, 969, 970, 971, 972, 973, 974, 975, 984, 1031, 1052, 1229], "export": [40, 203, 204, 236, 237, 256, 259, 298, 747], "associ": [40, 65, 67, 80, 119, 145, 237, 298], "sum": [40, 64, 170, 178, 185, 186, 201, 224, 234, 251, 277, 298, 355, 356, 361, 417, 429, 504, 515, 523, 525, 526, 527, 562, 567, 577, 667, 669, 686, 688, 689, 690, 692, 693, 704, 716, 726, 735, 751, 772, 773, 776, 780, 782, 788, 789, 810, 812, 816, 820, 824, 841, 860, 863, 915, 916, 920, 982, 984, 1116, 1229], "must": [40, 106, 107, 120, 131, 132, 136, 164, 171, 186, 187, 189, 190, 206, 216, 234, 235, 298, 363, 504, 513, 555, 562, 567, 570, 571, 572, 573, 574, 576, 577, 578, 741, 751, 781, 789, 790, 792, 793, 798, 802, 803, 808, 816, 860, 922, 923, 1096, 1102, 1229], "funcnam": [40, 298], "averag": [40, 298, 420, 421, 422, 558, 751, 985, 986, 987, 1098, 1229], "count_num": [40, 298], "count": [40, 64, 116, 117, 122, 124, 128, 130, 133, 134, 135, 136, 156, 164, 186, 206, 220, 221, 224, 234, 264, 268, 269, 275, 284, 289, 298, 314, 352, 357, 394, 443, 466, 474, 475, 486, 515, 523, 525, 533, 545, 567, 570, 571, 572, 573, 574, 576, 577, 578, 600, 601, 663, 665, 674, 723, 751, 766, 789, 798, 810, 816, 840, 848, 853, 860, 923, 958, 998, 1003, 1031, 1040, 1041, 1052, 1084, 1090, 1145, 1146, 1215, 1217, 1229], "std_dev": [40, 298], "var": [40, 149, 298, 578, 751, 860, 1229], "pixel": [40, 298], "unit": [40, 48, 50, 139, 140, 141, 142, 146, 148, 170, 298, 370, 371, 378, 403, 415, 509, 524, 638, 640, 664, 695, 696, 697, 698, 699, 700, 706, 751, 812, 860, 863, 930, 931, 938, 967, 979, 984, 1075, 1183, 1185, 1216, 1229, 1238], "hand": [40, 116, 117, 130, 298, 493, 494, 495, 496, 1059, 1060, 1061, 1062], "side": [40, 186, 187, 189, 190, 234, 298, 447, 493, 494, 495, 496, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 816, 860, 1007, 1059, 1060, 1061, 1062, 1122, 1229], "call": [40, 68, 71, 90, 117, 118, 139, 140, 141, 142, 146, 148, 152, 185, 186, 189, 207, 209, 234, 297, 298, 313, 353, 356, 462, 515, 534, 536, 537, 538, 539, 553, 587, 652, 747, 751, 764, 788, 789, 790, 792, 793, 816, 859, 860, 863, 870, 1077, 1132, 1229], "ad": [40, 108, 121, 186, 189, 264, 268, 273, 274, 298, 312, 426, 686, 687, 690, 691, 751, 789, 792, 834, 837, 838, 860, 922, 991, 1096, 1229], "wise": [40, 80, 118, 178, 298, 315, 316, 317, 318, 319, 320, 348, 349, 350, 424, 507, 588, 589, 590, 657, 658, 690, 691, 704, 726, 751, 871, 872, 873, 874, 875, 876, 910, 911, 912, 988, 1073, 1074, 1133, 1134, 1135, 1203, 1204, 1229], "particip": [40, 298], "distinct": [40, 148, 222, 298, 332, 450, 451, 454, 455, 505, 558, 700, 751, 888, 1012, 1013, 1018, 1019, 1071, 1098, 1229, 1238], "referenc": [40, 298, 650], "differ": [40, 116, 136, 139, 141, 172, 186, 191, 203, 234, 236, 237, 256, 264, 298, 365, 375, 394, 395, 397, 413, 419, 441, 476, 493, 495, 504, 515, 540, 541, 543, 562, 638, 663, 703, 706, 712, 751, 780, 789, 816, 860, 863, 900, 924, 935, 958, 959, 961, 977, 983, 990, 1001, 1042, 1059, 1061, 1077, 1086, 1087, 1102, 1123, 1183, 1229], "row_index": [40, 298], "height": [40, 167, 298], "intersect": [40, 298, 494, 863, 1060], "bodi": [40, 298], "start": [40, 115, 116, 117, 118, 119, 122, 124, 127, 128, 130, 133, 134, 135, 150, 180, 185, 186, 188, 189, 207, 247, 253, 269, 275, 298, 334, 337, 338, 375, 389, 395, 398, 412, 413, 423, 437, 447, 498, 570, 571, 573, 576, 577, 578, 592, 598, 604, 607, 619, 627, 631, 635, 636, 647, 656, 675, 686, 690, 695, 696, 698, 699, 704, 710, 711, 738, 739, 741, 751, 787, 788, 789, 791, 792, 812, 825, 830, 840, 860, 863, 893, 930, 932, 935, 938, 939, 946, 948, 951, 953, 956, 959, 962, 967, 976, 977, 998, 1007, 1064, 1137, 1149, 1152, 1164, 1172, 1176, 1192, 1202, 1229, 1238], "unless": [40, 80, 107, 260, 298, 633, 634, 727, 860, 1178, 1211, 1219, 1229], "marker": [40, 298], "compliant": [40, 298], "case": [40, 71, 80, 87, 105, 107, 108, 109, 111, 118, 125, 126, 134, 135, 150, 155, 172, 186, 187, 189, 190, 203, 209, 234, 236, 237, 256, 298, 369, 512, 513, 523, 524, 535, 567, 598, 599, 607, 621, 623, 751, 773, 789, 790, 792, 793, 816, 860, 863, 929, 990, 1143, 1144, 1152, 1166, 1168, 1229], "three": [40, 262, 298, 363, 555, 582, 751, 922, 1070, 1096, 1229], "avail": [40, 114, 118, 119, 120, 131, 132, 144, 152, 224, 297, 298, 558, 743, 744, 746, 750, 751, 752, 753, 756, 757, 758, 759, 760, 763, 764, 782, 859, 860, 863, 923, 1098, 1221, 1223, 1225, 1229, 1230, 1234, 1235, 1236], "insert_befor": [40, 298], "insert_aft": [40, 298], "respect": [40, 298, 599, 623, 863, 1144, 1168], "direct": [40, 119, 128, 132, 135, 139, 244, 267, 298, 497, 584, 751, 822, 860, 1063, 1128, 1229], "far": [40, 298], "strongli": [40, 150, 209, 235, 284, 298, 515, 751, 1077, 1229], "advis": [40, 71, 90, 207, 298], "structur": [40, 96, 100, 102, 172, 223, 237, 259, 298, 551, 751, 811, 860, 990, 1229], "wherev": [40, 209, 284, 298, 515, 751, 1077, 1229], "possibl": [40, 116, 157, 185, 188, 203, 209, 236, 263, 265, 284, 298, 509, 515, 523, 569, 630, 664, 751, 767, 788, 791, 826, 831, 832, 860, 1077, 1108, 1175, 1229], "simpl": [40, 148, 220, 298, 702], "colx": [40, 69, 298, 538, 539, 863, 1238], "coli": [40, 298, 538, 539, 863, 1238], "after": [40, 69, 88, 108, 115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 266, 297, 298, 423, 514, 547, 558, 647, 751, 833, 860, 990, 1076, 1098, 1192, 1229], "befor": [40, 116, 118, 121, 130, 136, 139, 140, 141, 142, 150, 152, 172, 186, 189, 206, 266, 298, 355, 356, 362, 514, 547, 548, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 647, 653, 728, 729, 751, 789, 792, 795, 798, 833, 860, 915, 916, 921, 990, 1076, 1091, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1192, 1199, 1229], "most": [40, 66, 105, 116, 117, 119, 130, 139, 140, 141, 142, 298, 524, 531, 548, 630, 751, 1082, 1091, 1175, 1229, 1237], "mandatori": [40, 298], "return_dtyp": [40, 155, 209, 298, 313, 511, 513, 514, 515, 562, 673, 714, 715, 716, 751, 870, 1076, 1077, 1102, 1229], "latter": [40, 172, 298, 990, 1229], "appropri": [40, 136, 259, 298, 558, 751, 1098, 1229], "pure": [40, 298, 1210, 1229], "actual": [40, 108, 146, 148, 237, 298, 1131, 1229], "indic": [40, 115, 116, 117, 118, 122, 124, 128, 130, 135, 143, 144, 148, 186, 187, 189, 190, 234, 237, 242, 244, 257, 298, 324, 436, 443, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 481, 497, 502, 519, 520, 521, 522, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 584, 588, 655, 678, 679, 751, 789, 790, 792, 793, 816, 821, 822, 860, 863, 997, 1003, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1047, 1063, 1068, 1121, 1122, 1125, 1128, 1133, 1201, 1206, 1229, 1238], "calcul": [40, 80, 186, 249, 270, 298, 365, 420, 421, 422, 463, 476, 493, 509, 575, 591, 596, 664, 666, 683, 685, 728, 729, 732, 740, 751, 789, 827, 835, 860, 924, 985, 986, 987, 1030, 1042, 1059, 1114, 1136, 1140, 1218, 1229], "individu": [40, 60, 146, 152, 234, 259, 298, 515, 607, 751, 772, 816, 860, 904, 1152, 1229], "gridlin": [40, 298], "zoom": [40, 298], "freez": [40, 298], "pane": [40, 298], "top": [40, 157, 263, 298, 767, 831, 860], "index": [40, 106, 110, 113, 138, 154, 176, 180, 182, 186, 187, 189, 190, 195, 196, 201, 203, 206, 224, 231, 232, 234, 235, 236, 244, 247, 253, 259, 261, 268, 269, 275, 298, 307, 321, 322, 323, 325, 394, 436, 437, 439, 470, 471, 481, 482, 497, 498, 502, 504, 567, 570, 571, 572, 573, 574, 576, 577, 578, 582, 584, 592, 606, 627, 655, 656, 751, 787, 789, 790, 792, 793, 798, 816, 822, 825, 830, 834, 840, 860, 877, 878, 879, 880, 881, 958, 997, 1029, 1036, 1037, 1047, 1048, 1063, 1064, 1068, 1070, 1088, 1121, 1122, 1125, 1128, 1137, 1151, 1172, 1201, 1202, 1229], "thu": [40, 172, 298, 683, 990, 1229], "altern": [40, 298, 747], "a2": [40, 81, 83, 298], "occur": [40, 86, 87, 298, 474, 475, 531, 558, 751, 772, 773, 780, 782, 812, 824, 860, 1040, 1041, 1082, 1098, 1229], "equival": [40, 105, 107, 108, 109, 111, 120, 125, 126, 134, 186, 201, 220, 298, 306, 310, 418, 419, 433, 438, 440, 465, 510, 530, 532, 542, 543, 546, 552, 613, 651, 661, 668, 751, 789, 860, 1029, 1158, 1188, 1190, 1191, 1229], "top_row": [40, 298], "top_col": [40, 298], "base": [40, 46, 167, 175, 186, 187, 189, 190, 234, 298, 369, 377, 417, 420, 421, 422, 429, 443, 506, 507, 555, 562, 567, 620, 642, 751, 778, 785, 789, 790, 792, 793, 816, 860, 863, 929, 937, 982, 985, 986, 987, 1003, 1072, 1073, 1096, 1102, 1165, 1187, 1220, 1229, 1238], "scroll": [40, 298], "region": [40, 132, 298], "initit": [40, 298], "5th": [40, 298], "properti": [40, 154, 161, 168, 177, 193, 225, 239, 243, 272, 298, 774, 779, 817, 836, 860, 863, 1238], "readthedoc": [40, 298], "io": [40, 123, 128, 129, 132, 298, 776, 820, 860], "html": [40, 41, 42, 106, 118, 154, 162, 298], "definit": [40, 144, 298, 463, 751, 1030, 1229], "take": [40, 121, 127, 146, 152, 178, 180, 186, 189, 213, 216, 223, 224, 253, 259, 298, 394, 429, 436, 437, 481, 594, 656, 695, 696, 701, 703, 712, 751, 787, 789, 792, 808, 830, 860, 958, 997, 998, 1047, 1202, 1220, 1229], "care": [40, 298, 313, 515, 583, 751, 1126, 1229], "rel": [40, 119, 120, 131, 132, 139, 140, 141, 142, 298, 394, 420, 421, 422, 572, 574, 576, 578, 751, 958, 985, 986, 987, 1229], "working_with_conditional_format": [40, 298], "similarli": [40, 108, 186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "well": [40, 116, 117, 118, 130, 224, 298, 447, 751, 1007, 1229], "adjac": [40, 298], "two": [40, 69, 71, 89, 90, 107, 109, 111, 119, 178, 215, 216, 224, 262, 278, 284, 298, 307, 366, 371, 436, 439, 504, 555, 593, 676, 677, 683, 685, 728, 729, 751, 807, 808, 842, 848, 860, 925, 931, 1070, 1096, 1229], "help": [40, 139, 140, 141, 142, 225, 298, 301, 782, 860, 1233], "where": [40, 64, 80, 118, 119, 145, 167, 172, 186, 203, 215, 236, 249, 268, 270, 298, 324, 414, 417, 419, 543, 561, 582, 591, 594, 596, 623, 666, 679, 683, 685, 728, 729, 732, 740, 741, 751, 778, 789, 807, 827, 834, 835, 860, 880, 978, 982, 990, 1122, 1136, 1140, 1168, 1218, 1220, 1229, 1237], "working_with_sparklin": [40, 298], "inject": [40, 80, 298], "locat": [40, 172, 231, 232, 261, 266, 298, 582, 751, 833, 860, 990, 997, 1121, 1122, 1125, 1201, 1229], "syntax": [40, 175, 209, 220, 298, 598, 606, 607, 621, 747, 785, 824, 860, 1143, 1151, 1152, 1166, 1229], "correctli": [40, 121, 298], "microsoft": [40, 298], "com": [40, 119, 298, 420, 421, 422, 606, 607, 608, 751, 985, 986, 987, 1151, 1152, 1153, 1229], "u": [40, 48, 50, 67, 135, 298, 370, 371, 378, 403, 415, 638, 640, 695, 696, 697, 698, 699, 700, 706, 863, 930, 931, 938, 967, 979, 1183, 1185], "offic": [40, 298], "f5ed2452": [40, 298], "2337": [40, 298], "4f71": [40, 298], "bed3": [40, 298], "c8ae6d2b276": [40, 298], "instanti": [40, 118, 240, 273, 298, 818, 837, 860], "basic": [40, 298, 1238], "random": [40, 41, 137, 144, 146, 148, 191, 238, 298, 441, 492, 558, 581, 587, 665, 751, 763, 1001, 1058, 1098, 1120, 1132, 1217, 1229], "dtm": [40, 298, 371, 863, 931], "500": [40, 268, 298, 782, 834, 860, 946, 948, 956, 1109, 1110, 1112, 1229], "val": [40, 233, 298, 515, 551, 659, 741, 751, 815, 860], "10_000": [40, 298], "20_000": [40, 298], "30_000": [40, 298], "increas": [40, 80, 116, 128, 135, 298, 362, 751, 921, 1229], "b4": [40, 298], "light": [40, 298], "twice": [40, 121, 298], "titl": [40, 64, 298], "explicit": [40, 118, 130, 144, 268, 298, 726, 834, 860], "integr": [40, 298, 1238], "multi_fram": [40, 298], "wb": [40, 298], "coordin": [40, 298], "advanc": [40, 121, 224, 298, 504, 1070, 1238], "min_color": [40, 298], "76933c": [40, 298], "mid_color": [40, 298], "c4d79b": [40, 298], "max_color": [40, 298], "ebf1d": [40, 298], "data_bar_2010": [40, 298], "bar_color": [40, 298], "9bbb59": [40, 298], "bar_negative_color_sam": [40, 298], "bar_negative_border_color_sam": [40, 298], "white": [40, 298], "w": [40, 66, 67, 186, 189, 237, 298, 601, 606, 608, 670, 672, 789, 792, 860, 863, 1146, 1151, 1153, 1179], "get_worksheet_by_nam": [40, 298], "fmt_titl": [40, 298], "add_format": [40, 298], "4f6228": [40, 298], "font_siz": [40, 298], "12": [40, 80, 112, 145, 146, 186, 202, 206, 234, 245, 269, 298, 308, 346, 347, 355, 369, 371, 375, 379, 387, 389, 390, 391, 394, 395, 396, 398, 412, 413, 414, 462, 512, 548, 553, 557, 567, 577, 585, 586, 601, 615, 625, 641, 652, 687, 694, 695, 696, 697, 698, 699, 715, 738, 739, 751, 789, 794, 798, 801, 816, 823, 824, 829, 860, 863, 907, 908, 929, 931, 953, 962, 976, 1077, 1118, 1129, 1146, 1160, 1170, 1186, 1229, 1238], "ital": [40, 298], "customis": [40, 298], "trend": [40, 298], "win_loss": [40, 298], "subtl": [40, 298], "tone": [40, 298], "hidden": [40, 298], "id": [40, 88, 132, 264, 284, 298, 566, 621, 622, 663, 751, 848, 1106, 1215, 1229, 1238], "q1": [40, 298], "55": [40, 82, 298], "20": [40, 146, 172, 194, 196, 216, 223, 226, 230, 232, 298, 321, 322, 323, 365, 398, 412, 441, 446, 551, 570, 571, 573, 702, 706, 713, 738, 751, 808, 811, 860, 863, 924, 962, 976, 988, 1229], "35": [40, 298, 365, 751, 924, 1229], "q2": [40, 298], "30": [40, 172, 186, 194, 223, 230, 232, 255, 273, 298, 321, 322, 323, 365, 371, 379, 387, 389, 390, 396, 397, 398, 405, 412, 413, 441, 586, 713, 738, 751, 789, 811, 837, 860, 863, 924, 931, 954, 961, 962, 969, 976, 1229, 1238], "60": [40, 172, 298, 399, 411, 577, 638, 751, 959, 963, 975, 1183], "q3": [40, 298], "40": [40, 138, 172, 223, 298, 398, 412, 441, 641, 751, 811, 860, 942, 976, 1186], "80": [40, 298], "q4": [40, 298], "75": [40, 164, 298, 310, 546, 555, 570, 571, 572, 573, 576, 577, 578, 716, 751, 923, 1003, 1096, 1229, 1238], "account": [40, 112, 119, 132, 298, 394, 420, 421, 422, 751, 958, 985, 986, 987, 1229], "flavour": [40, 118, 298], "integer_dtyp": [40, 240, 298, 818, 860, 863], "0_": [40, 298], "just": [40, 130, 215, 298, 807, 860], "unifi": [40, 298, 863], "2_color_scal": [40, 298], "95b3d7": [40, 298], "ffffff": [40, 298], "standardis": [40, 298], "z": [40, 66, 72, 88, 112, 144, 146, 170, 198, 200, 205, 215, 236, 237, 267, 298, 306, 308, 310, 441, 472, 512, 515, 535, 536, 537, 538, 539, 546, 553, 561, 562, 599, 607, 623, 638, 640, 652, 670, 672, 689, 718, 722, 727, 735, 751, 797, 807, 825, 860, 863, 993, 1102, 1144, 1152, 1168, 1183, 1185, 1229, 1237], "score": [40, 298], "conjunct": [40, 89, 121, 127, 298], "a123": [40, 298], "b345": [40, 298], "c567": [40, 298], "d789": [40, 298], "e101": [40, 298], "45": [40, 138, 234, 298, 371, 379, 387, 398, 412, 567, 577, 601, 607, 649, 676, 677, 713, 738, 751, 816, 860, 863, 931, 962, 976, 1146, 1152, 1238], "85": [40, 298, 1238], "font": [40, 298], "consola": [40, 298], "stdev": [40, 298], "ipccompress": [41, 42, 298], "arrow": [41, 42, 59, 105, 106, 118, 119, 122, 124, 133, 203, 236, 237, 254, 256, 298, 860, 1205, 1210, 1229], "ipc": [41, 42, 59, 122, 123, 124, 133, 136, 298, 763, 860], "binari": [41, 118, 121, 298, 334, 336, 337, 338, 863, 889, 892, 893], "feather": [41, 122, 133, 298, 763], "access": [41, 81, 82, 83, 84, 128, 132, 135, 154, 203, 235, 236, 298, 608, 839, 860, 1153, 1238], "python": [41, 42, 63, 106, 116, 117, 118, 138, 139, 141, 154, 203, 209, 236, 237, 256, 284, 298, 313, 371, 511, 513, 515, 608, 695, 696, 698, 699, 738, 739, 741, 751, 757, 848, 870, 931, 943, 944, 945, 950, 1077, 1153, 1209, 1229], "lz4": [41, 42, 45, 59, 60, 298, 860], "zstd": [41, 42, 45, 59, 60, 298, 860], "batch": [42, 114, 117, 118, 124, 134, 136, 298, 772, 802, 803, 860], "iobas": [43, 44, 125, 126, 298, 528, 776, 820, 860], "pretti": [43, 298], "row_ori": [43, 298], "serial": [43, 44, 298, 776, 860], "orient": [43, 81, 83, 109, 111, 298, 860], "slower": [43, 109, 111, 121, 185, 188, 209, 222, 269, 284, 298, 515, 716, 751, 788, 791, 848, 860, 1077, 1229], "common": [43, 80, 86, 87, 88, 268, 298, 512, 535, 751, 757, 772, 773, 780, 782, 812, 824, 834, 860], "write_ndjson": [43, 298], "bit_set": [43, 298, 820, 860], "newlin": [44, 126, 134, 298], "delimit": [44, 58, 126, 134, 224, 257, 298, 597, 860, 1142, 1206, 1229], "parquetcompress": [45, 298], "compression_level": [45, 60, 298, 860], "statist": [45, 60, 116, 117, 128, 135, 164, 298, 421, 422, 463, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 751, 860, 923, 986, 987, 1030, 1114, 1136, 1229], "row_group_s": [45, 60, 298, 860], "data_page_s": [45, 298], "use_pyarrow": [45, 116, 122, 124, 128, 259, 298, 1209, 1210, 1229], "pyarrow_opt": [45, 120, 128, 131, 298], "parquet": [45, 60, 128, 129, 135, 298, 763, 860], "gzip": [45, 60, 298, 860], "lzo": [45, 60, 298, 860], "brotli": [45, 60, 298, 860], "choos": [45, 59, 60, 186, 224, 298, 789, 860], "good": [45, 59, 60, 203, 298, 860], "perform": [45, 59, 60, 80, 96, 106, 116, 117, 118, 122, 128, 130, 133, 134, 135, 154, 157, 185, 186, 187, 188, 189, 190, 206, 209, 210, 212, 217, 228, 234, 237, 250, 263, 284, 298, 313, 504, 515, 547, 567, 599, 612, 613, 623, 638, 639, 640, 751, 767, 789, 790, 792, 793, 798, 816, 826, 831, 840, 860, 1077, 1144, 1157, 1158, 1168, 1183, 1184, 1185, 1229], "fast": [45, 59, 60, 147, 149, 298, 426, 583, 751, 860, 991, 1126, 1229, 1238], "decompress": [45, 59, 60, 298, 860], "backward": [45, 60, 174, 206, 298, 333, 391, 428, 751, 784, 798, 860, 955, 993, 1229], "guarante": [45, 60, 106, 116, 117, 164, 191, 265, 298, 441, 751, 782, 832, 860, 1000, 1001, 1229], "deal": [45, 60, 203, 298, 309, 311, 397, 398, 412, 558, 638, 640, 669, 671, 697, 751, 860, 867, 868, 961, 962, 976, 1098, 1183, 1185, 1229], "older": [45, 60, 298, 860], "reader": [45, 60, 114, 116, 117, 122, 124, 128, 298, 764, 860], "higher": [45, 60, 227, 290, 298, 556, 574, 725, 751, 813, 854, 860, 1097, 1113, 1229], "mean": [45, 60, 116, 117, 122, 128, 130, 164, 174, 185, 186, 206, 213, 224, 234, 269, 277, 298, 394, 398, 412, 425, 428, 567, 570, 571, 572, 573, 574, 576, 577, 578, 591, 606, 695, 696, 698, 699, 700, 738, 739, 741, 751, 784, 788, 789, 798, 802, 803, 816, 841, 860, 923, 958, 962, 976, 989, 993, 1000, 1110, 1136, 1151, 1229], "smaller": [45, 60, 170, 298, 782, 860, 984, 1229], "disk": [45, 58, 59, 60, 122, 298, 824, 860], "22": [45, 60, 145, 298, 375, 395, 398, 412, 414, 415, 569, 570, 571, 573, 576, 577, 578, 638, 751, 860, 863, 962, 976, 979, 1108, 1183, 1229, 1238], "comput": [45, 60, 86, 88, 93, 170, 185, 206, 260, 265, 277, 290, 298, 305, 315, 316, 317, 318, 319, 320, 328, 329, 330, 343, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 366, 417, 424, 463, 488, 489, 490, 493, 494, 495, 496, 506, 507, 508, 531, 547, 548, 554, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 588, 589, 590, 591, 595, 657, 658, 665, 670, 672, 676, 677, 678, 683, 685, 701, 728, 729, 741, 751, 772, 788, 795, 797, 798, 832, 839, 841, 854, 860, 865, 871, 872, 873, 874, 875, 876, 884, 885, 886, 902, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925, 982, 984, 988, 1030, 1054, 1055, 1056, 1059, 1060, 1061, 1062, 1072, 1073, 1074, 1082, 1091, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1133, 1134, 1135, 1136, 1139, 1203, 1204, 1211, 1217, 1229], "512": [45, 118, 203, 298, 552, 751, 1091, 1229], "page": [45, 60, 122, 128, 133, 135, 298, 751, 763, 860, 1229], "implement": [45, 106, 118, 154, 191, 209, 225, 284, 298, 301, 441, 462, 515, 534, 536, 537, 538, 539, 553, 652, 716, 751, 848, 1001, 1077, 1121, 1124, 1229, 1233], "At": [45, 298], "moment": [45, 162, 298, 463, 591, 751, 1030, 1136, 1229], "write_t": [45, 298], "partition_col": [45, 119, 298], "write_to_dataset": [45, 298], "similar": [45, 150, 178, 206, 244, 298, 401, 404, 497, 547, 566, 584, 684, 741, 751, 782, 798, 822, 860, 965, 968, 1063, 1106, 1128, 1229], "spark": [45, 298], "partit": [45, 119, 120, 128, 131, 135, 136, 204, 222, 298], "we": [45, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 129, 130, 164, 186, 206, 234, 269, 298, 394, 398, 412, 443, 478, 504, 513, 515, 567, 570, 571, 572, 573, 574, 576, 577, 578, 608, 620, 642, 695, 696, 698, 699, 713, 738, 739, 741, 751, 776, 789, 798, 802, 803, 816, 860, 870, 958, 962, 976, 1003, 1044, 1077, 1153, 1165, 1187, 1229], "use_pyarrow_write_to_dataset": [45, 298], "first": [45, 80, 116, 117, 121, 125, 130, 134, 139, 140, 141, 142, 145, 155, 184, 186, 189, 192, 206, 208, 209, 219, 223, 224, 252, 257, 258, 264, 265, 269, 282, 298, 323, 325, 362, 365, 391, 394, 398, 442, 450, 451, 467, 476, 478, 482, 483, 504, 514, 524, 551, 582, 594, 606, 609, 611, 621, 622, 680, 686, 702, 704, 708, 741, 751, 772, 789, 792, 794, 798, 801, 811, 832, 839, 846, 860, 863, 879, 921, 923, 924, 955, 958, 962, 1002, 1012, 1013, 1032, 1042, 1044, 1048, 1049, 1070, 1076, 1122, 1151, 1153, 1154, 1156, 1166, 1167, 1200, 1208, 1229, 1238], "watermark": [45, 298], "partitioned_object": [45, 298], "calendar": [47, 48, 186, 206, 234, 269, 298, 382, 394, 398, 412, 416, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 942, 958, 962, 976, 980], "time_unit": [48, 50, 370, 371, 378, 403, 415, 640, 695, 696, 697, 698, 699, 700, 706, 863, 930, 931, 938, 967, 979, 1185], "time_zon": [48, 372, 397, 640, 695, 696, 697, 698, 699, 863, 929, 932, 937, 961, 1185], "timezon": [48, 863], "m": [48, 50, 67, 205, 298, 369, 370, 371, 377, 378, 401, 403, 404, 415, 606, 638, 639, 640, 644, 695, 696, 697, 698, 699, 700, 706, 797, 860, 863, 929, 930, 931, 937, 938, 965, 967, 968, 979, 1151, 1183, 1184, 1185, 1189], "zone": [48, 369, 372, 397, 640, 695, 696, 697, 698, 699, 863, 929, 932, 961, 1185], "zoneinfo": [48, 863], "run": [48, 58, 59, 60, 86, 87, 147, 149, 185, 188, 207, 209, 224, 241, 265, 274, 284, 298, 313, 362, 478, 513, 515, 565, 566, 613, 730, 751, 772, 773, 780, 782, 788, 791, 802, 803, 807, 812, 819, 824, 832, 838, 860, 863, 921, 1044, 1077, 1105, 1106, 1158, 1229, 1237, 1238], "available_timezon": [48, 863], "128": [49, 82, 1091, 1229], "bit": [49, 52, 53, 54, 55, 56, 57, 74, 75, 76, 77, 560, 598, 751, 1100, 1143, 1229], "experiment": [49, 51, 87, 136, 267, 268, 298, 362, 398, 443, 515, 570, 571, 572, 573, 574, 576, 577, 578, 751, 773, 834, 860, 901, 921, 962, 1003, 1096, 1229], "progress": [49, 51], "expect": [49, 51, 97, 99, 104, 116, 118, 130, 504, 515, 713, 751, 800, 802, 803, 860], "categori": [51, 71, 90, 257, 298, 341, 342, 363, 443, 555, 751, 897, 899, 922, 1003, 1096, 1229], "iter": [51, 86, 87, 88, 105, 118, 147, 149, 157, 175, 185, 186, 187, 188, 189, 190, 202, 203, 204, 234, 235, 236, 237, 240, 241, 242, 248, 263, 264, 273, 274, 276, 277, 298, 362, 429, 547, 594, 670, 672, 678, 680, 681, 682, 689, 693, 718, 722, 730, 733, 735, 741, 747, 751, 767, 785, 788, 789, 790, 791, 792, 793, 816, 818, 819, 821, 826, 831, 837, 838, 841, 860, 921, 1229, 1238], "32": [52, 55, 75, 82, 201, 234, 298, 532, 567, 586, 751, 816, 860, 925, 959, 1091, 1113, 1229], "sign": [54, 55, 56, 57, 394, 560, 647, 751, 863, 958, 1017, 1100, 1192, 1229], "maintain_ord": [58, 59, 60, 157, 185, 188, 222, 224, 263, 265, 269, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 307, 332, 436, 439, 505, 515, 662, 751, 767, 773, 780, 782, 788, 791, 812, 824, 826, 831, 832, 842, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 888, 1071, 1214, 1229], "type_coercion": [58, 59, 60, 86, 87, 772, 773, 780, 782, 812, 824, 860], "predicate_pushdown": [58, 59, 60, 86, 87, 772, 773, 780, 782, 802, 803, 812, 824, 860], "projection_pushdown": [58, 59, 60, 86, 87, 772, 773, 780, 782, 802, 803, 812, 824, 860], "simplify_express": [58, 59, 60, 86, 87, 772, 773, 780, 782, 812, 824, 860], "slice_pushdown": [58, 59, 60, 86, 87, 772, 773, 780, 782, 802, 803, 812, 824, 860], "no_optim": [58, 59, 60, 86, 87, 772, 773, 782, 802, 803, 812, 860], "evalu": [58, 59, 60, 173, 175, 206, 298, 310, 324, 326, 327, 362, 429, 445, 468, 469, 504, 546, 669, 671, 675, 679, 695, 696, 698, 699, 701, 710, 711, 724, 727, 733, 738, 739, 741, 742, 751, 772, 785, 795, 797, 798, 860, 880, 882, 883, 921, 1034, 1035, 1220, 1229], "queri": [58, 59, 60, 64, 66, 86, 87, 118, 119, 122, 130, 133, 134, 135, 172, 207, 223, 298, 513, 515, 611, 751, 772, 773, 780, 782, 794, 801, 812, 824, 840, 843, 848, 860, 990, 1077, 1156, 1229, 1237], "ram": [58, 59, 60, 860], "maintain": [58, 59, 60, 157, 263, 298, 332, 505, 582, 662, 751, 767, 826, 831, 860, 888, 1071, 1122, 1214, 1229], "slightli": [58, 59, 60, 121, 860], "faster": [58, 59, 60, 118, 172, 259, 267, 298, 313, 515, 663, 751, 860, 870, 990, 1077, 1229], "coercion": [58, 59, 60, 86, 87, 561, 751, 772, 773, 780, 782, 812, 824, 860], "optim": [58, 59, 60, 86, 87, 128, 130, 133, 134, 135, 203, 207, 223, 228, 236, 265, 298, 772, 773, 780, 782, 802, 803, 812, 824, 832, 840, 848, 860, 902, 1121, 1229], "pushdown": [58, 59, 60, 86, 87, 772, 773, 780, 782, 802, 803, 812, 814, 824, 840, 860, 1121, 1124, 1229], "project": [58, 59, 60, 86, 87, 130, 132, 133, 134, 135, 313, 593, 594, 751, 772, 773, 780, 782, 802, 803, 812, 814, 820, 824, 860], "slice": [58, 59, 60, 81, 86, 87, 170, 192, 204, 252, 298, 483, 501, 515, 523, 525, 568, 570, 571, 572, 573, 574, 576, 577, 578, 751, 772, 773, 780, 782, 802, 803, 812, 824, 860, 984, 1002, 1049, 1067, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1200, 1229], "off": [58, 59, 60, 86, 87, 116, 117, 130, 772, 773, 780, 782, 802, 803, 812, 860], "certain": [58, 59, 60, 87, 95, 120, 131, 195, 196, 269, 298, 634, 635, 772, 773, 812, 860, 1229], "lf": [58, 59, 60, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 796, 797, 799, 800, 801, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 822, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 839, 840, 844, 860, 1237, 1238], "scan_csv": [58, 59, 60, 116, 117, 860], "my_larger_than_ram_fil": [58, 59, 60, 860], "data_pagesize_limit": [60, 860], "reduc": [60, 116, 117, 128, 130, 133, 134, 135, 285, 286, 288, 291, 586, 687, 704, 751, 849, 850, 852, 855, 860, 1079, 1095, 1130, 1199, 1229], "pressur": [60, 116, 117, 128, 130, 134, 135, 586, 751, 860, 1130, 1229], "improv": [60, 122, 133, 860], "speed": [60, 313, 515, 751, 860, 1238], "integer_list": 61, "float_list": 61, "wrap": [63, 112, 447, 751], "arbitrari": [63, 146, 863], "eager": [64, 65, 66, 67, 68, 69, 186, 224, 267, 298, 370, 372, 375, 378, 383, 390, 391, 394, 395, 397, 398, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 570, 571, 573, 576, 577, 578, 675, 679, 695, 696, 698, 699, 706, 710, 711, 724, 727, 733, 738, 739, 742, 750, 751, 789, 803, 860, 929, 930, 932, 935, 937, 938, 939, 945, 946, 948, 951, 953, 954, 955, 956, 958, 959, 960, 961, 962, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 1237], "against": [64, 118, 478, 860, 1044, 1237, 1238], "eagerli": [64, 504], "unset": [64, 145, 397, 504, 961], "init": [64, 152], "eager_execut": [64, 1237], "itself": [64, 144, 225, 298, 301, 515, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 728, 729, 751, 800, 860, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1229, 1233, 1237], "impact": [64, 186, 189, 298, 789, 792, 860, 1237], "declar": [64, 105, 107, 108, 109, 111, 118, 125, 126, 134, 298, 860], "godfath": 64, "1972": 64, "6_000_000": 64, "134_821_952": 64, "dark": 64, "knight": 64, "2008": 64, "185_000_000": 64, "533_316_061": 64, "schindler": 64, "1993": 64, "22_000_000": 64, "96_067_179": 64, "pulp": 64, "fiction": 64, "1994": 64, "8_000_000": 64, "107_930_000": 64, "shawshank": 64, "redempt": 64, "25_000_000": 64, "28_341_469": 64, "release_year": 64, "budget": 64, "gross": 64, "imdb_scor": 64, "ctx": [64, 65, 66, 67, 68, 69], "film": 64, "1990": 64, "BY": [64, 66], "desc": [64, 66], "AS": [64, 731, 1237], "decad": 64, "total_gross": 64, "n_film": 64, "2000": [64, 381, 383, 390, 391, 394, 399, 863, 941, 954, 955, 958, 963], "533316061": 64, "232338648": 64, "1970": [64, 136], "134821952": 64, "register_glob": [65, 67, 69, 1237], "register_mani": [65, 66, 69], "unregist": [65, 66, 67, 1237], "frame_data": [65, 68], "collect": [65, 66, 69, 83, 86, 87, 130, 131, 132, 136, 146, 148, 165, 167, 207, 224, 254, 265, 266, 298, 423, 452, 515, 681, 702, 706, 733, 751, 766, 767, 769, 773, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 796, 797, 798, 799, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 818, 820, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 839, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 860, 863, 1015, 1229, 1237, 1238], "global": [66, 71, 89, 90, 137, 146, 151, 259, 298, 562, 751, 898, 900, 1102, 1229, 1237], "scope": [66, 69, 152, 762, 863, 1237], "map": [66, 67, 72, 107, 108, 116, 117, 118, 119, 122, 123, 128, 129, 130, 133, 158, 168, 177, 203, 209, 229, 235, 236, 237, 255, 298, 308, 398, 412, 512, 513, 514, 515, 534, 547, 562, 566, 665, 715, 751, 769, 779, 814, 860, 863, 923, 962, 976, 1076, 1077, 1102, 1106, 1217, 1229, 1237], "recent": [66, 139, 140, 141, 142, 548, 751, 1091, 1229, 1237], "df1": [66, 68, 69, 80, 88, 139, 140, 169, 172, 216, 260, 271, 298, 808, 860], "df2": [66, 68, 69, 80, 88, 139, 140, 169, 172, 260, 271, 298], "join": [66, 71, 80, 86, 87, 88, 90, 175, 206, 268, 298, 429, 446, 547, 751, 772, 773, 780, 782, 785, 798, 812, 824, 834, 839, 860], "named_fram": [67, 1237], "lf1": [67, 69], "o": [67, 122, 133, 339, 362, 605, 660, 751, 894, 921, 1150, 1178, 1213, 1229], "lf2": [67, 69, 860], "p": [67, 82, 223, 298, 551, 733, 751, 811, 860], "q": [67, 237, 298, 733], "r": [67, 116, 117, 130, 551, 601, 605, 606, 607, 608, 621, 751, 863, 1146, 1150, 1151, 1152, 1153, 1166], "lf3": [67, 860], "lf4": [67, 860], "either": [67, 72, 146, 201, 205, 206, 207, 210, 212, 217, 222, 234, 235, 250, 259, 298, 555, 562, 567, 638, 669, 678, 684, 733, 751, 797, 798, 800, 816, 860, 863, 1096, 1102, 1183, 1229, 1238], "tbl1": [67, 69], "tbl2": [67, 69], "tbl3": 67, "tbl4": 67, "statement": [68, 741], "hello_world": 68, "baz": [68, 196, 197, 224, 266, 298, 608, 628, 630, 747, 796, 833, 860, 863, 1153, 1175], "hello_data": 68, "foo_bar": [68, 519, 522, 628, 713], "registr": [69, 763], "lifetim": [69, 152, 762], "context": [69, 71, 89, 90, 150, 220, 298, 307, 313, 429, 478, 513, 515, 523, 593, 594, 665, 673, 684, 703, 706, 712, 716, 727, 730, 750, 751, 762, 763, 839, 860, 1044, 1217, 1229, 1237], "manag": [69, 71, 89, 90, 762, 763, 1237], "often": [69, 152, 186, 187, 189, 190, 234, 298, 474, 475, 561, 567, 751, 789, 790, 792, 793, 816, 860, 1040, 1041], "want": [69, 87, 108, 172, 209, 220, 298, 429, 513, 515, 566, 570, 571, 572, 573, 574, 576, 577, 578, 599, 612, 623, 686, 695, 704, 724, 727, 742, 751, 773, 794, 801, 860, 863, 990, 1077, 1106, 1144, 1157, 1168, 1229], "df0": [69, 216, 298, 808, 860], "exit": [69, 71, 89, 152, 1237], "construct": [69, 71, 89, 90, 105, 107, 108, 109, 110, 111, 118, 298, 435, 724, 727, 742, 747, 751, 776, 860, 898, 1229], "persist": [69, 860], "through": [69, 106, 118, 747, 863, 1229], "tbl0": 69, "remain": [69, 116, 117, 130, 167, 170, 175, 298, 367, 368, 429, 477, 562, 629, 630, 751, 778, 785, 802, 803, 860, 926, 927, 984, 994, 1043, 1102, 1174, 1175, 1229], "text": [69, 118, 612, 613, 621, 622, 624, 731, 1157, 1158, 1169, 1238], "misc": 69, "testing1234": 69, "test1": 69, "test2": 69, "test3": 69, "disabl": [71, 89, 90, 203, 298, 772, 860], "cach": [71, 86, 87, 89, 90, 122, 130, 133, 135, 139, 140, 141, 142, 151, 562, 570, 571, 572, 573, 574, 576, 577, 578, 638, 639, 640, 644, 751, 762, 772, 773, 780, 782, 812, 824, 860, 898, 1102, 1183, 1184, 1185, 1189, 1229], "under": [71, 81, 82, 83, 84, 89, 90, 743, 744, 746, 747, 752, 753, 756, 758, 759, 760, 1221, 1223, 1225, 1230, 1234, 1235, 1236], "equal": [71, 90, 116, 117, 118, 130, 139, 140, 141, 142, 157, 179, 186, 189, 206, 216, 263, 298, 363, 412, 418, 419, 438, 465, 504, 543, 555, 561, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 618, 619, 647, 728, 729, 741, 747, 751, 767, 789, 792, 798, 808, 826, 831, 860, 922, 962, 1070, 1096, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1123, 1163, 1164, 1192, 1229, 1238], "concaten": [71, 88, 89, 90, 178, 223, 298, 551, 681, 682, 751, 811, 860, 904, 1083, 1229], "introduc": [71, 90, 638, 639, 640, 1183, 1184, 1185], "overhead": [71, 90, 130, 133, 134, 135], "amount": [71, 90, 313, 515, 700, 751], "depend": [71, 85, 90, 118, 138, 470, 471, 515, 523, 555, 558, 700, 703, 706, 712, 751, 1036, 1037, 1096, 1098, 1229, 1238], "nest": [71, 112, 128, 170, 298, 763, 984, 1229, 1237, 1238], "clear": [71, 89, 160, 298, 771, 860, 909, 1229], "outermost": 71, "s1": [71, 89, 90, 141, 142, 178, 298, 983, 1029, 1070, 1211, 1220, 1229], "color": [71, 89, 90, 284, 334, 336, 337, 338, 665, 751, 848, 1217, 1229], "red": [71, 89, 90, 284, 665, 751, 848, 1217, 1229], "green": [71, 89, 90, 284, 665, 751, 848, 1217, 1229], "blue": [71, 89, 90, 334, 336, 337, 338, 665, 751, 1217, 1229], "concat": [71, 89, 90, 117, 904, 1083, 1229], "cat": [71, 89, 90, 363, 555, 598, 601, 643, 646, 659, 682, 746, 751, 863, 922, 1003, 1096, 1143, 1146, 1188, 1191, 1225, 1229], "decor": [71, 81, 82, 83, 84, 146, 148, 209, 298, 515, 751, 762, 763, 1077, 1229], "dure": [71, 116, 117, 130, 152, 172, 298, 990, 1229], "afterward": [71, 741], "construct_categor": 71, "schemadict": [72, 105, 107, 108, 109, 110, 111, 116, 118, 119, 121, 127, 130, 298, 733, 802, 803, 843, 848, 860], "composit": [72, 145, 1238], "initi": [72, 152, 686, 690, 704, 741], "dai": [73, 186, 189, 204, 206, 234, 269, 298, 390, 391, 394, 395, 398, 405, 412, 414, 567, 570, 571, 572, 573, 574, 576, 577, 578, 694, 695, 696, 697, 698, 699, 700, 738, 739, 751, 789, 792, 798, 816, 860, 863, 954, 955, 958, 959, 962, 969, 976, 978], "unsign": [74, 75, 76, 77, 560, 751, 863, 1017, 1100, 1229], "static": [78, 843, 848], "frametyp": [80, 1237], "joinstrategi": [80, 205, 298, 797, 860], "outer": [80, 88, 205, 268, 298, 797, 834, 860], "descend": [80, 157, 242, 248, 263, 298, 323, 499, 558, 583, 593, 594, 665, 678, 751, 767, 821, 826, 831, 860, 879, 1025, 1065, 1098, 1126, 1138, 1217, 1229], "fill": [80, 88, 159, 173, 174, 244, 245, 267, 298, 333, 353, 356, 427, 428, 434, 446, 570, 571, 573, 577, 584, 585, 615, 625, 705, 724, 727, 742, 751, 783, 784, 822, 823, 839, 860, 992, 993, 1006, 1088, 1109, 1110, 1112, 1115, 1116, 1117, 1128, 1129, 1160, 1170, 1229], "sort": [80, 81, 139, 140, 145, 157, 186, 187, 189, 190, 206, 216, 223, 224, 234, 242, 263, 269, 282, 292, 298, 323, 342, 429, 515, 547, 567, 570, 571, 572, 573, 574, 576, 577, 578, 583, 594, 665, 667, 678, 716, 751, 767, 780, 789, 790, 792, 793, 798, 808, 811, 812, 816, 821, 824, 831, 846, 856, 860, 863, 879, 899, 1025, 1126, 1214, 1217, 1229, 1238], "origin": [80, 116, 117, 130, 167, 175, 265, 298, 367, 368, 397, 398, 412, 429, 462, 477, 514, 534, 547, 560, 561, 562, 563, 600, 601, 606, 611, 676, 677, 751, 778, 785, 832, 860, 922, 926, 927, 961, 962, 976, 994, 1043, 1076, 1096, 1102, 1103, 1145, 1146, 1151, 1156, 1229], "In": [80, 87, 118, 120, 131, 132, 135, 146, 148, 152, 170, 172, 186, 187, 189, 190, 209, 220, 234, 259, 298, 515, 567, 695, 751, 773, 789, 790, 792, 793, 816, 860, 984, 990, 1099, 1229], "duplic": [80, 94, 198, 205, 206, 265, 268, 298, 308, 448, 462, 534, 555, 751, 797, 798, 832, 834, 860, 1009, 1096, 1229], "suitabl": [80, 88, 118, 144, 209, 298, 515, 582, 751, 1077, 1122, 1229, 1238], "get": [80, 87, 113, 123, 129, 136, 150, 157, 161, 168, 177, 181, 183, 186, 187, 189, 190, 192, 193, 198, 200, 201, 208, 211, 218, 219, 224, 234, 235, 239, 243, 247, 252, 263, 272, 282, 292, 298, 307, 321, 322, 323, 325, 332, 341, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 378, 430, 436, 442, 461, 464, 467, 480, 485, 505, 516, 517, 518, 523, 525, 529, 540, 541, 549, 550, 556, 565, 567, 592, 596, 653, 654, 662, 666, 703, 708, 712, 716, 717, 718, 719, 720, 721, 722, 732, 736, 740, 751, 767, 772, 773, 774, 779, 786, 789, 790, 792, 793, 794, 799, 801, 816, 817, 825, 829, 831, 836, 846, 856, 860, 877, 878, 879, 880, 881, 888, 897, 904, 913, 914, 915, 916, 917, 918, 919, 920, 938, 999, 1002, 1007, 1009, 1027, 1032, 1046, 1051, 1071, 1078, 1080, 1081, 1083, 1086, 1087, 1092, 1093, 1097, 1105, 1137, 1140, 1200, 1205, 1206, 1214, 1218, 1219, 1229], "speedup": [80, 203, 209, 298, 515, 751, 1077, 1229], "receiv": [80, 118, 130, 209, 223, 284, 298, 515, 551, 751, 811, 860, 1238], "now": [80, 234, 298, 412, 702, 816, 860, 962, 976, 1185], "One": [80, 164, 220, 224, 298, 310, 546, 702, 731, 751, 863, 923, 1229], "whose": [80, 206, 224, 298, 423, 702, 751, 798, 860, 863], "uniqu": [80, 143, 144, 145, 148, 156, 200, 205, 220, 224, 237, 289, 298, 314, 325, 363, 461, 533, 555, 638, 639, 640, 644, 663, 665, 674, 723, 751, 766, 797, 853, 860, 881, 922, 923, 1027, 1084, 1096, 1183, 1184, 1185, 1189, 1215, 1217, 1229], "post": 80, "constrain": [80, 167, 298, 778, 860], "newli": 80, "boolean": [80, 157, 175, 178, 207, 248, 263, 298, 309, 310, 311, 326, 327, 334, 337, 338, 381, 429, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 468, 469, 473, 544, 546, 549, 550, 594, 609, 667, 668, 678, 679, 733, 741, 751, 767, 771, 785, 800, 826, 831, 860, 863, 867, 868, 880, 882, 883, 889, 891, 941, 994, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1034, 1035, 1039, 1089, 1092, 1093, 1124, 1143, 1210, 1220, 1229], "know": [80, 118, 224, 298, 504, 513, 751, 1219, 1229], "2022": [80, 158, 164, 184, 298, 371, 379, 387, 398, 412, 638, 695, 696, 698, 700, 706, 769, 860, 863, 931, 942, 962, 976, 1183], "df3": [80, 298], "set_tbl_format": 80, "09": [80, 146, 234, 298, 371, 390, 391, 567, 641, 695, 739, 751, 816, 860, 863, 1186], "02": [80, 158, 184, 186, 234, 269, 298, 370, 371, 378, 390, 391, 394, 397, 403, 406, 409, 411, 415, 567, 570, 571, 573, 576, 577, 578, 579, 638, 639, 640, 644, 695, 696, 698, 700, 751, 769, 789, 816, 860, 863, 930, 931, 933, 934, 938, 939, 945, 946, 951, 954, 955, 956, 961, 962, 966, 967, 970, 973, 975, 976, 1070, 1183, 1184, 1185, 1189], "03": [80, 112, 158, 186, 234, 269, 298, 370, 371, 372, 378, 390, 391, 394, 397, 398, 399, 401, 403, 404, 405, 406, 409, 411, 412, 415, 567, 570, 571, 573, 576, 577, 578, 639, 644, 695, 696, 698, 700, 751, 769, 789, 816, 860, 930, 931, 932, 938, 939, 945, 946, 954, 955, 956, 961, 962, 965, 967, 968, 969, 970, 973, 975, 1184, 1189], "af1": 80, "af2": 80, "af3": 80, "keep": [80, 116, 117, 130, 265, 268, 269, 298, 462, 514, 527, 535, 562, 680, 751, 832, 834, 860, 1076, 1102, 1229], "easili": [80, 118, 240, 273, 277, 298, 733, 818, 837, 841, 860], "dot": [80, 751, 824, 860, 1229], "product": [80, 162, 205, 298, 355, 360, 366, 751, 782, 797, 860, 915, 919, 925, 1229], "fill_nul": [80, 173, 298, 751, 783, 839, 860, 1229], "sum_horizont": [80, 250, 298, 734], "167": 80, "47": 80, "callabl": [81, 82, 83, 84, 130, 155, 178, 209, 223, 279, 284, 298, 313, 504, 511, 512, 513, 515, 535, 551, 568, 569, 673, 686, 687, 690, 691, 704, 714, 715, 716, 726, 751, 802, 803, 811, 843, 848, 860, 870, 1070, 1077, 1107, 1108, 1229], "by_first_letter_of_column_nam": 81, "f": [81, 117, 184, 204, 254, 264, 267, 298, 306, 504, 586, 605, 638, 640, 673, 681, 714, 751, 1070, 1150, 1183, 1185], "fromkei": [81, 83], "by_first_letter_of_column_valu": 81, "starts_with": [81, 334, 337, 598, 604, 863, 1149], "to_seri": [81, 181, 298, 638, 679, 727, 1183], "xy": [81, 83], "yz": [81, 83], "b1": [81, 83], "b2": [81, 83], "pow_n": 82, "powersofn": 82, "next": [82, 186, 206, 234, 269, 298, 333, 394, 398, 412, 558, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976, 1098, 1229], "ceil": [82, 751, 1229], "previou": [82, 152, 536, 537, 548, 553, 650, 652, 751, 1091, 1229], "floor": [82, 751, 1229], "nearest": [82, 206, 227, 290, 298, 344, 432, 446, 556, 574, 725, 751, 798, 813, 854, 860, 903, 996, 1006, 1097, 1113, 1229], "24": [82, 170, 186, 206, 209, 234, 269, 298, 355, 362, 375, 394, 395, 398, 406, 412, 414, 532, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 921, 958, 962, 970, 976, 1029, 1229], "001": [82, 383, 407, 408, 410, 647, 700, 971, 972, 974, 1192], "next_pow2": 82, "prev_pow2": 82, "nearest_pow2": 82, "split_by_column_dtyp": 83, "collect_al": [83, 87, 772, 773, 860], "31": [84, 146, 371, 375, 379, 387, 390, 394, 405, 638, 694, 697, 706, 713, 863, 929, 931, 935, 954, 969, 1183, 1238], "42": [84, 191, 216, 234, 298, 567, 751, 808, 816, 860, 1001, 1229], "961": 84, "1764": 84, "4160": 84, "build": [85, 106, 863, 1238], "wa": [85, 139, 562, 623, 751, 1102, 1168, 1229], "compil": [85, 470, 471, 1036, 1037], "gate": 85, "info": [85, 120, 131, 132, 138, 225, 298, 301, 1233], "host": [85, 116, 122, 124, 133, 135], "git": 85, "lazy_fram": [86, 87], "comm_subplan_elim": [86, 87, 772, 773, 780, 782, 812, 824, 860], "comm_subexpr_elim": [86, 87, 772, 773, 780, 782, 812, 824, 860], "graph": [86, 207, 298, 772, 795, 839, 860], "parallel": [86, 88, 114, 119, 128, 135, 186, 189, 206, 207, 223, 241, 274, 298, 362, 478, 665, 741, 751, 763, 789, 792, 797, 798, 819, 838, 848, 860, 921, 1044, 1217, 1229], "threadpool": [86, 150], "Will": [86, 87, 772, 773, 780, 782, 812, 824, 860, 1229], "try": [86, 87, 100, 102, 116, 117, 122, 128, 130, 133, 135, 772, 773, 780, 782, 812, 824, 860], "branch": [86, 87, 772, 773, 780, 782, 812, 824, 860], "subplan": [86, 87, 772, 773, 780, 782, 812, 824, 860], "union": [86, 87, 88, 496, 772, 773, 780, 782, 812, 824, 860, 863, 1062], "subexpress": [86, 87, 772, 773, 780, 782, 812, 824, 860], "reus": [86, 87, 772, 773, 780, 782, 812, 824, 860], "part": [86, 87, 105, 121, 146, 607, 629, 630, 773, 780, 782, 812, 824, 839, 860, 1152, 1174, 1175], "fashion": [86, 87, 205, 298, 773, 780, 782, 812, 824, 860], "alpha": [86, 87, 313, 420, 421, 422, 751, 772, 773, 780, 782, 812, 824, 860, 985, 986, 987, 1229], "gevent": [87, 138, 773, 860], "await": [87, 773, 860], "_geventdataframeresult": [87, 773, 860], "asynchron": [87, 773, 860], "them": [87, 105, 107, 108, 109, 111, 125, 126, 127, 128, 130, 134, 135, 171, 172, 186, 206, 216, 234, 269, 298, 447, 484, 540, 541, 547, 567, 681, 695, 696, 698, 699, 738, 739, 751, 773, 781, 789, 798, 808, 816, 860, 863, 990, 1050, 1086, 1087, 1229], "schedul": [87, 773, 860], "insid": [87, 773, 860], "almost": [87, 209, 284, 298, 638, 639, 640, 773, 860, 1077, 1183, 1184, 1185, 1229], "instantli": [87, 773, 860], "asyncio": [87, 773, 860], "releas": [87, 313, 515, 751, 773, 860, 1238], "greenlet": [87, 773, 860], "task": [87, 773, 860], "wrapper": [87, 773, 860], "event": [87, 773, 860], "asyncresult": [87, 773, 860], "timeout": [87, 773, 860], "break": [87, 136, 267, 268, 298, 313, 362, 363, 398, 443, 570, 571, 572, 573, 574, 576, 577, 578, 751, 773, 834, 860, 901, 921, 922, 962, 1003, 1096, 1229], "collect_async": [87, 860], "set_except": [87, 773, 860], "futur": [87, 154, 164, 210, 212, 217, 250, 298, 695, 773, 860, 1219, 1229], "rerais": [87, 773, 860], "polarstyp": 88, "concatmethod": 88, "vertic": [88, 172, 210, 212, 217, 250, 267, 271, 298, 597, 1142], "rechunk": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 172, 298, 751, 904, 990, 1083, 1229], "combin": [88, 100, 102, 175, 186, 191, 206, 234, 269, 298, 310, 324, 412, 546, 562, 567, 616, 626, 632, 633, 634, 635, 695, 696, 698, 699, 738, 739, 741, 751, 789, 798, 816, 824, 860, 962, 976, 1102, 1161, 1171, 1177, 1178, 1179, 1180, 1229], "vertical_relax": 88, "diagon": [88, 264, 298], "diagonal_relax": 88, "vstack": [88, 172, 298], "addition": [88, 235, 298], "coerc": [88, 561, 751], "supertyp": [88, 174, 298, 312, 751, 784, 860], "mismatch": [88, 100, 126, 139, 141], "find": [88, 176, 182, 298, 582, 599, 751, 1122, 1144, 1229], "miss": [88, 116, 117, 130, 173, 298, 333, 420, 421, 422, 434, 456, 458, 504, 751, 783, 860, 985, 986, 987, 1219, 1229], "stack": [88, 194, 271, 298], "don": [88, 186, 209, 265, 267, 298, 313, 362, 478, 515, 547, 751, 789, 832, 860, 863, 921, 983, 1044, 1077, 1123, 1219, 1229], "auto": [88, 105, 107, 108, 109, 111, 125, 126, 128, 134, 135, 264, 298, 412, 860, 962, 976, 1238], "logic": [88, 209, 225, 284, 298, 301, 309, 311, 515, 659, 669, 671, 716, 751, 776, 797, 820, 848, 860, 867, 868, 1077, 1212, 1229, 1233], "align_fram": 88, "pattern": [88, 116, 117, 130, 133, 134, 135, 203, 298, 521, 598, 599, 600, 601, 606, 607, 608, 621, 622, 623, 848, 863, 1121, 1124, 1143, 1144, 1145, 1146, 1151, 1152, 1153, 1166, 1167, 1168, 1229], "collis": 88, "need": [88, 112, 116, 117, 119, 186, 187, 189, 190, 234, 237, 246, 259, 298, 504, 567, 586, 641, 700, 724, 727, 742, 751, 789, 790, 792, 793, 816, 860, 1130, 1186, 1229, 1238], "sure": [88, 105, 110, 116, 117, 122, 124, 128, 186, 187, 189, 190, 228, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "contigu": [88, 105, 110, 116, 117, 122, 124, 128, 130, 133, 134, 135, 228, 298], "relev": 88, "df_h1": 88, "l1": 88, "l2": 88, "df_h2": 88, "r1": 88, "r2": 88, "r3": 88, "df_d1": 88, "df_d2": 88, "df_a1": 88, "df_a2": 88, "df_a3": 88, "enable_string_cach": 89, "stringcach": [89, 90, 205, 298, 763, 898, 900], "reliabl": [89, 90], "wai": [89, 90, 105, 107, 108, 109, 111, 125, 126, 134, 185, 204, 223, 248, 277, 298, 547, 551, 594, 606, 747, 751, 788, 811, 826, 841, 848, 860, 1151], "until": [89, 207, 298, 618, 619, 647, 1163, 1164, 1192], "deprec": [90, 91, 155, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 279, 298, 313, 346, 347, 357, 358, 359, 360, 361, 376, 380, 384, 386, 388, 393, 397, 400, 412, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 553, 568, 585, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 638, 640, 652, 655, 656, 673, 692, 693, 695, 697, 714, 751, 789, 790, 791, 792, 793, 802, 823, 830, 843, 860, 870, 907, 908, 917, 918, 919, 920, 922, 936, 940, 947, 949, 952, 957, 961, 962, 964, 976, 1008, 1012, 1014, 1017, 1018, 1024, 1026, 1028, 1040, 1053, 1068, 1076, 1096, 1107, 1123, 1125, 1129, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1183, 1185, 1201, 1202, 1219, 1229], "sinc": [90, 120, 131, 155, 157, 176, 179, 186, 187, 188, 189, 190, 195, 210, 212, 217, 231, 245, 250, 253, 263, 279, 298, 313, 346, 347, 357, 358, 359, 360, 361, 376, 378, 380, 384, 386, 388, 393, 397, 400, 412, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 553, 568, 585, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 638, 640, 652, 655, 656, 673, 692, 693, 695, 697, 706, 714, 751, 767, 789, 790, 791, 792, 793, 802, 823, 826, 830, 831, 843, 860, 870, 907, 908, 917, 918, 919, 920, 922, 936, 938, 940, 947, 949, 952, 957, 961, 962, 964, 976, 1008, 1012, 1014, 1017, 1018, 1024, 1026, 1028, 1040, 1053, 1068, 1076, 1096, 1107, 1123, 1125, 1129, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1183, 1185, 1201, 1202, 1219, 1229], "19": [90, 121, 138, 155, 176, 179, 186, 187, 188, 189, 190, 195, 206, 210, 212, 217, 231, 234, 245, 250, 253, 279, 298, 313, 346, 347, 357, 358, 359, 360, 361, 376, 380, 384, 386, 388, 393, 397, 398, 400, 412, 450, 454, 457, 462, 474, 487, 502, 511, 512, 514, 553, 567, 568, 571, 573, 585, 600, 610, 614, 615, 616, 617, 620, 625, 626, 632, 638, 640, 641, 652, 655, 656, 673, 692, 693, 695, 697, 714, 751, 789, 790, 791, 792, 793, 798, 802, 816, 823, 830, 843, 860, 870, 907, 908, 917, 918, 919, 920, 922, 936, 940, 947, 949, 952, 957, 961, 962, 964, 976, 1008, 1012, 1014, 1017, 1018, 1024, 1026, 1028, 1040, 1053, 1068, 1076, 1096, 1107, 1123, 1125, 1129, 1145, 1155, 1159, 1160, 1161, 1162, 1165, 1170, 1171, 1177, 1183, 1185, 1186, 1201, 1202, 1219, 1229], "longer": [90, 116, 130], "accept": [90, 115, 116, 117, 120, 122, 124, 128, 157, 185, 188, 240, 241, 244, 248, 263, 273, 274, 277, 298, 306, 345, 423, 447, 514, 547, 562, 594, 668, 670, 672, 678, 680, 681, 682, 689, 693, 718, 722, 730, 733, 735, 741, 751, 767, 788, 791, 818, 819, 822, 826, 831, 837, 838, 841, 860, 906, 1007, 1102, 1128, 1229], "disable_string_cach": 90, "finish": [93, 172, 298, 990, 1229], "least": [97, 146, 548, 751, 1091, 1229], "unexpect": [98, 298, 513, 515, 751, 1077, 1229], "caus": [98, 106, 116, 117, 130, 139, 154, 172, 298, 990, 1229], "panic": 98, "incompat": 102, "arrai": [105, 109, 116, 117, 128, 170, 254, 259, 260, 298, 326, 327, 328, 329, 330, 331, 332, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 472, 488, 489, 490, 491, 500, 503, 507, 570, 571, 573, 577, 583, 701, 751, 860, 882, 883, 884, 885, 886, 887, 888, 907, 908, 913, 914, 915, 916, 917, 918, 919, 920, 925, 984, 1038, 1054, 1055, 1056, 1057, 1065, 1066, 1069, 1073, 1074, 1109, 1110, 1112, 1115, 1116, 1117, 1126, 1131, 1205, 1210, 1211, 1219, 1229], "chunkedarrai": [105, 219, 298], "recordbatch": [105, 204, 298], "schemadefinit": [105, 107, 108, 109, 111, 125, 126, 134, 298, 860], "schema_overrid": [105, 107, 108, 109, 110, 111, 118, 119, 121, 125, 126, 127, 204, 259, 298, 860, 863, 888], "copi": [105, 106, 154, 159, 160, 204, 254, 260, 273, 298, 426, 751, 770, 771, 837, 860, 905, 909, 991, 1205, 1210, 1211, 1229], "closest": 105, "pair": [105, 107, 108, 109, 111, 125, 126, 134, 145, 229, 298, 814, 860, 1238], "sever": [105, 107, 108, 109, 111, 125, 126, 134, 298, 860, 1238], "form": [105, 107, 108, 109, 111, 125, 126, 134, 203, 236, 267, 298, 548, 751, 860, 1091, 1229], "dimens": [105, 107, 109, 111, 125, 126, 134, 298, 563, 751, 860, 1103, 1229], "supportsinterchang": 106, "allow_copi": [106, 154], "interchang": [106, 154], "__dataframe__": 106, "convers": [106, 121, 154, 203, 204, 236, 237, 256, 259, 260, 298, 638, 639, 640, 644, 763, 1000, 1183, 1184, 1185, 1189, 1209, 1210, 1211, 1229], "detail": [106, 118, 119, 139, 141, 154, 298, 860, 1238], "latest": [106, 120, 131, 154, 397, 398, 412, 434, 524, 638, 640, 697, 751, 961, 962, 976, 1183, 1185], "from_panda": 106, "from_arrow": 106, "effici": [106, 118, 121, 202, 204, 298], "reli": 106, "becaus": [106, 126, 170, 186, 189, 207, 209, 267, 284, 298, 478, 789, 792, 848, 860, 870, 984, 1044, 1077, 1229], "convert": [106, 110, 120, 121, 127, 131, 154, 255, 256, 257, 258, 259, 262, 298, 331, 364, 372, 401, 404, 503, 504, 512, 535, 557, 608, 620, 638, 639, 640, 641, 642, 644, 649, 751, 860, 887, 900, 932, 965, 968, 1069, 1070, 1153, 1165, 1183, 1184, 1185, 1186, 1187, 1189, 1198, 1208, 1209, 1210, 1211, 1219, 1229], "panda": [106, 110, 138, 186, 260, 298, 390, 391, 659, 751, 789, 860, 954, 955, 1211, 1212, 1229], "pd": [106, 110, 659, 751, 1211, 1212, 1229], "df_pd": 106, "dfi": [106, 154], "clone": [107, 108, 109, 110, 111, 159, 259, 260, 298, 770, 860, 905, 1209, 1210, 1211, 1219, 1229], "dimension": [107, 109, 111, 259, 298, 860, 1229], "infer_schema_length": [108, 111, 116, 117, 121, 125, 130, 134, 298, 609, 610, 860, 1154, 1155], "NOT": [108, 202, 298, 504, 522, 1237], "typic": [108, 118, 135, 209, 298, 377, 863, 937, 1077, 1229], "clearer": 108, "partial": [108, 116, 130, 298, 860], "mani": [108, 111, 118, 119, 172, 298, 609, 610, 623, 990, 1154, 1155, 1168, 1229], "scan": [108, 111, 116, 117, 130, 131, 132, 133, 134, 135, 136, 186, 187, 189, 190, 234, 298, 567, 751, 782, 789, 790, 792, 793, 794, 801, 816, 860], "slow": [108, 111, 116, 117, 130, 313, 362, 515, 569, 751, 848, 921, 1108, 1229], "present": [108, 146, 452, 514, 634, 635, 751, 782, 860, 1076, 1219, 1229], "np": [109, 175, 259, 298, 436, 655, 751, 785, 860, 997, 1011, 1016, 1020, 1021, 1122, 1201, 1229], "ndarrai": [109, 175, 259, 298, 436, 655, 751, 785, 860, 997, 1121, 1122, 1125, 1201, 1210, 1229], "numpi": [109, 138, 162, 203, 236, 237, 256, 259, 260, 298, 540, 541, 569, 751, 860, 1011, 1016, 1020, 1021, 1086, 1087, 1108, 1210, 1211, 1219, 1229], "columnar": [109, 111, 203, 236, 298], "interpret": [109, 111, 116, 117, 130, 298, 860], "yield": [109, 111, 116, 117, 118, 130, 170, 172, 264, 298, 513, 547, 751, 860, 984, 990, 1229], "conclus": [109, 111, 298, 860], "nan_to_nul": [110, 298, 860, 1229], "include_index": 110, "instal": [110, 116, 117, 119, 122, 124, 162, 259, 260, 298, 824, 860, 1211, 1229], "nan": [110, 146, 154, 173, 260, 298, 367, 368, 418, 419, 427, 438, 440, 446, 456, 458, 459, 460, 465, 510, 516, 529, 540, 541, 542, 543, 569, 661, 683, 751, 783, 860, 872, 876, 926, 927, 992, 1020, 1021, 1086, 1087, 1108, 1210, 1211, 1229, 1238], "pd_df": 110, "pd_seri": 110, "tbl": [112, 114, 117], "reconstruct": 112, "repr": [112, 146, 148], "trim": 112, "whitespac": [112, 616, 626, 632, 633, 634, 635, 1161, 1171, 1177, 1178, 1179, 1180], "prompt": 112, "extract": [112, 373, 375, 376, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 395, 396, 399, 400, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 551, 607, 608, 609, 610, 611, 629, 751, 933, 934, 935, 936, 939, 940, 942, 946, 947, 948, 949, 951, 952, 953, 956, 957, 959, 960, 963, 964, 966, 969, 970, 971, 972, 973, 974, 975, 977, 978, 980, 1152, 1153, 1154, 1155, 1156], "to_init_repr": [112, 298, 1229], "truncat": [112, 116, 130, 184, 186, 189, 203, 236, 237, 256, 298, 789, 792, 812, 860], "identifi": [112, 215, 222, 265, 298, 807, 832, 860], "compound": [112, 237, 298, 702, 863], "neither": [112, 121, 127, 238, 298, 504, 1070], "source_ac": 112, "source_cha": 112, "ident": [112, 159, 160, 298, 401, 565, 566, 751, 770, 771, 860, 905, 909, 965, 1105, 1106, 1229], "timestamp": [112, 186, 189, 298, 397, 398, 412, 706, 789, 792, 860, 961, 962, 976], "tor_id": 112, "nnel_id": 112, "\u03bc": [112, 146, 186, 203, 206, 234, 236, 237, 256, 269, 298, 369, 370, 371, 372, 377, 379, 383, 387, 390, 391, 394, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 567, 570, 571, 573, 576, 577, 578, 638, 640, 698, 700, 706, 751, 789, 798, 816, 860, 863, 929, 930, 931, 932, 933, 934, 937, 938, 939, 945, 946, 951, 954, 955, 956, 958, 961, 962, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 979, 1183, 1185], "asia": [112, 863, 933, 934, 966], "tokyo": [112, 863], "123456780": 112, "9876543210": 112, "56": [112, 657, 751], "59": [112, 145, 371, 379, 387, 399, 697, 737, 738, 739, 863, 931, 951, 963], "663053": 112, "jst": [112, 863], "803065983": 112, "2055938745": 112, "38": [112, 146], "18": [112, 216, 234, 298, 356, 398, 412, 415, 446, 462, 534, 567, 751, 808, 812, 816, 860, 863, 979, 1185], "050545": 112, "source_actor_id": 112, "source_channel_id": 112, "to_list": [112, 234, 298, 1143, 1229], "datatypeclass": 113, "uint32": [113, 138, 158, 170, 298, 323, 351, 436, 439, 466, 470, 471, 486, 561, 600, 601, 612, 613, 655, 659, 684, 751, 769, 860, 863, 880, 895, 983, 984, 1017, 1036, 1037, 1052, 1123, 1145, 1146, 1157, 1158, 1212, 1229], "regular": [113, 203, 235, 236, 269, 298, 423, 598, 600, 601, 606, 607, 608, 621, 622, 751, 863, 1143, 1145, 1146, 1151, 1152, 1153, 1166, 1167], "uint64": [113, 191, 298, 441, 470, 471, 560, 751, 1001, 1036, 1037, 1100, 1229], "bigidx": 113, "read": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 172, 298, 435, 513, 741, 751, 776, 782, 860, 990, 1229], "over": [114, 116, 117, 118, 120, 130, 146, 155, 172, 202, 203, 204, 209, 235, 236, 237, 264, 276, 279, 284, 298, 313, 362, 428, 512, 513, 515, 523, 525, 526, 527, 535, 558, 570, 571, 572, 573, 574, 576, 577, 578, 673, 686, 687, 690, 691, 704, 714, 715, 716, 726, 751, 843, 848, 863, 870, 921, 990, 1077, 1109, 1110, 1112, 1116, 1229], "fetch": [114, 130, 207, 298, 770, 772, 794, 801, 860], "ideal": 114, "read_csv_batch": [114, 764], "tpch": [114, 117], "tables_scale_100": [114, 117], "lineitem": [114, 117, 119], "try_parse_d": [114, 116, 117, 130], "n_row": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 204, 298, 782, 860], "handler": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 129, 776, 860], "builtin": [115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 129, 776, 860], "stop": [115, 116, 117, 122, 124, 128, 130, 133, 134, 135, 570, 571, 573, 576, 577, 578, 751, 930, 932, 938, 939, 946, 948, 951, 956, 962, 967], "textio": 116, "has_head": [116, 117, 121, 130], "new_column": [116, 117, 121, 130, 230, 231, 298], "comment_prefix": [116, 117, 130], "skip_row": [116, 117, 130], "missing_utf8_is_empty_str": [116, 117, 130], "ignore_error": [116, 117, 126, 130], "n_thread": [116, 117], "8192": 116, "csvencod": [116, 117, 130], "low_memori": [116, 117, 128, 130, 134, 135], "skip_rows_after_head": [116, 117, 130], "row_count_nam": [116, 117, 122, 124, 128, 130, 133, 134, 135], "row_count_offset": [116, 117, 122, 124, 128, 130, 133, 134, 135], "sample_s": [116, 117], "eol_char": [116, 117, 130], "raise_if_empti": [116, 117, 121, 127, 130], "truncate_ragged_lin": [116, 130], "fsspec": [116, 117, 122, 124, 128, 131, 132, 133, 135, 138], "remot": [116, 117, 122, 124], "autogener": [116, 117, 130], "column_x": [116, 117, 130], "enumer": [116, 117, 130, 204, 298], "shorter": [116, 117, 130, 504], "comment": [116, 117, 130], "instanc": [116, 117, 128, 130, 135, 146, 148, 152, 158, 172, 178, 298, 340, 524, 570, 571, 572, 573, 574, 576, 577, 578, 686, 690, 704, 747, 751, 769, 803, 840, 860, 895, 990, 1229], "escap": [116, 117, 130], "complet": [116, 118, 130, 1210, 1229], "wherea": [116, 118, 130, 234, 298, 398, 412, 540, 541, 567, 751, 794, 801, 816, 860, 962, 976, 1086, 1087, 1229], "would": [116, 117, 130, 323, 482, 515, 523, 558, 678, 751, 879, 1048, 1098, 1210, 1229], "prefer": [116, 117, 120, 130, 149, 172, 203, 209, 235, 236, 284, 298, 423, 515, 751, 860, 990, 1077, 1229, 1238], "treat": [116, 117, 130, 598, 601, 621, 622, 741, 1143, 1146, 1166, 1167], "10000": [116, 204, 298], "might": [116, 117, 130, 150, 157, 259, 263, 298, 313, 515, 663, 751, 767, 826, 831, 860, 1211, 1229], "issu": [116, 117, 121, 130, 355, 356, 653, 751, 915, 916, 1199, 1229], "iso8601": [116, 117, 130], "succe": [116, 117, 130], "cpu": [116, 117], "system": [116, 117], "wrongli": 116, "done": [116, 117, 130, 136, 152, 156, 158, 206, 298, 312, 314, 340, 547, 674, 751, 766, 769, 798, 860, 895, 1229], "buffer": [116, 117, 118, 170, 203, 298, 984, 1229], "modifi": [116, 117, 130, 150, 152, 172, 194, 202, 203, 271, 298, 324, 397, 415, 598, 606, 607, 621, 751, 869, 961, 979, 990, 1143, 1151, 1152, 1166, 1188, 1190, 1191, 1229], "upper": [116, 117, 118, 170, 186, 189, 298, 345, 346, 443, 447, 504, 664, 675, 695, 696, 698, 699, 710, 711, 738, 739, 751, 789, 792, 860, 906, 907, 984, 1003, 1007, 1075, 1216, 1229], "bound": [116, 117, 170, 186, 189, 298, 345, 346, 347, 447, 481, 482, 502, 504, 509, 664, 675, 695, 696, 698, 699, 710, 711, 738, 739, 751, 789, 792, 860, 906, 907, 908, 984, 1007, 1047, 1048, 1068, 1075, 1195, 1216, 1229], "lossi": [116, 117, 130], "decod": [116, 117, 609], "expens": [116, 117, 128, 130, 134, 135, 147, 149, 186, 187, 189, 190, 203, 209, 234, 235, 236, 237, 264, 265, 298, 313, 515, 567, 751, 789, 790, 792, 793, 816, 832, 860, 990, 1077, 1229, 1238], "aggreg": [116, 117, 128, 178, 185, 186, 188, 189, 210, 212, 214, 217, 220, 224, 226, 227, 234, 249, 250, 267, 270, 277, 278, 281, 283, 298, 307, 429, 444, 511, 513, 515, 547, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 669, 670, 671, 672, 686, 687, 688, 689, 690, 691, 692, 693, 704, 709, 717, 718, 721, 722, 726, 734, 735, 751, 789, 790, 792, 793, 803, 804, 805, 806, 809, 810, 813, 816, 827, 828, 835, 841, 842, 845, 847, 860, 1004, 1107, 1108, 1109, 1110, 1112, 1115, 1116, 1117, 1229], "parser": 116, "regard": [116, 683], "sens": [116, 122, 124, 133, 216, 269, 298, 547, 751, 808, 860], "particular": [116, 122, 124, 133, 170, 298, 984, 1229], "usernam": [116, 119, 122, 124, 133], "password": [116, 119, 122, 124, 133], "skip": [116, 117, 121, 128, 130, 135, 267, 298, 870, 1077, 1229], "offset": [116, 117, 121, 122, 124, 128, 130, 133, 134, 135, 180, 186, 187, 189, 190, 234, 247, 253, 269, 275, 298, 369, 377, 390, 391, 394, 398, 412, 437, 498, 567, 592, 627, 656, 751, 787, 789, 790, 792, 793, 816, 825, 830, 840, 860, 929, 937, 954, 955, 958, 962, 976, 998, 1064, 1137, 1172, 1185, 1202, 1229], "row_count": [116, 117, 122, 124, 128, 130, 133, 134, 135], "sampl": [116, 117, 284, 298, 591, 751, 848, 1136, 1229], "estim": [116, 117, 156, 170, 298, 314, 421, 422, 463, 674, 751, 766, 860, 984, 986, 987, 1030, 1229], "alloc": [116, 117, 170, 228, 298, 751, 984, 1229], "encount": [116, 117, 130, 186, 189, 298, 540, 541, 609, 611, 683, 686, 704, 751, 789, 792, 860, 1086, 1087, 1154, 1156, 1229], "window": [116, 117, 130, 186, 187, 189, 190, 234, 298, 362, 398, 412, 420, 421, 422, 513, 515, 547, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 681, 728, 729, 751, 789, 790, 792, 793, 816, 860, 921, 962, 976, 985, 986, 987, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1229], "rn": [116, 117, 130], "go": [116, 117, 130, 259, 298, 604, 1149], "nodataerror": [116, 117, 121, 127, 130, 763], "lazili": [116, 117, 130, 131, 132, 133, 134, 135, 773, 860], "glob": [116, 117, 130, 133, 134, 135], "continu": [116, 128, 363, 555, 591, 751, 922, 1096, 1136, 1229], "benchmark": [116, 128], "50000": 117, "batchedcsvread": [117, 763], "upon": 117, "creation": 117, "gather": [117, 180, 253, 298, 437, 502, 655, 656, 751, 787, 830, 860, 998, 1068, 1201, 1202, 1229], "next_batch": 117, "big": 117, "interest": 117, "seen_group": 117, "big_fil": 117, "df_current_batch": 117, "partition_df": 117, "partition_bi": [117, 204, 298], "as_dict": [117, 222, 298], "fh": 117, "write_csv": [117, 130, 298], "els": [117, 741], "connectionorcursor": 118, "iter_batch": 118, "execute_opt": 118, "cursor": 118, "client": 118, "odbc": 118, "establish": 118, "resultset": 118, "manner": 118, "veri": [118, 203, 264, 298, 515, 751, 848], "poor": 118, "trip": 118, "still": [118, 119], "intern": [118, 137, 203, 298], "exact": [118, 144, 146, 148, 246, 298, 636, 637, 638, 639, 640, 661, 751, 1183, 1184, 1185], "incom": 118, "read_arrow_batches_from_odbc": 118, "read_database_uri": 118, "wide": [118, 184, 215, 267, 298, 807, 860], "snowflak": [118, 119], "variou": [118, 298, 751, 860, 863, 1229], "facil": 118, "initialis": [118, 152, 860, 1237], "flight": 118, "flightsql": 118, "flight_sql": 118, "about": [118, 591, 598, 606, 607, 621, 751, 1136, 1143, 1151, 1152, 1166, 1229, 1238], "notabl": 118, "dremio": 118, "influxdb": 118, "notic": [118, 298, 860, 1229], "dbapi2": 118, "connectorx": [118, 119, 138], "optimis": [118, 209, 237, 284, 298, 860, 1077, 1124, 1229, 1238], "translat": 118, "conn": 118, "url": [118, 128, 135, 606, 608, 1151, 1153], "test_data": 118, "user_conn": 118, "normalised_scor": 118, "uint8": [118, 143, 145, 158, 258, 259, 267, 298, 355, 356, 562, 653, 668, 751, 769, 860, 863, 915, 916, 1102, 1199, 1229, 1238], "parameteris": 118, "metric": 118, "alchemy_conn": 118, "qmark": 118, "variad": 118, "1000": [118, 121, 170, 258, 298, 383, 407, 971, 1073, 1208, 1229, 1238], "localhost": 118, "5432": 118, "uid": 118, "usr": 118, "pwd": 118, "max_text_s": 118, "max_binary_s": 118, "do_someth": 118, "partition_on": 119, "partition_rang": 119, "partition_num": 119, "dbreadengin": 119, "raw": 119, "warehous": 119, "role": 119, "transfer": 119, "document": [119, 121, 225, 298, 301, 401, 404, 611, 638, 639, 640, 644, 747, 900, 965, 968, 1156, 1183, 1184, 1185, 1189, 1233], "redshift": 119, "mysql": 119, "mariadb": 119, "clickhous": 119, "oracl": 119, "bigqueri": 119, "pleas": [119, 186, 225, 298, 301, 695, 700, 789, 860, 1233], "github": 119, "sfu": 119, "connector": 119, "destin": 119, "develop": [119, 146, 148], "read_databas": 119, "explicitli": [119, 144, 146, 152, 733, 762], "test_tabl": 119, "compani": 119, "testdb": 119, "public": [119, 298, 751, 763, 860, 1229], "myrol": 119, "delta_table_opt": [120, 131], "root": [120, 131, 343, 462, 512, 525, 534, 535, 536, 537, 538, 539, 553, 595, 652, 750, 751, 902, 1139, 1229], "absolut": [120, 131, 132, 139, 140, 141, 142, 305, 420, 421, 422, 751, 865, 985, 986, 987, 1229], "avoid": [120, 236, 298, 308, 751], "year": [120, 131, 186, 206, 234, 269, 298, 381, 382, 394, 395, 398, 412, 413, 567, 570, 571, 572, 573, 574, 576, 577, 578, 694, 695, 696, 697, 698, 699, 738, 739, 751, 789, 798, 816, 860, 941, 942, 958, 959, 962, 976, 977], "2021": [120, 131, 158, 164, 184, 186, 269, 298, 638, 713, 769, 789, 860, 863, 933, 934, 942, 966, 1026, 1183, 1229], "aw": [120, 128, 131, 135], "googl": [120, 131, 132], "service_account": [120, 131], "service_account_json_absolute_path": [120, 131], "az": [120, 131, 132], "adl": [120, 131, 132], "abf": [120, 131, 132], "azure_storage_account_nam": [120, 131, 132], "azure_storage_account_kei": [120, 131, 132], "without_fil": [120, 131, 132], "track": [120, 131, 132, 209, 298, 504, 1237], "sheet_id": [121, 127], "sheet_nam": [121, 127], "xlsx2csv": [121, 138], "openpyxl": [121, 138], "pyxlsb": [121, 138], "xlsx2csv_option": 121, "read_csv_opt": 121, "spreadsheet": [121, 127, 224, 298, 763], "xlsb": 121, "sheetnam": [121, 127], "nor": [121, 127, 238, 298], "fastest": 121, "read_csv": [121, 130], "refin": 121, "significantli": [121, 209, 284, 298, 1077, 1229, 1238], "potenti": [121, 130, 133, 134, 203, 235, 237, 298, 534], "unabl": 121, "julian": 121, "skip_empty_lin": 121, "influenc": [121, 782, 803, 860], "pipelin": 121, "correct": [121, 127, 421, 422, 463, 571, 572, 573, 574, 575, 576, 578, 591, 751, 802, 803, 860, 986, 987, 1030, 1114, 1136, 1229], "known": [121, 146, 504, 570, 571, 572, 573, 574, 576, 577, 578, 751, 843, 848, 1070], "better": [121, 209, 259, 284, 298, 515, 613, 751, 848, 1121, 1124, 1158, 1229], "detect": 121, "memory_map": [122, 128, 133], "greatli": [122, 133], "repeat": [122, 133, 559, 561, 724, 742, 751], "give": [122, 124, 128, 133, 134, 215, 265, 298, 378, 463, 561, 661, 751, 763, 807, 832, 860, 938, 1030, 1229], "That": [122, 802, 803, 860], "filenam": 122, "my_fil": 122, "write_ipc": [122, 298], "read_ndjson": 125, "openoffic": 127, "od": 127, "parallelstrategi": [128, 135], "use_statist": [128, 135], "hive_partit": [128, 135], "retri": [128, 135], "row_group": [128, 135], "hive": [128, 135], "prune": [128, 135, 803, 860], "gcp": [128, 132, 135], "stabl": [128, 157, 162, 164, 191, 238, 263, 298, 441, 508, 751, 767, 807, 826, 831, 860, 1001, 1229], "read_tabl": 128, "scan_parquet": [128, 136], "scan_pyarrow_dataset": [128, 135], "contribut": [128, 572, 574, 576, 578, 751], "with_column_nam": 130, "push": [130, 133, 134, 135, 136], "down": [130, 133, 134, 135, 136, 432, 751, 996, 1229], "therebi": [130, 133, 134], "realloc": [130, 133, 134, 172, 298, 990, 1229], "headerless": 130, "my_long_fil": 130, "thing": [130, 137], "less": [130, 206, 298, 465, 510, 630, 751, 798, 860, 1175, 1238], "breezah": 130, "languag": [130, 186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "hard": [130, 802, 803, 860], "mydf": 130, "lambda": [130, 155, 178, 209, 223, 224, 284, 298, 313, 420, 421, 422, 504, 511, 512, 513, 515, 535, 686, 687, 704, 715, 716, 726, 751, 802, 803, 811, 848, 860, 870, 985, 986, 987, 1070, 1077, 1229], "lower": [130, 186, 189, 227, 290, 298, 345, 347, 447, 509, 512, 535, 556, 560, 574, 675, 695, 696, 698, 699, 710, 711, 725, 738, 739, 751, 789, 792, 813, 854, 860, 906, 908, 1007, 1075, 1097, 1100, 1113, 1216, 1229], "simpli": [130, 547, 686, 704, 751], "idx": [130, 186, 204, 298, 504, 789, 860, 1070], "uint16": [130, 355, 356, 653, 751, 863, 915, 916, 1199, 1229], "u16": [130, 146, 1238], "eu": [131, 132], "central": [131, 132, 463, 591, 751, 1030, 1136, 1229], "iceberg": [132, 763], "pyiceberg": [132, 138], "metadata": [132, 186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "secret": [132, 135], "adlf": 132, "my": [132, 136, 645, 1190], "oauth": 132, "token": 132, "ya29": 132, "dr": 132, "afm": 132, "py": 132, "impl": 132, "fsspecfileio": 132, "read_parquet": 135, "east": 135, "allow_pyarrow_filt": 136, "comparison": 136, "dset": 136, "folder": 136, "04": [136, 158, 186, 269, 298, 371, 372, 390, 391, 397, 398, 401, 404, 405, 406, 409, 411, 415, 638, 698, 700, 769, 789, 860, 863, 932, 946, 951, 954, 955, 956, 961, 965, 968, 969, 970, 973, 975, 979, 1183], "seed": [137, 191, 238, 298, 441, 492, 558, 581, 587, 751, 1001, 1058, 1098, 1120, 1132, 1229], "shuffl": [137, 238, 284, 298, 492, 581, 751, 848, 1058, 1120, 1229], "stdout": [138, 152, 184, 298, 526], "platform": 138, "maco": 138, "14": [138, 146, 176, 195, 209, 210, 212, 217, 231, 250, 253, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 357, 358, 359, 360, 361, 369, 446, 502, 558, 620, 655, 656, 692, 693, 738, 751, 845, 847, 849, 850, 851, 852, 853, 854, 855, 863, 917, 918, 919, 920, 929, 962, 1008, 1028, 1068, 1125, 1165, 1201, 1202, 1219, 1229], "arm64": 138, "arm": 138, "64bit": [138, 560, 751, 1100, 1229], "main": [138, 773, 860], "oct": 138, "13": [138, 146, 159, 160, 173, 174, 183, 196, 207, 219, 234, 273, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 308, 376, 380, 384, 386, 388, 393, 400, 523, 525, 567, 641, 681, 686, 689, 704, 735, 740, 751, 770, 771, 783, 784, 800, 816, 837, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 936, 940, 947, 949, 952, 957, 962, 964, 976, 977, 1014, 1017, 1024, 1026, 1077, 1186, 1229], "54": [138, 424, 751, 1238], "clang": 138, "1500": [138, 147], "adbc_driver_manag": 138, "cloudpickl": 138, "hvplot": [138, 225, 298, 301, 1233], "matplotlib": [138, 812, 824, 860], "26": [138, 377, 413, 937], "pydant": 138, "check_row_ord": [139, 140], "check_column_ord": [139, 140], "check_dtyp": [139, 140, 141, 142], "check_exact": [139, 140, 141, 142], "rtol": [139, 140, 141, 142], "atol": [139, 140, 141, 142], "08": [139, 140, 141, 142, 146, 234, 298, 371, 398, 567, 638, 698, 700, 751, 816, 860, 863, 962, 976, 1183], "categorical_as_str": [139, 140, 141, 142], "assert": [139, 140, 141, 142, 144, 146, 148, 234, 298, 763, 863], "assertionerror": [139, 140, 141, 142], "compar": [139, 140, 141, 142, 169, 179, 298, 418, 419, 438, 440, 465, 510, 542, 543, 751, 900, 983, 1123, 1229], "unsort": [139, 140], "exactli": [139, 140, 141, 142, 145, 146, 148, 629, 630, 636, 637, 700, 1131, 1174, 1175, 1181, 1182, 1229], "toler": [139, 140, 141, 142, 206, 298, 798, 860], "inexact": [139, 140, 141, 142], "share": [139, 140, 141, 142, 170, 298, 751, 984, 1229], "assert_series_equ": [139, 142, 983, 1229, 1238], "assert_frame_not_equ": [139, 142], "pytest": [139, 141], "worthwhil": [139, 141], "shorten": [139, 141], "traceback": [139, 140, 141, 142], "tb": [139, 141, 170, 298, 984, 1229], "short": [139, 141], "tend": [139, 141], "unhelpfulli": [139, 141], "assert_frame_equ": [140, 141, 169, 298, 1238], "assert_series_not_equ": [140, 141], "check_nam": [141, 142], "searchstrategi": [143, 145, 146, 148], "null_prob": [143, 146, 148], "percentag": [143, 146, 148, 548, 751, 1091, 1229], "chanc": [143, 146, 148, 1238], "independ": [143, 144, 146, 148], "flag": [143, 298, 583, 598, 606, 607, 621, 751, 780, 802, 803, 860, 1126, 1143, 1151, 1152, 1166, 1229], "hypothesi": [143, 144, 145, 146, 147, 148, 1238], "sampled_from": [143, 1238], "unique_small_int": 143, "ccy": [143, 1238], "gbp": [143, 1238], "eur": [143, 164, 184, 298, 1238], "jpy": [143, 1238], "min_col": [144, 146], "max_col": [144, 146], "standalon": [144, 146, 863], "mincol": 144, "assign": [144, 186, 298, 504, 547, 558, 629, 630, 751, 789, 860, 1070, 1098, 1174, 1175, 1229], "minimum": [144, 145, 146, 148, 178, 217, 218, 298, 420, 421, 422, 529, 541, 550, 558, 721, 722, 751, 809, 860, 950, 985, 986, 987, 1087, 1093, 1098, 1229, 1238], "especi": [144, 566, 751, 782, 860, 1106, 1229], "test_unique_xyz": 144, "assert_someth": 144, "punctuat": 144, "test_special_char_colname_init": 144, "inner_dtyp": [145, 148], "select_from": [145, 148], "min_siz": [145, 146, 148, 1238], "max_siz": [145, 146, 148, 1238], "anoth": [145, 169, 179, 185, 298, 362, 370, 481, 502, 519, 522, 562, 751, 788, 839, 860, 921, 930, 983, 990, 1047, 1102, 1123, 1229], "randomli": 145, "innermost": 145, "2x": 145, "lst": 145, "11330": 145, "24030": 145, "116": 145, "zz": [145, 148], "uint8_pair": [145, 1238], "uint": [145, 1238], "zip": [145, 1238], "131": 145, "176": 145, "149": [145, 1238], "include_col": 146, "allow_infin": [146, 148], "allowed_dtyp": [146, 148, 1238], "excluded_dtyp": [146, 148], "describ": [146, 184, 298, 1229], "desir": [146, 504, 1070], "n_chunk": [146, 148, 298, 869, 990, 1229], "randomis": 146, "onto": 146, "pct": 146, "preced": [146, 863], "disallow": [146, 148], "inf": [146, 148, 320, 363, 443, 449, 453, 555, 661, 751, 876, 912, 922, 1003, 1011, 1016, 1075, 1091, 1096, 1216, 1229], "exclud": [146, 148, 186, 298, 353, 356, 447, 751, 789, 860, 1007, 1026, 1229], "usag": [146, 148, 246, 298, 863, 1131, 1229], "deploi": [146, 148], "characterist": [146, 148], "concret": [146, 148], "test_repr": 146, "isinst": [146, 148, 298], "0x11f561580": 146, "0565": 146, "34715": 146, "5844": 146, "33": [146, 216, 298, 579, 751, 808, 860, 1113, 1229], "076854": 146, "3382": 146, "17": [146, 277, 569, 579, 706, 738, 751, 841, 910, 912, 962, 1108, 1229, 1238], "48662": 146, "7540": 146, "836271": 146, "4063": 146, "06": [146, 158, 269, 298, 371, 389, 396, 397, 398, 412, 413, 769, 860, 863, 961, 962, 976], "39092": 146, "1889": 146, "41": [146, 577, 751, 1238], "874455": 146, "15836": 146, "1755e": 146, "575050513": 146, "profil": [147, 149, 772, 860], "balanc": [147, 149, 1238], "set_environ": 147, "polars_hypothesis_profil": [147, 149], "constructor": 148, "max_data_s": 148, "normal": [148, 186, 298, 417, 463, 591, 751, 789, 860, 982, 1030, 1136, 1229], "test_repr_is_valid_str": 148, "experi": 148, "create_list_strategi": [148, 1238], "polars_max_thread": 150, "behind": 150, "lock": 150, "reason": [150, 504, 513, 751], "temporarili": [150, 152, 186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "pyspark": 150, "udf": [150, 155, 209, 223, 279, 284, 298, 313, 515, 551, 673, 716, 751, 811, 843, 848, 860, 870, 1077, 1229], "recommend": [150, 203, 223, 298, 863], "easi": [152, 1238], "restor": 152, "restore_default": 152, "relat": [152, 863], "set_tbl_row": 152, "whatev": 152, "were": [152, 210, 212, 217, 250, 298, 562, 747, 751, 1102, 1229], "enter": 152, "advantag": [152, 223, 298], "set_": 152, "set_verbos": 152, "do_various_th": 152, "cleaner": 152, "breviti": 152, "vein": 152, "durat": [152, 206, 269, 298, 369, 376, 377, 380, 384, 386, 388, 393, 400, 405, 406, 407, 408, 409, 410, 411, 415, 659, 695, 696, 698, 699, 738, 739, 751, 798, 860, 863, 929, 936, 937, 940, 947, 949, 952, 957, 964, 969, 970, 971, 972, 973, 974, 975, 979, 1212, 1229], "set_ascii_t": 152, "write_ascii_frame_to_stdout": 152, "sy": 152, "nan_as_nul": 154, "polarsdatafram": 154, "notimplementederror": 154, "num_row": 154, "get_column": [154, 261, 298], "dtypekind": 154, "inference_s": [155, 209, 298], "256": [155, 209, 298, 1091, 1229], "map_row": [155, 298], "tri": [155, 209, 298], "approxim": [156, 298, 314, 674, 751, 766, 860, 1238], "hyperloglog": [156, 298, 314, 674, 751, 766, 860], "algorithm": [156, 298, 314, 599, 623, 674, 751, 766, 860, 1144, 1168], "cardin": [156, 298, 314, 674, 751, 766, 860], "k": [157, 237, 263, 298, 339, 463, 660, 751, 767, 831, 860, 894, 1030, 1213, 1229], "intoexpr": [157, 185, 186, 187, 188, 189, 190, 234, 240, 241, 244, 248, 263, 273, 274, 277, 298, 312, 334, 337, 338, 443, 447, 474, 475, 484, 493, 494, 495, 496, 547, 562, 582, 584, 585, 594, 599, 623, 628, 629, 630, 636, 637, 670, 672, 678, 680, 681, 682, 683, 685, 686, 689, 690, 693, 697, 704, 718, 722, 727, 730, 733, 735, 751, 767, 788, 789, 790, 791, 792, 793, 816, 818, 819, 822, 826, 831, 837, 838, 841, 860, 889, 892, 893, 1007, 1050, 1102, 1128, 1173, 1174, 1175, 1181, 1182, 1229], "nulls_last": [157, 248, 263, 298, 323, 593, 751, 767, 826, 831, 860, 879, 1229], "smallest": [157, 263, 298, 339, 751, 767, 831, 860, 894, 1229], "largest": [157, 263, 298, 660, 751, 767, 831, 860, 1213, 1229], "wors": [157, 263, 298, 767, 826, 831, 860], "search": [157, 206, 263, 298, 504, 599, 623, 767, 798, 826, 831, 860, 1144, 1168], "top_k": [157, 298, 339, 751, 767, 860, 894, 1229], "columnnameorselector": [158, 165, 167, 215, 222, 224, 237, 257, 265, 266, 267, 298, 769, 777, 778, 807, 832, 833, 860], "strict": [158, 298, 335, 340, 598, 602, 620, 638, 639, 640, 642, 644, 751, 769, 860, 890, 895, 983, 1123, 1143, 1147, 1165, 1183, 1184, 1185, 1187, 1189, 1229], "due": [158, 186, 206, 234, 237, 269, 298, 308, 340, 377, 394, 398, 412, 462, 534, 536, 537, 538, 539, 553, 567, 570, 571, 572, 573, 574, 576, 577, 578, 652, 695, 696, 698, 699, 738, 739, 751, 769, 789, 798, 816, 860, 895, 937, 958, 962, 976, 1229], "overflow": [158, 298, 340, 355, 356, 620, 642, 653, 751, 769, 860, 895, 915, 916, 1165, 1187, 1199, 1229], "2020": [158, 164, 184, 225, 234, 298, 301, 372, 377, 383, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 567, 638, 639, 640, 751, 769, 816, 860, 863, 932, 937, 961, 965, 968, 969, 970, 971, 972, 973, 974, 975, 1183, 1184, 1185], "u8": [158, 257, 258, 267, 298, 562, 668, 751, 769, 860, 863, 1102, 1206, 1229, 1238], "to_dict": [158, 298, 769, 860], "as_seri": [158, 255, 298, 769, 860, 922, 1096, 1229], "tempor": [158, 186, 187, 189, 190, 203, 234, 236, 237, 256, 298, 345, 447, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 751, 763, 769, 789, 790, 792, 793, 816, 860, 863, 906, 1007, 1026, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "greater": [159, 206, 298, 438, 440, 591, 618, 619, 630, 647, 751, 798, 860, 1136, 1163, 1164, 1175, 1192, 1229], "cheap": [159, 160, 241, 274, 298, 770, 771, 819, 838, 860, 905, 909, 1229], "deepcopi": [159, 298, 770, 860, 905, 1229], "appl": [161, 194, 205, 229, 232, 255, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 564, 604, 631, 751, 797, 814, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 1149, 1176], "banana": [161, 255, 281, 283, 285, 286, 287, 288, 289, 290, 291, 298, 564, 604, 631, 751, 845, 847, 849, 850, 851, 852, 853, 854, 855], "orang": [161, 280, 281, 283, 285, 286, 288, 290, 291, 298, 844, 845, 847, 849, 850, 852, 854, 855], "pairwis": [162, 298], "pearson": [162, 298, 463, 591, 683, 751, 1030, 1136, 1229], "correl": [162, 298, 683, 728], "coeffici": [162, 298, 591, 751, 1136, 1229], "corrcoef": [162, 298], "percentil": [164, 298, 923, 1229], "summari": [164, 298, 923, 1229], "deem": [164, 298], "glimps": [164, 192, 298], "median": [164, 224, 298, 428, 572, 751, 839, 860, 923, 1111, 1229], "str2": [164, 298], "usd": [164, 184, 298, 1238], "null_count": [164, 167, 298, 362, 751, 860, 921, 923, 1000, 1229], "266667": [164, 298], "std": [164, 298, 576, 751, 860, 923, 1115, 1229], "101514": [164, 298], "707107": [164, 298, 421, 576, 751, 986, 1229], "more_column": [165, 171, 242, 266, 298, 423, 702, 751, 777, 781, 821, 833, 860], "subset": [167, 220, 265, 298, 778, 832, 860], "preserv": [167, 175, 185, 188, 205, 209, 259, 260, 298, 367, 368, 429, 477, 588, 751, 778, 785, 797, 860, 926, 927, 994, 1043, 1133, 1211, 1229], "behavior": [167, 298, 481, 502, 514, 703, 712, 751, 778, 860, 922, 1047, 1068, 1076, 1096, 1229], "all_horizont": [167, 298, 669, 778, 860], "is_nul": [167, 298, 751, 778, 860, 1229], "null_equ": [169, 179, 298, 983, 1123, 1229], "sizeunit": [170, 298, 984, 1229], "heap": [170, 298, 751, 984, 1229], "its": [170, 298, 371, 398, 412, 594, 741, 751, 900, 931, 962, 976, 984, 1229], "bitmap": [170, 298, 984, 1229], "structarrai": [170, 298, 984, 1229], "constant": [170, 234, 298, 369, 426, 751, 816, 860, 929, 984, 991, 1229], "unchang": [170, 298, 514, 562, 659, 751, 802, 803, 843, 848, 860, 984, 1076, 1102, 1212, 1229], "capac": [170, 246, 298, 984, 1131, 1229], "ffi": [170, 298, 984, 1229], "kb": [170, 298, 984, 1229], "mb": [170, 298, 984, 1229], "gb": [170, 298, 984, 1229], "revers": [170, 298, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 512, 535, 536, 537, 553, 652, 751, 860, 913, 914, 915, 916, 917, 918, 919, 920, 1229], "1_000_000": [170, 298, 984, 1229], "25888898": [170, 298], "689577102661133": [170, 298], "long": [171, 215, 267, 298, 781, 807, 860], "letter": [171, 282, 292, 298, 423, 599, 607, 623, 702, 751, 781, 846, 856, 860, 863, 1144, 1152, 1168], "onlin": [172, 298, 990, 1229], "rerun": [172, 298, 990, 1229], "conveni": [172, 298, 869, 990, 1229], "Not": [173, 298, 456, 458, 751, 783, 860], "fillnullstrategi": [174, 298, 428, 751, 784, 860, 993, 1229], "matches_supertyp": [174, 298, 784, 860], "forward": [174, 206, 244, 298, 390, 428, 434, 497, 584, 751, 784, 798, 822, 860, 954, 993, 1063, 1128, 1229], "consecut": [174, 298, 333, 428, 434, 597, 751, 784, 860, 993, 1142, 1229], "fill_nan": [174, 298, 751, 860, 1229], "intoexprcolumn": [175, 298, 339, 345, 346, 347, 429, 492, 497, 548, 581, 584, 633, 634, 635, 660, 675, 695, 696, 698, 699, 710, 711, 738, 739, 741, 751, 785, 822, 860, 894, 906, 907, 908, 1058, 1063, 1091, 1178, 1179, 1180, 1213, 1229], "constraint": [175, 298, 429, 462, 534, 536, 537, 538, 539, 553, 652, 741, 751, 785, 860], "behav": [175, 298, 429, 515, 634, 635, 751, 785, 860], "eq": [175, 298, 419, 429, 751, 785, 860, 1229], "implicitli": [175, 298, 429, 741, 751, 785, 860], "is_in": [175, 298, 751, 1229], "get_column_index": [176, 298], "reduct": [178, 298], "supercast": [178, 298], "parent": [178, 298], "rule": [178, 298, 599, 623, 1144, 1168], "arithmet": [178, 298], "zip_with": [178, 298, 1229], "foo11": [178, 298], "bar22": [178, 298], "nth": [180, 253, 298, 437, 630, 656, 751, 787, 830, 860, 998, 1175, 1202, 1229], "th": [180, 253, 298, 437, 493, 591, 656, 751, 787, 830, 860, 998, 1059, 1136, 1202, 1229], "retriev": [181, 298, 470, 471, 648, 1036, 1037, 1193], "max_items_per_column": [184, 298], "max_colname_length": [184, 298], "return_as_str": [184, 298, 526], "preview": [184, 298], "few": [184, 298], "exce": [184, 298], "ellipsi": [184, 298], "head": [184, 208, 252, 298, 312, 467, 751, 801, 860, 1032, 1200, 1229], "tail": [184, 192, 298, 312, 591, 751, 860, 1002, 1136, 1229], "more_bi": [185, 188, 222, 248, 298, 594, 751, 788, 791, 826, 860], "groupbi": [185, 224, 298, 313, 515, 673, 716, 751, 860], "consist": [185, 188, 222, 298, 638, 788, 791, 860, 869, 990, 1183, 1229], "regardless": [185, 188, 298, 611, 741, 1156], "agg": [185, 186, 189, 224, 234, 298, 307, 429, 431, 436, 439, 515, 593, 594, 667, 716, 751, 772, 773, 780, 782, 788, 789, 790, 792, 793, 812, 816, 820, 824, 860, 863], "Or": [185, 186, 206, 234, 248, 269, 277, 298, 547, 567, 594, 695, 696, 698, 699, 738, 739, 741, 751, 788, 789, 798, 816, 826, 841, 860], "index_column": [186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "timedelta": [186, 187, 189, 190, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 798, 816, 860, 863, 943, 945, 950, 958, 962, 976, 1086, 1087, 1229], "period": [186, 187, 189, 190, 234, 298, 398, 412, 420, 421, 422, 548, 567, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 816, 860, 962, 976, 985, 986, 987, 1091, 1229], "include_boundari": [186, 189, 298, 789, 792, 860], "closedinterv": [186, 187, 189, 190, 234, 298, 447, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 816, 860, 1007, 1229], "label": [186, 298, 363, 555, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 751, 789, 812, 860, 922, 1096, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "start_bi": [186, 189, 298, 789, 792, 860], "startbi": [186, 189, 298, 789, 792, 860], "check_sort": [186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "dynamicgroupbi": [186, 189, 298], "member": [186, 298, 789, 860, 1015, 1229], "descript": [186, 298, 789, 860], "ascend": [186, 187, 189, 190, 234, 298, 567, 571, 572, 573, 574, 576, 578, 751, 789, 790, 792, 793, 816, 860], "dynam": [186, 189, 298, 504, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 751, 789, 792, 860, 1070, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "matter": [186, 187, 189, 190, 203, 234, 236, 237, 256, 298, 567, 634, 635, 751, 789, 790, 792, 793, 816, 860], "interv": [186, 187, 189, 190, 234, 269, 298, 363, 398, 412, 443, 447, 555, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 790, 792, 793, 816, 860, 922, 935, 938, 939, 946, 948, 951, 953, 956, 959, 960, 962, 967, 976, 977, 1003, 1007, 1096, 1229], "_lower_boundari": [186, 298, 789, 860], "_upper_boundari": [186, 298, 789, 860], "harder": [186, 189, 298, 789, 792, 860], "inclus": [186, 187, 189, 190, 234, 298, 447, 567, 570, 571, 572, 573, 574, 576, 577, 578, 628, 629, 675, 695, 696, 698, 699, 710, 711, 738, 739, 751, 789, 790, 792, 793, 816, 860, 1007, 1173, 1174, 1229], "datapoint": [186, 189, 298, 789, 792, 860], "boundari": [186, 298, 345, 346, 347, 443, 751, 789, 860, 906, 907, 908, 1003, 1229], "mondai": [186, 189, 298, 412, 414, 789, 792, 860, 976, 978], "tuesdai": [186, 189, 298, 789, 792, 860], "wednesdai": [186, 189, 298, 789, 792, 860], "thursdai": [186, 189, 298, 789, 792, 860], "fridai": [186, 189, 298, 789, 792, 860], "saturdai": [186, 189, 298, 789, 792, 860], "sundai": [186, 189, 298, 414, 789, 792, 860, 978], "earliest": [186, 189, 298, 397, 398, 412, 638, 640, 697, 789, 792, 860, 961, 962, 976, 1183, 1185], "weekli": [186, 189, 298, 412, 789, 792, 860, 976], "week": [186, 189, 206, 234, 269, 298, 394, 398, 412, 414, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 792, 798, 816, 860, 863, 958, 962, 976, 978], "sorted": [186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "verifi": [186, 187, 189, 190, 234, 298, 567, 751, 789, 790, 792, 793, 816, 860], "incorrectli": [186, 187, 189, 190, 234, 298, 504, 567, 751, 789, 790, 792, 793, 816, 860], "incorrect": [186, 187, 189, 190, 234, 298, 415, 513, 567, 583, 751, 789, 790, 792, 793, 816, 843, 848, 860, 979, 1126, 1229], "roll": [186, 187, 190, 298, 390, 391, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 681, 728, 729, 751, 789, 790, 793, 860, 954, 955, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1229], "re": [186, 202, 259, 298, 390, 391, 789, 860, 954, 955, 1237], "come": [186, 298, 390, 391, 463, 504, 751, 764, 789, 859, 860, 954, 955, 1030, 1229], "1d": [186, 206, 234, 269, 298, 370, 394, 398, 406, 409, 412, 415, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 713, 738, 739, 751, 789, 798, 816, 860, 863, 930, 938, 945, 958, 962, 967, 970, 973, 976], "set_index": [186, 298, 789, 860], "resampl": [186, 298, 789, 860], "reset_index": [186, 298, 789, 860], "though": [186, 298, 747, 789, 860], "unlik": [186, 298, 789, 860], "evenli": [186, 298, 789, 860], "upsampl": [186, 298, 789, 860], "1n": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "nanosecond": [186, 206, 234, 269, 298, 394, 398, 399, 410, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 958, 962, 963, 974, 976], "1u": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "microsecond": [186, 203, 206, 234, 236, 237, 256, 269, 298, 394, 398, 407, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 697, 698, 699, 700, 737, 738, 739, 751, 789, 798, 812, 816, 860, 863, 958, 962, 971, 976], "1m": [186, 206, 234, 269, 298, 383, 394, 398, 407, 408, 410, 411, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 971, 972, 974, 975, 976], "millisecond": [186, 206, 234, 269, 298, 394, 398, 408, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 863, 958, 962, 972, 976], "minut": [186, 206, 234, 269, 298, 394, 398, 409, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 697, 698, 699, 700, 737, 738, 739, 751, 789, 798, 816, 860, 863, 958, 962, 973, 976], "1h": [186, 206, 234, 269, 298, 377, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 937, 939, 958, 962, 976], "hour": [186, 206, 234, 269, 298, 394, 398, 406, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 697, 698, 699, 700, 737, 738, 739, 751, 789, 798, 816, 860, 863, 958, 962, 970, 976], "1w": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "1mo": [186, 206, 234, 269, 298, 372, 390, 391, 394, 397, 398, 405, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 932, 953, 954, 955, 958, 959, 960, 961, 962, 969, 976, 977], "month": [186, 206, 234, 269, 298, 375, 390, 391, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 694, 695, 696, 697, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 935, 954, 955, 958, 962, 976], "1q": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "quarter": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "1y": [186, 206, 234, 269, 298, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 958, 962, 976], "1i": [186, 206, 234, 269, 298, 394, 567, 570, 571, 572, 573, 574, 576, 577, 578, 751, 789, 798, 816, 860, 958], "3d12h4m25": [186, 206, 234, 269, 298, 398, 412, 567, 695, 696, 698, 699, 738, 739, 751, 789, 798, 816, 860, 962, 976], "correspond": [186, 206, 234, 259, 269, 298, 382, 394, 398, 412, 515, 558, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 738, 739, 751, 772, 789, 798, 816, 860, 942, 958, 962, 976, 1098, 1106, 1229], "daylight": [186, 206, 234, 269, 298, 369, 377, 394, 398, 412, 567, 570, 571, 572, 573, 574, 576, 577, 578, 695, 696, 698, 699, 700, 738, 739, 751, 789, 798, 816, 860, 937, 958, 962, 976], "10i": [186, 234, 298, 567, 751, 789, 816, 860], "datetime_rang": [186, 298, 370, 372, 383, 390, 391, 394, 397, 398, 405, 406, 407, 408, 409, 410, 411, 412, 415, 570, 571, 573, 576, 577, 578, 695, 751, 789, 860, 929, 930, 932, 937, 938, 939, 945, 946, 948, 951, 954, 955, 956, 958, 961, 962, 967, 969, 970, 971, 972, 973, 974, 975, 976], "30m": [186, 298, 398, 412, 789, 860, 962, 976], "lower_bound": [186, 298, 345, 347, 447, 751, 789, 860, 906, 908, 1007, 1216, 1229], "upper_bound": [186, 298, 345, 346, 447, 504, 751, 789, 860, 906, 907, 1007, 1075, 1229], "bys": [186, 298, 789, 860], "int_rang": [186, 267, 284, 298, 675, 789, 803, 848, 860], "2i": [186, 298, 789, 860], "3i": [186, 298, 789, 860], "a_agg_list": [186, 298, 789, 860], "rollinggroupbi": [187, 190, 234, 298], "group_bi": [188, 220, 224, 297, 298, 307, 429, 431, 436, 439, 513, 515, 593, 594, 667, 716, 751, 772, 773, 780, 782, 791, 812, 824, 859, 860, 863], "group_by_dynam": [189, 234, 298, 792, 816, 860], "_lower_bound": [189, 298, 792, 860], "_upper_bound": [189, 298, 792, 860], "seed_1": [191, 298, 441, 751, 1001, 1229], "seed_2": [191, 298, 441, 751, 1001, 1229], "seed_3": [191, 298, 441, 751, 1001, 1229], "hash": [191, 298, 751, 1229], "Its": [191, 298, 441, 751, 1001, 1229], "u64": [191, 298, 441, 560, 751, 812, 860, 1001, 1229], "10783150408545073287": [191, 298], "1438741209321515184": [191, 298], "10047419486152048166": [191, 298], "2047317070637311557": [191, 298], "ab": [192, 208, 252, 273, 298, 648, 650, 751, 837, 860, 1002, 1032, 1200, 1229], "grown": [194, 298], "insert_column": [195, 298], "intermedi": [197, 298, 796, 860, 1238], "linear": [197, 227, 290, 298, 446, 472, 518, 556, 574, 681, 682, 725, 751, 796, 813, 854, 860, 1006, 1038, 1097, 1113, 1229], "666667": [197, 270, 286, 298, 420, 751, 796, 835, 850, 860, 985, 1229], "333333": [197, 298, 462, 534, 751, 796, 860, 1091, 1117, 1229], "mask": [198, 200, 298, 335, 448, 450, 451, 454, 455, 461, 549, 550, 598, 602, 751, 890, 994, 1000, 1007, 1009, 1012, 1013, 1018, 1019, 1027, 1092, 1093, 1124, 1143, 1147, 1220, 1229], "visual": [198, 200, 298], "scalar": [201, 209, 235, 298, 582, 673, 713, 716, 751, 1029, 1122, 1229], "With": [201, 244, 298, 497, 570, 571, 572, 573, 574, 576, 577, 578, 584, 751, 822, 860, 1029, 1063, 1128, 1229], "buffer_s": [203, 298], "fit": [203, 246, 267, 298, 586, 727, 751, 1130, 1131, 1229], "signific": [203, 209, 298, 313, 515, 580, 751, 1077, 1119, 1229], "4x": [203, 298], "materialis": [203, 204, 235, 236, 237, 298], "rows_by_kei": [203, 236, 298], "iter_row": [204, 235, 236, 237, 298], "17_500": [204, 298], "klmnoopqrstuvwxyz": [204, 298], "__name__": [204, 298], "7500": [204, 298], "15_000": [204, 298], "record_batch": [204, 298], "to_arrow": [204, 298, 1229], "to_batch": [204, 298], "date32": [204, 298], "large_str": [204, 254, 260, 298], "15000": [204, 298], "2500": [204, 298], "left_on": [205, 206, 268, 298, 797, 798, 834, 860], "right_on": [205, 206, 268, 298, 797, 798, 834, 860], "suffix": [205, 206, 240, 273, 277, 298, 308, 337, 456, 458, 459, 460, 512, 535, 536, 538, 539, 547, 553, 564, 604, 634, 637, 751, 797, 798, 818, 837, 839, 841, 860, 863, 892, 1149, 1182], "_right": [205, 206, 298, 797, 798, 860], "joinvalid": [205, 298, 797, 860], "join_nul": [205, 298, 797, 860], "semi": [205, 298, 797, 860], "anti": [205, 298, 797, 848, 860, 1121, 1124, 1229], "cross": [205, 298, 797, 860], "outer_coalesc": [205, 298, 797, 860], "coalesc": [205, 268, 298, 638, 797, 834, 860, 1183], "cartisian": [205, 298, 797, 860], "many_to_mani": [205, 298, 797, 860], "one_to_on": [205, 298, 797, 860], "one_to_mani": [205, 298, 797, 860], "many_to_on": [205, 298, 797, 860], "join_asof": [205, 298, 797, 860], "other_df": [205, 298], "ham_right": [205, 298, 797, 860], "by_left": [206, 298, 798, 860], "by_right": [206, 298, 798, 860], "asofjoinstrategi": [206, 298, 798, 860], "allow_parallel": [206, 298, 797, 798, 860], "force_parallel": [206, 298, 797, 798, 860], "asof": [206, 298, 798, 860], "rather": [206, 298, 526, 555, 566, 647, 751, 798, 860, 1096, 1106, 1192, 1229], "asof_join": [206, 298], "distanc": [206, 298, 443, 751, 798, 860, 1003, 1229], "plan": [206, 207, 298, 768, 772, 776, 780, 797, 798, 820, 824, 860], "forc": [206, 209, 284, 298, 504, 797, 798, 848, 860, 1077, 1229], "gdp": [206, 298, 798, 860], "2016": [206, 298, 798, 860], "2017": [206, 298, 798, 860], "2018": [206, 298, 397, 798, 860, 961], "2019": [206, 298, 798, 860], "jan": [206, 298, 798, 860], "1st": [206, 298, 798, 860], "4164": [206, 298, 798, 860], "4411": [206, 298, 798, 860], "4566": [206, 298, 798, 860], "4696": [206, 298, 798, 860], "set_sort": [206, 234, 269, 298, 567, 751, 798, 816, 860, 1229], "popul": [206, 298, 798, 860], "12th": [206, 298, 798, 860], "82": [206, 298, 798, 860], "66": [206, 268, 298, 577, 668, 751, 798, 834, 860, 1113, 1229], "83": [206, 298, 798, 860], "52": [206, 273, 298, 413, 579, 751, 798, 837, 860], "request": [207, 298], "describe_plan": [207, 298], "unoptim": [207, 298], "describe_optimized_plan": [207, 298], "show_graph": [207, 298, 860], "un": [207, 298], "graphviz": [207, 298, 824, 860], "much": [209, 267, 284, 298, 362, 481, 502, 515, 612, 613, 716, 751, 848, 921, 1047, 1068, 1077, 1157, 1158, 1229], "intens": [209, 284, 298, 547, 751, 1077, 1229], "materi": [209, 284, 298, 772, 812, 848, 860, 863, 1077, 1229], "parallelis": [209, 284, 298, 1077, 1229], "achiev": [209, 284, 298, 515, 613, 751, 922, 1077, 1096, 1158, 1229], "best": [209, 284, 298, 515, 751, 1077, 1229], "black": [209, 298, 334, 336, 337, 338], "arbitrarili": [209, 298], "rearrang": [209, 298], "transform": [209, 298, 513, 643, 645, 646, 751], "lru_cach": [209, 298, 515, 751, 1077, 1229], "column_1": [209, 264, 298], "axi": [210, 212, 215, 217, 250, 298, 676, 677, 807, 860], "max_horizont": [210, 298, 717], "null_strategi": [212, 250, 298], "nullstrategi": [212, 250, 298], "mean_horizont": [212, 298], "propag": [212, 250, 298, 419, 540, 541, 543, 597, 751, 1086, 1087, 1142, 1229], "spam": [212, 298, 607, 1152], "ignore_nul": [213, 251, 298, 309, 311, 420, 421, 422, 597, 669, 671, 751, 867, 868, 985, 986, 987, 1142, 1219, 1229], "id_var": [215, 298, 807, 860], "value_var": [215, 298, 807, 860], "variable_nam": [215, 298, 807, 860], "value_nam": [215, 298, 807, 860], "unpivot": [215, 298, 807, 860], "massag": [215, 298, 807, 860], "measur": [215, 298, 807, 860], "caller": [216, 298, 504, 803, 808, 843, 848, 860], "respons": [216, 298, 808, 860], "steve": [216, 298, 808, 860], "elis": [216, 298, 808, 860], "bob": [216, 298, 808, 860], "ag": [216, 298, 808, 860], "anna": [216, 298, 808, 860], "megan": [216, 298, 808, 860], "thoma": [216, 298, 808, 860], "21": [216, 250, 298, 570, 571, 573, 576, 577, 578, 706, 751, 808, 860, 863], "min_horizont": [217, 298, 721, 730], "what": [220, 225, 298, 301, 513, 599, 623, 751, 1144, 1168, 1219, 1229, 1233], "pack": [220, 298], "expr_unique_subset": [220, 298], "df_nuniqu": [220, 298], "df_agg_nuniqu": [220, 298], "include_kei": [222, 237, 298], "offer": [223, 298, 551, 751, 811, 860], "fulli": [223, 238, 298], "cast_str_to_int": [223, 298, 811, 860], "col_nam": [223, 298, 811, 860], "tdf": [223, 298, 811, 860], "aggregate_funct": [224, 298], "pivotagg": [224, 298], "sort_column": [224, 298], "section": [224, 298, 598, 606, 607, 621, 695, 696, 698, 699, 738, 739, 1143, 1151, 1152, 1166], "predefin": [224, 298], "predict": [224, 228, 269, 298], "transpos": [224, 298], "discoveri": [224, 298], "col1": [224, 264, 298, 860, 1238], "col2": [224, 264, 298, 860, 1238], "col3": [224, 298, 1238], "tanh": [224, 298, 751, 1229], "998347": [224, 298], "964028": [224, 298], "999954": [224, 298], "unique_column_valu": [224, 298], "defer": [225, 298, 301, 1233], "galleri": [225, 298, 301, 1233], "scatter": [225, 298, 301, 1125, 1229], "speci": [225, 298, 301], "setosa": [225, 298, 301], "versicolor": [225, 298, 301], "stock_1": [225, 298, 301], "stock_2": [225, 298, 301], "interpol": [227, 290, 298, 428, 518, 556, 574, 725, 751, 813, 854, 860, 1097, 1113, 1229], "rollinginterpolationmethod": [227, 290, 298, 556, 574, 725, 751, 813, 854, 860, 1097, 1113, 1229], "midpoint": [227, 290, 298, 556, 574, 725, 751, 813, 854, 860, 1097, 1113, 1229], "replace_column": [231, 298], "t_0": [234, 298, 567, 570, 571, 572, 573, 574, 576, 577, 578, 751, 816, 860], "t_1": [234, 298, 567, 570, 571, 572, 573, 574, 576, 577, 578, 751, 816, 860], "t_n": [234, 298, 567, 570, 571, 572, 573, 574, 576, 577, 578, 751, 816, 860], "43": [234, 298, 356, 567, 577, 751, 816, 860], "strptime": [234, 298, 397, 567, 751, 816, 860, 961], "2d": [234, 259, 298, 394, 567, 713, 751, 816, 860, 929, 935], "sum_a": [234, 298, 567, 751, 816, 860], "min_a": [234, 298, 567, 751, 816, 860], "max_a": [234, 298, 567, 751, 816, 860], "by_pred": [235, 298], "accord": [235, 298, 514, 555, 695, 696, 698, 699, 738, 739, 751, 942, 1096, 1229], "mutual": [235, 298], "exclus": [235, 298, 668, 675, 710, 711, 751], "clariti": [235, 298], "toomanyrowsreturnederror": [235, 298, 763], "norowsreturnederror": [235, 298, 763], "inherit": [235, 298], "rowserror": [235, 298, 763], "high": [237, 298, 555, 751, 1096, 1229], "cost": [237, 298], "reoconstruct": [237, 298], "defaultdict": [237, 298], "assum": [237, 298, 802, 803, 843, 848, 860], "with_replac": [238, 298, 492, 581, 751, 1058, 1120, 1229], "ordereddict": [239, 298, 733, 817, 860], "named_expr": [240, 241, 273, 274, 298, 730, 733, 818, 819, 837, 838, 860], "threshold": [240, 298, 818, 860], "set_auto_structifi": [240, 273, 298, 818, 837, 860], "auto_structifi": [240, 273, 298, 818, 837, 860], "is_odd": [240, 298, 818, 860], "_is_odd": [240, 298, 818, 860], "sequenti": [241, 274, 298, 819, 838, 860], "fill_valu": [244, 245, 267, 298, 584, 585, 751, 822, 823, 860, 1128, 1129, 1229], "opposit": [244, 298, 497, 584, 751, 822, 860, 1063, 1128, 1229], "lag": [244, 298, 497, 584, 681, 751, 822, 860, 1063, 1128, 1229], "shift": [245, 298, 365, 476, 548, 585, 681, 751, 823, 860, 924, 1042, 1091, 1129, 1229], "shrink": [246, 298, 586, 751, 1130, 1131, 1229], "hold": [246, 298], "ddof": [249, 270, 298, 576, 578, 596, 666, 683, 685, 728, 729, 732, 740, 751, 827, 835, 860, 1115, 1117, 1140, 1218, 1229], "deviat": [249, 298, 421, 576, 596, 732, 751, 827, 860, 986, 1140, 1229], "degre": [249, 270, 298, 557, 576, 578, 596, 666, 677, 683, 685, 728, 729, 732, 740, 751, 827, 835, 860, 1115, 1117, 1140, 1218, 1229], "freedom": [249, 270, 298, 576, 578, 596, 666, 683, 685, 728, 729, 732, 740, 751, 827, 835, 860, 1115, 1117, 1140, 1218, 1229], "divisor": [249, 270, 298, 576, 578, 596, 666, 683, 685, 728, 729, 732, 740, 751, 827, 835, 860, 1115, 1117, 1140, 1218, 1229], "816497": [249, 298], "gather_everi": [253, 298, 656, 751, 830, 860, 1202, 1229], "mostli": [254, 298, 429, 751], "categoricaltyp": [254, 298], "fruit": [255, 298, 564, 604, 631, 751, 1149, 1176], "car": [255, 298, 564, 751], "beetl": [255, 298, 564, 751], "audi": [255, 298, 564, 751], "28": [255, 298, 306, 397, 415, 751, 961, 979, 1238], "300": [255, 298, 1109, 1110, 1112, 1229], "drop_first": [257, 298], "dummi": [257, 298, 1206, 1229], "foo_1": [257, 298], "foo_2": [257, 298], "bar_3": [257, 298], "bar_4": [257, 298], "ham_a": [257, 298], "ham_b": [257, 298], "instantiat": [258, 298, 1208, 1229], "from_repr": [258, 298, 1208, 1229], "df_from_str_repr": [258, 298], "eval": [258, 298, 701, 1208, 1229], "indexord": [259, 298], "fortran": [259, 298], "downstream": [259, 298, 583, 751, 1126, 1229], "applic": [259, 298, 515, 570, 571, 572, 573, 574, 576, 577, 578, 751], "prevent": [259, 298, 308, 355, 356, 462, 534, 653, 751, 860, 915, 916, 1199, 1229], "reshap": [259, 298, 479, 751, 1045, 1229], "ll": [259, 298], "u1": [259, 298], "f4": [259, 298], "view": [259, 298, 515, 751, 1210, 1229], "recarrai": [259, 298], "rec": [259, 298], "use_pyarrow_extension_arrai": [260, 298, 1211, 1229], "extens": [260, 298, 1211, 1229], "sent": [260, 298, 1210, 1211, 1229], "pandas_df1": [260, 298], "pandas_df2": [260, 298], "pandas_df2_pa": [260, 298], "na": [260, 298, 631, 1211, 1229], "four": [262, 298], "five": [262, 298, 1238], "bottom_k": [263, 298, 660, 751, 831, 860, 1213, 1229], "header_nam": [264, 298], "column_nam": [264, 298], "perhap": [264, 298], "column_2": [264, 298], "name_gener": [264, 298], "base_nam": [264, 298], "my_column_": [264, 298], "my_column_0": [264, 298], "my_column_1": [264, 298], "my_column_2": [264, 298], "new_id": [264, 298], "uniquekeepstrategi": [265, 298, 832, 860], "kept": [265, 298, 832, 860], "decompos": [266, 298, 833, 860], "t_a": [266, 298, 833, 860], "t_b": [266, 298, 833, 860], "t_c": [266, 298, 833, 860], "t_d": [266, 298, 833, 860], "womp": [266, 298, 833, 860], "t_": [266, 298, 833, 860], "t_struct": [266, 298, 833, 860], "step": [267, 298, 675, 710, 711], "unstackdirect": [267, 298], "pivot": [267, 298], "phase": [267, 298], "subject": [267, 298], "ascii_uppercas": [267, 298], "h": [267, 298, 306, 401, 404, 586, 638, 640, 644, 751, 1183, 1185, 1189], "x_0": [267, 298, 420, 421, 422, 751, 985, 986, 987, 1229], "x_1": [267, 298], "y_0": [267, 298, 420, 421, 422, 751, 985, 986, 987, 1229], "y_1": [267, 298], "z_0": [267, 298], "z_1": [267, 298], "include_nul": [268, 298, 834, 860], "syntact": [268, 298, 562, 669, 671, 684, 688, 703, 707, 708, 709, 712, 717, 719, 720, 721, 723, 724, 725, 730, 732, 734, 736, 740, 742, 751, 834, 860, 1102, 1139, 1229], "sugar": [268, 298, 562, 669, 671, 684, 688, 703, 707, 708, 709, 712, 717, 719, 720, 721, 723, 724, 725, 730, 732, 734, 736, 740, 742, 751, 834, 860, 1102, 1139, 1229], "400": [268, 298, 834, 860, 1109, 1110, 1112, 1229], "600": [268, 298, 834, 860, 863], "700": [268, 298, 834, 860], "new_df": [268, 298, 834, 860], "time_column": [269, 298], "frequenc": [269, 298], "date_rang": [269, 298, 375, 378, 395, 403, 414, 935, 953, 959, 960, 977, 978], "forward_fil": [269, 298, 353, 356, 751], "varianc": [270, 298, 422, 463, 578, 666, 740, 751, 835, 860, 987, 1030, 1117, 1218, 1229], "grow": [271, 298], "not_": [273, 298, 457, 751, 837, 860, 1229], "not_c": [273, 298, 837, 860], "diff": [273, 298, 405, 406, 407, 408, 409, 410, 411, 493, 751, 837, 860, 969, 970, 971, 972, 973, 974, 975, 1059, 1229], "_diff": [273, 298, 837, 860], "row_nr": [275, 298, 570, 571, 573, 576, 577, 578, 751, 840, 860, 1121, 1229], "named_agg": [277, 841], "_sum": [277, 841], "_mean_squar": [277, 841], "b_sum": [277, 841], "c_mean_squar": [277, 841], "sub": [279, 284, 328, 329, 330, 751, 884, 885, 886], "map_group": [279, 673, 843], "toward": [280, 466, 486, 684, 751, 844, 1031, 1052, 1229], "nr": [282, 292, 846, 856], "triangl": [284, 848], "group_df": [284, 848], "maxim": [285, 321, 751, 849, 877, 1229], "833333": [286, 850], "minim": [288, 322, 471, 586, 594, 751, 852, 878, 1037, 1081, 1130, 1229], "overview": [298, 751, 763, 860, 1229, 1238], "frameinittyp": [298, 860], "entri": [298, 860, 1237], "mydatafram": 298, "df4": 298, "df5": 298, "df6": 298, "approx_n_uniqu": [298, 751, 860], "corr": 298, "drop_in_plac": 298, "drop_nul": [298, 367, 751, 860, 926, 1229], "estimated_s": [298, 1229], "explod": [298, 431, 547, 563, 751, 860, 1103, 1229], "find_idx_by_nam": 298, "fold": [298, 524, 680, 686, 687, 690, 691, 726], "frame_equ": 298, "group_by_rol": [298, 860], "groupby_dynam": [298, 860], "groupby_rol": [298, 860], "hash_row": 298, "hstack": 298, "insert_at_idx": 298, "is_dupl": [298, 751, 1229], "is_empti": [298, 1229], "is_uniqu": [298, 751, 1229], "iter_column": 298, "iter_slic": 298, "melt": [298, 860], "merge_sort": [298, 860], "n_uniqu": [298, 751, 1229], "pipe": [298, 751, 860], "plot": [298, 812, 824, 860], "quantil": [298, 555, 574, 751, 860, 1096, 1113, 1229], "replace_at_idx": 298, "select_seq": [298, 860], "shift_and_fil": [298, 751, 860, 1229], "shrink_to_fit": [298, 1229], "take_everi": [298, 751, 860, 1229], "to_dummi": [298, 1229], "to_numpi": [298, 513, 751, 1229], "to_panda": [298, 1229], "to_struct": [298, 607], "unnest": [298, 363, 555, 565, 607, 608, 629, 630, 650, 751, 860, 922, 1070, 1096, 1105, 1174, 1175, 1229], "unstack": 298, "with_columns_seq": [298, 860], "write_avro": 298, "write_databas": 298, "write_delta": 298, "write_excel": 298, "write_ipc_stream": 298, "write_json": 298, "write_parquet": 298, "cum_prod": [306, 360, 751, 919, 1229], "ghi": [306, 607, 751, 863, 1152], "94": [307, 751], "to_uppercas": [308, 538, 608, 751], "confus": [309, 456, 458, 623, 751], "kleen": [309, 311, 669, 671, 751, 867, 868, 1229], "bitwis": [310, 546, 668, 669, 670, 671, 672, 751], "upcast": [312, 751], "skip_nul": [313, 515, 751, 870, 1077, 1229], "pass_nam": [313, 515, 751], "mapelementsstrategi": [313, 515, 751], "thread_loc": [313, 515, 751], "map_el": [313, 513, 668, 751, 870, 1229], "unknown": [313, 515, 606, 713, 751, 1151], "stage": [313, 751], "code": [313, 334, 336, 337, 338, 515, 583, 751, 782, 800, 860, 1126, 1229], "gil": [313, 515, 751], "invers": [315, 316, 317, 318, 319, 320, 751, 871, 872, 873, 874, 875, 876, 1229], "cosin": [315, 316, 348, 349, 513, 751, 871, 872, 910, 911, 1229], "570796": [315, 317, 751, 871, 873, 1229], "hyperbol": [316, 318, 320, 349, 590, 658, 751, 872, 874, 876, 911, 1135, 1204, 1229], "sine": [317, 318, 513, 589, 590, 751, 873, 874, 1134, 1135, 1229], "881374": [318, 751, 874, 1229], "tangent": [319, 320, 657, 658, 751, 875, 876, 1203, 1204, 1229], "785398": [319, 676, 677, 751, 875, 1229], "arg_wher": [324, 751], "subarrai": [326, 327, 882, 883], "i8": [331, 375, 379, 387, 389, 395, 396, 399, 413, 414, 503, 586, 724, 727, 742, 751, 887, 924, 935, 939, 951, 953, 960, 963, 977, 978, 1069, 1104, 1216, 1229], "seen": [333, 434, 751], "substr": [334, 337, 338, 598, 604, 621, 622, 628, 629, 630, 631, 863, 889, 892, 893, 1143, 1149, 1166, 1167, 1173, 1174, 1175, 1176], "ends_with": [334, 338, 598, 631, 863, 1176], "yellow": [334, 336, 337, 338], "x00": [334, 336, 337, 338], "xff": [334, 336, 337, 338], "contains_with_lit": 334, "contains_with_expr": 334, "transferencod": [335, 336, 602, 603, 890, 891, 1147, 1148], "hex": [335, 336, 602, 603, 642, 890, 891, 1147, 1148, 1187], "base64": [335, 336, 602, 603, 890, 891, 1147, 1148], "code_encoded_hex": 336, "000000": 336, "ffff00": 336, "0000ff": 336, "anywher": [337, 338, 638, 639, 640, 1183, 1184, 1185], "ends_with_lit": 337, "ends_with_expr": 337, "starts_with_lit": 338, "starts_with_expr": 338, "complex": [339, 362, 660, 751, 894, 921, 1213, 1229], "frac": [339, 420, 421, 422, 591, 660, 751, 894, 985, 986, 987, 1136, 1213, 1229], "to_fram": [341, 378, 398, 403, 412, 638, 922, 1096, 1121, 1124, 1174, 1175, 1183, 1229], "259921": [343, 751, 902, 1229], "587401": [343, 751], "numericliter": [345, 346, 347, 751, 906, 907, 908, 1229], "temporalliter": [345, 346, 347, 751, 906, 907, 908, 1229], "outsid": [345, 751, 906, 1229], "clip": [346, 347, 751, 907, 908, 1229], "543081": [349, 751, 911, 1229], "cotang": [350, 751, 912, 1229], "cumul": [352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 686, 687, 688, 689, 690, 691, 692, 693, 751, 913, 914, 915, 916, 917, 918, 919, 920, 1229], "cum_count_revers": [352, 751], "cum_max_revers": [353, 751], "cum_max_all_fil": [353, 751], "cum_min_revers": [354, 751], "cum_prod_revers": [355, 751], "cum_sum_revers": [356, 751], "value_cum_sum": [356, 751], "value_cum_sum_all_fil": [356, 751], "cum_count": [357, 751], "cum_max": [358, 751, 917, 1229], "cum_min": [359, 751, 918, 1229], "cum_sum": [361, 445, 651, 689, 692, 751, 795, 860, 920, 1029, 1229], "min_period": [362, 420, 421, 422, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 728, 729, 751, 921, 985, 986, 987, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "slide": [362, 751, 921, 1229], "slot": [362, 365, 476, 751, 921, 924, 1042, 1229], "realli": [362, 599, 623, 751, 921, 1144, 1168, 1229], "visit": [362, 751, 921, 1229], "left_clos": [363, 555, 751, 922, 1096, 1229], "include_break": [363, 555, 751, 922, 1096, 1229], "bin": [363, 443, 555, 642, 668, 744, 751, 922, 1003, 1096, 1187, 1223, 1229], "discret": [363, 365, 417, 443, 476, 493, 555, 751, 922, 924, 982, 1003, 1042, 1059, 1096, 1229], "plu": [363, 508, 751, 922, 1074, 1096, 1229], "endpoint": [363, 555, 570, 571, 572, 573, 574, 576, 577, 578, 751, 922, 1096, 1229], "observ": [363, 420, 421, 422, 555, 751, 922, 985, 986, 987, 1096, 1229], "fall": [363, 555, 566, 751, 922, 1007, 1096, 1106, 1229], "qcut": [363, 751, 922, 1229], "breakpoint": [363, 443, 555, 751, 922, 1003, 1096, 1229], "brk": [363, 555, 751], "foo_bin": [363, 555, 751], "radian": [364, 676, 751], "720": [364, 557, 751], "540": [364, 557, 751], "360": [364, 557, 751], "180": [364, 557, 751], "null_behavior": [365, 476, 751, 924, 1042, 1229], "nullbehavior": [365, 476, 751, 924, 1042, 1229], "drop_nan": [368, 751, 927, 1229], "utc": [369, 372, 377, 397, 638, 640, 863, 929, 932, 937, 961, 1183, 1185], "usual": [369, 929], "vari": [369, 929, 1238], "rare": [369, 929], "countri": [369, 929], "switch": [369, 929], "samoa": [369, 929], "apia": [369, 929], "did": [369, 929], "2011": [369, 929], "dst_offset": [369, 929], "2012": [369, 929], "replace_time_zon": [369, 377, 933, 934, 966], "pacif": [369, 929], "11h": [369, 929], "13h": [369, 929], "lose": [370, 930], "time_unit_m": [370, 930], "time_unit_n": [370, 930], "naiv": [371, 931, 1185], "compon": [371, 399, 638, 640, 700, 931, 963, 1183, 1185], "resolv": 371, "tm": [371, 863], "456000": [371, 931], "101000": 371, "d1": 371, "d2": 371, "d3": 371, "europ": [372, 377, 397, 932, 937, 961], "london": [372, 377, 397, 932, 937, 961], "gmt": [372, 377, 397, 932, 937, 961], "bst": [372, 377, 397, 932, 937, 961], "weekdai": [375, 395], "ordinal_dai": [375, 414], "day_of_month": [375, 395, 414], "day_of_year": [375, 395, 414], "356": [375, 395, 414], "357": [375, 395, 414], "358": [375, 395, 414], "359": [375, 395, 414], "total_dai": [376, 936], "base_utc_offset": [377, 937], "0m": [377, 937], "epochtimeunit": [378, 706, 938], "unix": [378, 706, 938], "epoch_n": [378, 938], "epoch_": [378, 938], "978307200000000": [378, 403, 938, 967], "978307200": [378, 938], "978393600000000": [378, 403, 938, 967], "978393600": [378, 938], "978480000000000": [378, 403, 938, 967], "978480000": [378, 938], "2010": [379, 387, 863], "total_hour": [380, 940], "leap": [381, 394, 941, 958], "2002": [381, 394, 941, 958, 980], "iso": [382, 413, 414, 942, 977, 978], "1977": [382, 416], "1978": [382, 416], "1979": [382, 416], "calendar_year": [382, 416], "1976": [382, 416], "1_001": [383, 407, 408, 410], "002": [383, 407, 408, 410, 700, 971, 972, 974], "003": [383, 407, 408, 410], "3000": 383, "997": [383, 407, 408, 410], "997000": 383, "998": [383, 407, 408, 410], "998000": 383, "999": [383, 407, 408, 410, 863, 1238], "999000": [383, 863], "total_microsecond": [384, 947], "total_millisecond": [386, 949], "total_minut": [388, 952], "think": [390, 391, 954, 955], "vectoris": [390, 391, 954, 955], "tseri": [390, 391, 954, 955], "monthend": [390, 954], "rollforward": [390, 954], "monthbegin": [391, 955], "rollback": [391, 955], "total_nanosecond": [393, 957], "minu": [394, 958], "dictat": [394, 751, 958], "2005": [394, 958], "date_plus_1i": [394, 958], "1y2mo": [394, 958], "date_min": 394, "1998": [394, 958], "1999": [394, 863, 958], "2003": [394, 706, 958], "2004": [394, 958], "2006": [394, 958], "new_dat": 394, "ordin": [395, 558, 751, 959, 1098, 1229], "366": [395, 959], "use_earliest": [397, 412, 638, 640, 697, 961, 976, 1183, 1185], "ambigu": [397, 398, 412, 638, 640, 697, 961, 962, 976, 1183, 1185], "convert_time_zon": [397, 961], "london_timezon": [397, 961], "amsterdam": [397, 961], "london_to_amsterdam": [397, 961], "cet": [397, 961], "cest": [397, 961], "ts_local": [397, 961], "brussel": [397, 961], "half": [398, 420, 421, 422, 751, 962, 985, 986, 987, 1229], "localis": [398, 412, 962, 976], "dst": [398, 412, 962, 976], "cst": [398, 412, 962, 976], "cdt": [398, 412, 962, 976], "225": [398, 412], "10m": [398, 412, 962, 976], "milli": [399, 963], "micro": [399, 963], "456789": [399, 863, 963], "111110": [399, 963], "765431": [399, 963], "11111": [399, 963], "total_second": [400, 964], "to_str": [401, 965], "datetime_str": [401, 404], "timestamp_n": [403, 967], "timestamp_m": 403, "978307200000": 403, "978393600000": 403, "978480000000": 403, "strftime": [404, 968], "days_diff": 405, "hours_diff": 406, "microseconds_diff": 407, "milliseconds_diff": 408, "minutes_diff": 409, "1440": [409, 973], "nanoseconds_diff": 410, "seconds_diff": 411, "safe": [412, 560, 751, 962, 976, 1100, 1185, 1210, 1229], "truncate_str": 412, "truncate_td": 412, "53": [413, 977], "time_unit_u": 415, "32971": [415, 979], "32974": [415, 979], "32976": [415, 979], "iso_year": 416, "pk": [417, 751, 982, 1229], "probabl": [417, 555, 751, 982, 1096, 1229], "459148": [417, 751], "754888": [417, 751], "span": [420, 421, 422, 751, 985, 986, 987, 1229], "half_lif": [420, 421, 422, 751, 985, 986, 987, 1229], "adjust": [420, 421, 422, 591, 751, 985, 986, 987, 1136, 1229], "exponenti": [420, 421, 422, 424, 552, 751, 985, 986, 987, 988, 1229], "weight": [420, 421, 422, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 591, 751, 985, 986, 987, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1136, 1229], "decai": [420, 421, 422, 751, 985, 986, 987, 1229], "term": [420, 421, 422, 751, 985, 986, 987, 1229], "mass": [420, 421, 422, 751, 985, 986, 987, 1229], "gamma": [420, 421, 422, 751, 985, 986, 987, 1229], "foral": [420, 421, 422, 751, 985, 986, 987, 1229], "geq": [420, 421, 422, 751, 985, 986, 987, 1229], "theta": [420, 421, 422, 751, 985, 986, 987, 1229], "life": [420, 421, 422, 751, 985, 986, 987, 1229], "exp": [420, 421, 422, 751, 985, 986, 987, 1229], "ln": [420, 421, 422, 751, 985, 986, 987, 1229], "smooth": [420, 421, 422, 751, 985, 986, 987, 1229], "factor": [420, 421, 422, 659, 751, 985, 986, 987, 1212, 1229], "leq": [420, 421, 422, 751, 985, 986, 987, 1229], "imbal": [420, 421, 422, 751, 985, 986, 987, 1229], "ew": [420, 421, 422, 751, 985, 986, 987, 1229], "w_i": [420, 421, 422, 751, 985, 986, 987, 1229], "recurs": [420, 421, 422, 751, 985, 986, 987, 1229], "y_t": [420, 421, 422, 751, 985, 986, 987, 1229], "y_": [420, 421, 422, 751, 985, 986, 987, 1229], "x_t": [420, 421, 422, 751, 985, 986, 987, 1229], "x_2": [420, 421, 422, 751, 985, 986, 987, 1229], "428571": [420, 751, 985, 1229], "bia": [421, 422, 463, 575, 591, 751, 986, 987, 1030, 1114, 1136, 1229], "unbias": [421, 422, 751, 986, 987, 1229], "963624": [421, 751, 986, 1229], "928571": [422, 751, 987, 1229], "wildcard": [423, 686, 687, 690, 691, 704, 726, 751], "regex": [423, 521, 598, 600, 601, 604, 606, 607, 608, 621, 622, 631, 702, 751, 863, 1143, 1145, 1146, 1149, 1151, 1152, 1153, 1166, 1167, 1176], "aa": [423, 598, 702, 751, 1143], "ba": [423, 631, 702, 751, 863], "cc": [423, 702, 751], "718282": [424, 751, 988, 1229], "389056": [424, 751, 988, 1229], "59815": [424, 751], "expand": [425, 520, 521, 561, 751, 863, 989, 1229], "pythonliter": [426, 751, 991, 1078, 1081, 1229], "extrem": [426, 569, 751, 991, 1108, 1229], "group_col": [429, 667, 751], "g1": [429, 667, 751], "g2": [429, 667, 751], "lt": [429, 667, 751, 1229], "gte": [429, 667, 751], "n_1": [429, 751], "n_2": [429, 751], "n_3": [429, 751], "exprlistnamespac": [431, 751], "divis": [433, 661, 751], "truediv": [433, 751], "9774092659964970114": [441, 751], "13614470193936745724": [441, 751], "1101441246220388612": [441, 751], "11638928888656214026": [441, 751], "13382926553367784577": [441, 751], "bin_count": [443, 751, 1003, 1229], "include_categori": [443, 751, 1003, 1229], "include_breakpoint": [443, 751, 1003, 1229], "occurr": [443, 450, 451, 454, 455, 665, 751, 1003, 1012, 1013, 1018, 1019, 1217, 1229], "interpolationmethod": [446, 751, 1006, 1229], "regrid": [446, 751], "grid": [446, 751], "df_original_grid": [446, 751], "grid_point": [446, 751], "df_new_grid": [446, 751], "conflat": [447, 751], "finit": [449, 661, 683, 751, 1011, 1229], "is_first_distinct": [450, 751, 1012, 1229], "optional_memb": [452, 751, 1015, 1229], "infinit": [453, 661, 751, 1016, 1229], "is_last_distinct": [454, 751, 1018, 1229], "_isnan": [456, 751], "b_isnan": [456, 751], "negat": [457, 544, 751, 1089, 1229], "_is_not_nan": [458, 751], "b_is_not_nan": [458, 751], "_not_nul": [459, 751], "a_not_nul": [459, 751], "b_not_nul": [459, 751], "_isnul": [460, 751], "a_isnul": [460, 751], "b_isnul": [460, 751], "chain": [462, 534, 536, 537, 538, 539, 553, 652, 741, 751], "undo": [462, 527, 534, 536, 537, 553, 652, 751], "fisher": [463, 591, 751, 1030, 1136, 1229], "fourth": [463, 751, 1030, 1229], "subtract": [463, 651, 751, 1030, 1229], "distribut": [463, 591, 751, 1030, 1136, 1229], "elimin": [463, 751, 1030, 1229], "bias": [463, 591, 751, 1030, 1136, 1229], "scipi": [463, 591, 751, 1030, 1136, 1229, 1233], "stat": [463, 591, 751, 1030, 1136, 1229], "153061": [463, 751], "sublist": [470, 471, 473, 476, 480, 481, 482, 483, 484, 485, 493, 498, 501, 502, 504, 1015, 1036, 1037, 1039, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1059, 1064, 1067, 1068, 1070, 1229], "membership": [473, 1039], "number_of_two": 475, "blindli": [478, 1044], "worth": [478, 1044], "enough": [478, 591, 751, 1044, 1136, 1229], "rank": [478, 683, 701, 751, 1044, 1229], "concat_list": [478, 701, 1044], "exprnamespac": 479, "flat": [479, 563, 751, 1045, 1103, 1229], "null_on_oob": [481, 502, 1047, 1068], "cheaper": [481, 502, 1047, 1068], "x_y": 484, "symmetr": [495, 1061], "sdiff": 495, "taken": [498, 627, 1064, 1172], "n_field_strategi": [504, 1070], "tostructstrategi": [504, 1070], "first_non_nul": [504, 1070], "max_width": [504, 1070], "field_0": [504, 1070], "field_1": [504, 1070], "field_n": [504, 1070], "pre": [504, 515, 555, 724, 727, 742, 751, 1096, 1229], "obtain": 504, "ok": 504, "longest": 504, "n0": 504, "n1": 504, "logarithm": [506, 507, 508, 751, 1072, 1073, 1074, 1229], "584963": [506, 751], "30103": [507, 751], "60206": [507, 751], "natur": [508, 751, 1074, 1229], "693147": [508, 751, 1072, 1074, 1229], "098612": [508, 751, 1072, 1074, 1229], "386294": [508, 751, 1074, 1229], "lowest": [509, 751], "9223372036854775808": [509, 751], "agg_list": [511, 513, 751], "map_batch": [511, 714, 751, 802, 860], "keep_nam": [512, 751], "a_revers": [512, 535, 537, 564, 652, 751], "b_revers": [512, 535, 537, 564, 652, 751], "rstrip": [512, 535, 751], "_revers": [512, 535, 537, 564, 652, 751], "is_elementwis": [513, 751], "whole": [513, 593, 594, 606, 751, 848, 860, 1151], "elementwis": [513, 568, 569, 570, 571, 573, 577, 751, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "third": [513, 751], "parti": [513, 751], "book": [513, 751], "bug": [513, 515, 751, 802, 803, 843, 848, 860, 1077, 1229], "argmax": [513, 751], "remap": [514, 751, 1076, 1229], "lookup": [514, 747, 751, 1076, 1229], "discourag": [515, 751], "loop": [515, 751], "a_times_2": [515, 751], "tip": [515, 751], "again": [515, 751], "exprmetanamespac": [519, 522], "foo_bar2": [519, 522], "raise_if_undetermin": 523, "computeerror": [523, 620, 642, 763, 1165, 1187], "e_filt": [523, 525], "e_sum_ov": [523, 525], "e_sum_slic": [523, 525], "tree": 526, "modulu": [530, 751], "xlog2": [532, 552, 751], "reverse_": [536, 553, 751], "reverse_a": [536, 553, 751], "reverse_b": [536, 553, 751], "lowercas": [538, 643, 1188], "uppercas": [539, 646, 1191], "to_lowercas": 539, "poison": [540, 541, 751, 1086, 1087, 1229], "nanmax": [540, 541, 751, 1086, 1087, 1229], "inequ": [542, 751], "ne": [543, 751, 1229], "more_expr": [547, 678, 680, 681, 682, 751], "mapping_strategi": [547, 751], "windowmappingstrategi": [547, 751], "group_to_row": [547, 751], "outcom": [547, 751], "group_dtyp": [547, 751], "warn": [547, 570, 571, 572, 573, 574, 576, 577, 578, 751], "flatten": [547, 751], "_max": [547, 751], "c_max": [547, 751], "_min": [547, 751], "c_min": [547, 751], "percent": [548, 751, 1091, 1229], "090909": [548, 751], "peak": [549, 550, 751, 1092, 1093, 1229], "extract_numb": [551, 751], "digit": [551, 579, 580, 607, 751, 1118, 1119, 1146, 1152, 1229, 1238], "scale_negative_even": [551, 751], "expon": [552, 751, 1229], "allow_dupl": [555, 751, 1096, 1229], "duplicateerror": [555, 751, 763, 1096, 1229], "happen": [555, 751, 1096, 1229], "cut": [555, 751, 1096, 1229], "566371": [557, 751], "424778": [557, 751], "283185": [557, 751], "141593": [557, 751, 871, 1229], "rankmethod": [558, 751, 1098, 1229], "ti": [558, 751, 1098, 1229], "competit": [558, 751, 1098, 1229], "highest": [558, 664, 683, 751, 860, 1098, 1229], "immedi": [558, 675, 679, 695, 696, 698, 699, 710, 711, 724, 727, 733, 738, 739, 742, 751, 1098, 1229], "nodefault": [562, 751, 1102, 1229], "_nodefault": [562, 751, 1102, 1229], "no_default": [562, 751, 1102, 1229], "200": [562, 751, 1102, 1109, 1110, 1112, 1229], "fruits_revers": [564, 751], "cars_revers": [564, 751], "rle": [566, 751, 1106, 1229], "themselv": [566, 751, 1106, 1229], "a_r": [566, 751], "ab_r": [566, 751], "window_s": [568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 728, 729, 751, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1229], "rolling_map": [568, 751, 1107, 1229], "multipli": [568, 569, 570, 571, 573, 576, 577, 578, 751, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1229], "rolling_sum": [569, 751, 1108, 1229], "nansum": [569, 751, 1108, 1229], "warn_if_unsort": [570, 571, 572, 573, 574, 576, 577, 578, 751], "travers": [570, 571, 573, 577, 751, 1109, 1110, 1112, 1115, 1116, 1117, 1229], "vector": [570, 571, 573, 577, 751, 1109, 1110, 1112, 1115, 1116, 1117, 1229], "5h": [570, 571, 572, 573, 574, 576, 577, 578, 751], "df_tempor": [570, 571, 573, 576, 577, 578, 751], "closur": [570, 571, 576, 577, 578, 751], "rolling_row_max": [570, 751], "2h": [570, 571, 573, 576, 577, 578, 751], "rolling_row_mean": [571, 751], "rolling_row_min": [573, 751], "625": [574, 751], "skew": [575, 751, 1114, 1229], "381802": [575, 751, 1114, 1229], "47033": [575, 751, 1114, 1229], "38180177416060584": [575, 751, 1114, 1229], "47033046033698594": [575, 751, 1114, 1229], "433013": [576, 751, 827, 860], "rolling_row_std": [576, 751], "rolling_row_sum": [577, 751], "39": [577, 706, 751], "63": [577, 751], "69": [577, 751], "1875": [578, 751, 835, 860], "rolling_row_var": [578, 751], "figur": [580, 751, 824, 860, 1119, 1229], "01234": [580, 751, 1119, 1229], "012": [580, 751, 1119, 1229], "1200": [580, 751, 1119, 1229], "searchsortedsid": [582, 751, 1122, 1229], "leftmost": [582, 751, 1122, 1229], "rightmost": [582, 751, 1122, 1229], "six": [582, 751], "extrema": [586, 751, 1130, 1229], "112": [586, 751, 1238], "129": [586, 751], "8589934592": [586, 751], "1073741824": [586, 751], "175201": [590, 751, 1135, 1229], "unimod": [591, 751, 1136, 1229], "skewtest": [591, 751, 1136, 1229], "speak": [591, 751, 1136, 1229], "g_1": [591, 751, 1136, 1229], "m_3": [591, 751, 1136, 1229], "m_2": [591, 751, 1136, 1229], "m_i": [591, 751, 1136, 1229], "sum_": [591, 751, 1136, 1229], "texttt": [591, 751, 1136, 1229], "k_3": [591, 751, 1136, 1229], "k_2": [591, 751, 1136, 1229], "sqrt": [591, 676, 677, 751, 1136, 1229], "343622": [591, 751], "value1": [594, 751], "value2": [594, 751], "attain": [594, 751], "414214": [595, 751, 1139, 1229], "sensit": [598, 607, 621, 1143, 1152, 1166], "ilmsuxu": [598, 606, 607, 621, 1143, 1151, 1152, 1166], "default_match": 598, "insensitive_match": 598, "crab": [598, 1143], "dog": [598, 643, 646, 682, 1143, 1188, 1191], "rab": [598, 624, 1143, 1169], "ascii_case_insensit": [599, 623, 1144, 1168], "aho": [599, 623, 1144, 1168], "corasick": [599, 623, 1144, 1168], "insensit": [599, 607, 621, 623, 863, 1143, 1144, 1152, 1166, 1168], "set_fmt_str_length": [599, 623, 1144, 1168], "lyric": [599, 623, 1144, 1168], "everybodi": [599, 623, 1144, 1168], "tell": [599, 623, 1144, 1168], "me": [599, 623, 1144, 1168], "feel": [599, 623, 1144, 1168], "love": [599, 623, 1144, 1168], "tonight": [599, 623, 1144, 1168], "success": [600, 601, 607, 1145, 1146, 1152], "overlap": [600, 601, 607, 1145, 1146, 1152], "bla": [601, 607, 1146, 1152], "asd": [601, 607, 1146, 1152], "678": [601, 607, 1146, 1152], "910t": [601, 607, 1146, 1152], "count_digit": 601, "dbc": [601, 1146], "3xy": [601, 1146], "1zy3": [601, 1146], "strings_hex": 603, "666f6f": [603, 1148], "626172": [603, 1148], "mango": [604, 631, 1149, 1176], "has_suffix": 604, "le": [604, 751, 1229], "nu": 604, "group_index": [606, 1151], "captur": [606, 608, 1151, 1153], "nthose": [606, 1151], "nodd": [606, 1151], "nthe": [606, 1151], "odd": 606, "vote": [606, 608, 1151, 1153], "ballon_dor": [606, 608, 1151, 1153], "404": [606, 608, 1151, 1153], "ref": [606, 608, 1151, 1153], "candid": [606, 608, 1151, 1153], "messi": [606, 608, 1151, 1153], "ronaldo": [606, 1151], "haystack": [607, 1152], "email": [607, 1152], "real": [607, 1152], "some_account": [607, 1152], "somewher": [607, 1152], "net": [607, 1152], "jkl": [607, 1152], "uvw": [607, 1152], "co": [607, 751, 1152, 1229], "uk": [607, 1152], "address": 607, "xi": [607, 1152], "quantifi": [607, 1152], "email_part": [607, 1152], "extracted_nr": 607, "910": [607, 1152], "unnam": [608, 1153], "weghorst": [608, 1153], "candi": 608, "json_path_match": [609, 1154], "jsonpath": [609, 611, 1154, 1156], "json_decod": [610, 1155], "json_path": [611, 1156], "json_val": [611, 1156], "len_char": [612, 617, 1157, 1162], "_o": [612, 613, 1157, 1158], "caf\u00e9": [612, 613, 1157, 1158], "345": [612, 613, 1157, 1158], "\u6771\u4eac": [612, 613, 1157, 1158], "n_byte": [612, 613], "n_char": [612, 613], "fill_char": [615, 618, 619, 625, 1160, 1163, 1164, 1170], "justifi": [615, 625, 1160, 1170], "pad_end": [615, 619, 1160, 1164], "strip_chars_start": [616, 634, 636, 1161], "pad": [618, 619, 647, 1163, 1164, 1192], "reach": [618, 619, 647, 1163, 1164, 1192], "pad_start": [618, 625, 647, 1163, 1170, 1192], "cow": [618, 619, 1163, 1164], "monkei": [618, 619, 1163, 1164], "hippopotamu": [618, 619, 1163, 1164], "zfill": [619, 668, 751, 1164], "radix": [620, 642, 1165, 1187], "parseerror": [620, 642, 1165, 1187], "becom": 620, "to_integ": [620, 1165], "silent": [620, 642, 1165, 1187], "replace_al": [621, 1166], "citi": 621, "philadelphia": 621, "season": 621, "spring": 621, "summer": 621, "autumn": 621, "winter": 621, "weather": [621, 1166], "raini": [621, 1166], "sunni": [621, 1166], "cloudi": 621, "snowi": 621, "foggi": [621, 1166], "123abc": [621, 1166], "abc456": [621, 1166], "abcabc": [622, 1167], "123a123": [622, 1167], "bc": [622, 734, 1167], "replace_with": [623, 1168], "broadcast": [623, 863, 1168], "removes_pronoun": 623, "man": [624, 1169], "ana": [624, 1169], "oof": [624, 1169], "anan": [624, 1169], "am": [624, 1169], "strip_chars_end": [626, 635, 637, 1171], "subslic": [627, 1172], "pear": [627, 1172], "papaya": [627, 1172], "dragonfruit": [627, 1172], "s_slice": 627, "ear": [627, 1172], "aya": [627, 1172], "uit": [627, 1172], "ya": [627, 1172], "onf": [627, 1172], "foo_bar_baz": 628, "split_inclus": 628, "foo_": [628, 705], "bar_": 628, "a_1": [629, 1174, 1206, 1229], "d_4": [629, 1174], "rename_field": [629, 630, 922, 1096, 1174, 1175, 1229], "first_part": [629, 630, 1174, 1175], "second_part": [629, 630, 1174, 1175], "remaind": [630, 1175], "app": [631, 1176], "has_prefix": 631, "strip_char": [632, 1177], "nworld": 633, "foo_strip": 633, "ow": 633, "hell": [633, 1178], "rld": [633, 635, 1180], "word": [634, 635], "strip_suffix": [634, 636], "foo_strip_end": 634, "oldw": 634, "he": 634, "abcdeff": 634, "fed": 634, "strip_prefix": [635, 637], "tworld": [635, 1178, 1180], "foo_strip_start": 635, "wod": [635, 1180], "aabcdef": 635, "cba": 635, "foobar": [636, 637, 1181, 1182], "foofoobar": [636, 1181], "foobarbar": [637, 1182], "polarstemporaltyp": [638, 1183], "penalti": [638, 639, 640, 1183, 1184, 1185], "clean": [638, 639, 640, 1183, 1184, 1185], "beforehand": [638, 639, 640, 1183, 1184, 1185], "certainli": [638, 639, 640, 1183, 1184, 1185], "3f": [638, 640, 1183, 1185], "00z": [638, 640, 1183, 1185], "sun": [638, 1183], "jul": [638, 1183], "34": [638, 1183], "inference_length": [641, 1186], "3420": [641, 1186], "120134": [641, 1186], "3212": [641, 1186], "90": [641, 1186], "143": [641, 1186, 1238], "numbers_decim": 641, "110": [642, 1187], "fa1e": [642, 1187], "ff00": [642, 1187], "cafe": [642, 1187], "64030": [642, 1187], "65280": [642, 1187], "51966": [642, 1187], "variant": [643, 645, 646, 1017, 1229], "foo_low": 643, "titlecas": [645, 1190], "sing": [645, 1190], "welcom": [645, 1190], "THERE": [645, 1190], "NO": [645, 863, 1190], "foo_titl": 645, "There": [645, 1190], "foo_upp": 646, "999999": [647, 697, 737, 738, 739, 863, 1192], "0123": [647, 1192], "cd": [648, 650], "struct_col": [648, 650], "www": 650, "xxx": 650, "yyi": 650, "zzz": 650, "obvious": 650, "structfieldnotfounderror": [650, 763], "761594": [658, 751, 1204, 1229], "replic": [659, 751, 1212, 1229], "vals_phys": [659, 751], "floordiv": [661, 751], "ieee": [661, 751], "754": [661, 751], "mathemat": [661, 701, 751], "undefin": [661, 751], "On": [661, 751], "operand": [661, 751], "infin": [661, 751], "value_count": [663, 751, 1229], "9223372036854775807": [664, 751], "binary_str": [668, 751], "250": [668, 751, 1110, 1229, 1238], "bin_x": [668, 751], "bin_i": [668, 751], "xor_xi": [668, 751], "bin_xor_xi": [668, 751], "00001010": [668, 751], "00001011": [668, 751], "00001000": [668, 751], "00000010": [668, 751], "11111010": [668, 751], "00000011": [668, 751], "249": [668, 751], "11111001": [668, 751], "01000010": [668, 751], "00000100": [668, 751], "70": [668, 751], "01000110": [668, 751], "AND": [669, 670, 863, 1210, 1229], "OR": [671, 672, 785, 860, 863], "any_horizont": 671, "returns_scalar": [673, 716, 751], "polarsintegertyp": [675, 710, 711], "arctan": [676, 677, 751, 1229], "angl": [676, 677], "plane": [676, 677], "rai": [676, 677], "tworoottwo": [676, 677], "arctan2d": 676, "atan2d": [676, 677], "atan2": [676, 677], "135": [676, 677], "356194": [676, 677], "arctan2": 677, "arg_tru": [679, 751, 1229], "mimic": 681, "a_lag_": 681, "a_rol": 681, "swim": 682, "walk": 682, "full_sent": 682, "correlationmethod": 683, "propagate_nan": 683, "spearman": 683, "544705": 683, "covari": [685, 729, 751], "acc": [686, 687, 690, 691, 704, 726], "include_init": [686, 690], "accumul": [686, 687, 690, 691, 704, 726], "fn": [686, 687, 690, 691, 704, 726], "new_valu": [686, 687, 690, 691, 704, 726], "cum_reduc": 686, "cumsum_horizont": 688, "cum_sum_horizont": 693, "granular": 695, "finer": 695, "permut": 695, "1985": [695, 698], "america": 698, "new_york": 698, "est": 698, "contrast": 700, "offset_bi": 700, "sometim": [700, 750], "tbl_width_char": 700, "120": 700, "add_week": 700, "add_dai": 700, "add_second": 700, "add_milli": 700, "add_hour": 700, "add_calendar_dai": 700, "add_calendar_month": 700, "mo": 700, "add_calendar_year": 700, "2024": [700, 863], "a_b_doubl": 701, "redirect": 702, "f_string": 705, "placehold": 705, "hello_": 705, "_world": 705, "_bar_": 705, "foo_a_bar_1": 705, "foo_b_bar_2": 705, "foo_c_bar_3": 705, "epoch": 706, "timestep": 706, "1666683077": 706, "1666683099": 706, "12345": [706, 903, 996, 1118, 1229], "12346": 706, "agg_group": [707, 751], "allow_object": 713, "valueexcept": 713, "test_func": 715, "list_of_seri": 716, "my_custom_aggreg": 716, "understood": 716, "power": [731, 1229], "a_a": 731, "a_txt": 731, "605551": 732, "605551275463989": 732, "my_struct": 733, "thens": 741, "elif": 741, "pick": 741, "met": 741, "own": [741, 1238], "isn": 741, "arr": [743, 1210, 1221, 1229], "technic": 747, "further": [747, 1211, 1229], "columnfactori": 747, "more_nam": 747, "__call__": 747, "helper": 747, "__getattr__": 747, "idiomat": [747, 848], "quick": [747, 923, 1229, 1238], "prototyp": 747, "keystrok": 747, "drawback": 747, "readabl": 747, "modul": [750, 863, 1238], "and_": 751, "arcco": [751, 1229], "arccosh": [751, 1229], "arcsin": [751, 1229], "arcsinh": [751, 1229], "arctanh": [751, 1229], "arg_max": [751, 1229], "arg_min": [751, 1229], "arg_sort": [751, 1229], "arg_uniqu": [751, 1229], "backward_fil": 751, "cbrt": [751, 1229], "clip_max": [751, 1229], "clip_min": [751, 1229], "cosh": [751, 1229], "cot": [751, 1229], "cumcount": 751, "cummax": [751, 1229], "cummin": [751, 1229], "cumprod": [751, 1229], "cumsum": [751, 1229], "cumulative_ev": [751, 1229], "entropi": [751, 1229], "eq_miss": [751, 1229], "ewm_mean": [751, 1229], "ewm_std": [751, 1229], "ewm_var": [751, 1229], "extend_const": [751, 1229], "from_json": 751, "ge": [751, 1229], "gt": [751, 1229], "hist": [751, 1229, 1233], "implod": [751, 1229], "inspect": [751, 860], "is_between": [751, 1229], "is_finit": [751, 1229], "is_first": [751, 1229], "is_infinit": [751, 1229], "is_last": [751, 1229], "is_nan": [751, 1229], "is_not": 751, "is_not_nan": [751, 1229], "is_not_nul": [751, 1229], "kurtosi": [751, 1229], "log10": [751, 1229], "log1p": [751, 1229], "map_alia": 751, "map_dict": [751, 1229], "mod": 751, "mul": 751, "nan_max": [751, 1229], "nan_min": [751, 1229], "ne_miss": [751, 1229], "or_": 751, "pct_chang": [751, 1229], "peak_max": [751, 1229], "peak_min": [751, 1229], "pow": [751, 1229], "register_plugin": 751, "lib": [751, 1205, 1229], "input_wildcard_expans": 751, "cast_to_supertyp": 751, "pass_name_to_appli": 751, "changes_length": 751, "plugin": 751, "highli": 751, "unsaf": 751, "unstabl": 751, "serializ": 751, "ran": 751, "reinterpret": [751, 1229], "repeat_bi": 751, "rle_id": [751, 1229], "rolling_appli": [751, 1229], "rolling_max": [751, 1229], "rolling_mean": [751, 1229], "rolling_median": [751, 1229], "rolling_min": [751, 1229], "rolling_quantil": [751, 1229], "rolling_skew": [751, 1229], "rolling_std": [751, 1229], "rolling_var": [751, 1229], "round_sig_fig": [751, 1229], "search_sort": [751, 1229], "shrink_dtyp": [751, 1229], "sin": [751, 1229], "sinh": [751, 1229], "sort_bi": 751, "tan": [751, 1229], "to_phys": [751, 900, 1229], "unique_count": [751, 1229], "xor": 751, "expos": 763, "miscellan": 763, "arrowerror": 763, "columnnotfounderror": 763, "invalidoperationerror": 763, "polarspanicerror": 763, "schemaerror": 763, "schemafieldnotfounderror": 763, "shapeerror": 763, "parametr": 763, "build_info": 763, "get_index_typ": 763, "show_vers": 763, "threadpool_s": 763, "sqlcontext": [763, 1237], "hit": [768, 860], "node": [768, 772, 795, 802, 803, 807, 812, 814, 860], "background": [772, 860], "_eager": [772, 860], "inprocessqueri": [772, 860], "explain": [772, 860], "cancel": [772, 860], "purpos": [772, 782, 860], "set_streaming_chunk_s": [772, 860], "collect_all_async": [773, 860], "async": [773, 860], "stringio": [776, 820, 860], "snippet": [778, 860], "Be": [782, 860], "fewer": [782, 860], "suscept": [782, 860], "lazygroupbi": [788, 789, 790, 791, 792, 793, 816, 860], "other_lf": [797, 860], "validate_output_schema": [802, 803, 860], "streamabl": [802, 803, 807, 860], "past": [802, 803, 860], "paramount": [802, 803, 860], "elig": [802, 803, 860], "invari": [803, 860], "upheld": [803, 860], "100_000": [803, 860], "200000": [803, 860], "199998": [803, 860], "199996": [803, 860], "199994": [803, 860], "199992": [803, 860], "show_plot": [812, 860], "truncate_nod": [812, 860], "figsiz": [812, 824, 860], "gantt": [812, 860], "group_by_partit": [812, 860], "470": [812, 860], "475": [812, 860], "1964": [812, 860], "swap": [814, 860], "dynamic_group_bi": [816, 860], "deseri": [820, 860], "dataframescan": [820, 860], "output_schema": [820, 860], "run_parallel": [820, 860], "duplicate_check": [820, 860], "later": [820, 860], "output_path": [824, 860], "raw_output": [824, 860], "290994": [827, 860], "118034": [827, 860], "implicit": [834, 860], "new_lf": [834, 860], "extern": [839, 860], "lf_other": [839, 860], "afoo": [839, 860], "cfoo": [839, 860], "train_lf": [839, 860], "feature_0": [839, 860], "feature_1": [839, 860], "test_lf": [839, 860], "_train": [839, 860], "feature_0_train": [839, 860], "opaqu": 848, "my_column": 848, "struct_seri": 848, "lf5": 860, "lf6": 860, "sink_csv": 860, "sink_ipc": 860, "sink_ndjson": 860, "sink_json": 860, "sink_parquet": 860, "with_context": 860, "intuit": 863, "emploi": 863, "complement": 863, "plenti": 863, "cde": 863, "fgg": 863, "jjk": 863, "lmn": 863, "opp": 863, "qqr": 863, "by_dtyp": 863, "as_expr": 863, "dispatch": 863, "1_234_500": 863, "5_000_555": 863, "1234500": 863, "5000555": 863, "by_nam": 863, "4_500_000": 863, "4500000": 863, "3265500": 863, "zap": 863, "2031": 863, "tstamp_tokyo": 863, "123465": 863, "tstamp_utc": 863, "2025": 863, "666000": 863, "tstamp": 863, "600000": 863, "123000": 863, "666": 863, "td1": 863, "987000": 863, "td2": 863, "td3": 863, "2m": [863, 951], "456m": 863, "7d": 863, "456789\u00b5": 863, "18d": 863, "999999\u00b5": 863, "23h": 863, "987m": 863, "14d": 863, "16h": 863, "39m": 863, "21d": 863, "456001\u00b5": 863, "expand_selector": 863, "colz": [863, 1238], "everyth": 863, "signed_integ": 863, "unsigned_integ": 863, "is_selector": 863, "obj": 863, "include_categor": 863, "2345": 863, "3456": 863, "292432": [872, 1229], "549306": [876, 1229], "catnamespac": 896, "set_ord": 901, "44225": [902, 1229], "56789": [903, 996, 1118, 1229], "901234": [903, 996, 1118, 1229], "1232e": [910, 912, 1229], "1656e15": [912, 1229], "break_point_label": [922, 1096, 1229], "break_point": [922, 1003, 1096, 1229], "category_label": [922, 1096, 1229], "581139": [923, 1229], "arraylik": [925, 1229], "datetimenamespac": 928, "ser": [933, 934, 966], "kathmandu": [933, 934, 966], "0545": [933, 934, 966], "500m": [946, 948, 956], "500000": 946, "500000000": 956, "date_minus_1y_2mon": 958, "165": [962, 976], "round_str": 962, "round_td": 962, "timestamp_u": 967, "978307200000000000": 967, "978393600000000000": 967, "978480000000000000": 967, "005": [982, 1229], "06293300616044681": [982, 1229], "65": [982, 1229], "8568409950394724": [982, 1229], "4000000": [984, 1229], "814697265625": [984, 1229], "085537": [988, 1229], "bitmask": [1000, 1229], "absenc": [1000, 1229], "presenc": [1000, 1210, 1229], "confirm": [1000, 1229], "10734580197236529959": [1001, 1229], "3022416320763508302": [1001, 1229], "13756996518000038261": [1001, 1229], "is_signed_integ": [1017, 1229], "is_unsigned_integ": [1017, 1229], "listnamespac": 1033, "field_2": 1070, "n00": 1070, "n01": 1070, "n02": 1070, "2147483648": [1075, 1229], "166667": [1091, 1229], "142857": [1091, 1229], "150": [1110, 1229], "350": [1110, 1229], "450": [1110, 1229], "dev": [1115, 1229], "527525": [1115, 1229], "57": [1118, 1229, 1238], "frequent": [1121, 1124, 1229], "2246e": [1134, 1203, 1229], "34776706224699483": [1136, 1229], "732051": [1139, 1229], "stringnamespac": 1141, "orld": 1179, "tur": 1190, "structnamespac": 1195, "6331e16": [1203, 1229], "int64arrai": [1205, 1229], "a_2": [1206, 1229], "a_3": [1206, 1229], "s_from_str_repr": [1208, 1229], "zero_copy_onli": [1210, 1229], "writabl": [1210, 1229], "immut": [1210, 1229], "127": [1216, 1229], "seriesview": [1219, 1229], "dtype_if_empti": 1229, "position": 1229, "scenario": 1229, "chunk_length": 1229, "get_chunk": 1229, "has_valid": 1229, "is_boolean": 1229, "is_float": 1229, "is_integ": 1229, "is_numer": [1229, 1238], "is_sort": 1229, "is_tempor": 1229, "is_utf8": 1229, "new_from_index": 1229, "series_equ": 1229, "set_at_idx": 1229, "histogram": 1233, "kde": 1233, "two_a": 1237, "__enter__": 1237, "__exit__": 1237, "exc_typ": 1237, "baseexcept": 1237, "exc_val": 1237, "exc_tb": 1237, "tracebacktyp": 1237, "primari": 1238, "guid": 1238, "machin": 1238, "xdist": 1238, "hardwar": 1238, "setup": 1238, "sec": 1238, "numeric_dtyp": 1238, "null_probabililti": 1238, "test_numer": 1238, "col0": 1238, "col4": 1238, "29096": 1238, "485": 1238, "2147483647": 1238, "8257e14": 1238, "7508": 1238, "37338": 1238, "7264": 1238, "16996": 1238, "121": 1238, "361": 1238, "63204": 1238, "1443e235": 1238, "conform": 1238, "ascii_lett": 1238, "id_char": 1238, "alphabet": 1238, "price": 1238, "min_valu": 1238, "max_valu": 1238, "test_price_calcul": 1238, "a101": 1238, "8nin": 1238, "qhoo": 1238, "714": 1238, "544": 1238, "i0e0": 1238, "0000": 1238, "test_miscellan": 1238, "235": 1238, "87": 1238, "186": 1238, "174": 1238, "179": 1238, "213": 1238, "221": 1238, "86": 1238, "255": 1238}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [61, 0, 1, "", "List"], [62, 0, 1, "", "Null"], [63, 0, 1, "", "Object"], [1237, 0, 1, "", "SQLContext"], [70, 0, 1, "", "String"], [71, 0, 1, "", "StringCache"], [72, 0, 1, "", "Struct"], [73, 0, 1, "", "Time"], [74, 0, 1, "", "UInt16"], [75, 0, 1, "", "UInt32"], [76, 0, 1, "", "UInt64"], [77, 0, 1, "", "UInt8"], [78, 0, 1, "", "Unknown"], [79, 3, 1, "", "Utf8"], [80, 4, 1, "", "align_frames"], [669, 4, 1, "", "all"], [670, 4, 1, "", "all_horizontal"], [671, 4, 1, "", "any"], [672, 4, 1, "", "any_horizontal"], [673, 4, 1, "", "apply"], [674, 4, 1, "", "approx_n_unique"], [675, 4, 1, "", "arange"], [676, 4, 1, "", "arctan2"], [677, 4, 1, "", "arctan2d"], [678, 4, 1, "", "arg_sort_by"], [679, 4, 1, "", "arg_where"], [85, 4, 1, "", "build_info"], [680, 4, 1, "", "coalesce"], [86, 4, 1, "", "collect_all"], [87, 4, 1, "", "collect_all_async"], [88, 4, 1, "", "concat"], [681, 4, 1, "", "concat_list"], [682, 4, 1, "", "concat_str"], [683, 4, 1, "", "corr"], [684, 4, 1, "", "count"], [685, 4, 1, "", "cov"], [686, 4, 1, "", "cum_fold"], [687, 4, 1, "", "cum_reduce"], [688, 4, 1, "", "cum_sum"], [689, 4, 1, "", "cum_sum_horizontal"], [690, 4, 1, "", "cumfold"], [691, 4, 1, "", "cumreduce"], [692, 4, 1, "", "cumsum"], [693, 4, 1, "", "cumsum_horizontal"], [694, 4, 1, "", "date"], [695, 4, 1, "", "date_range"], [696, 4, 1, "", "date_ranges"], [697, 4, 1, "", "datetime"], [698, 4, 1, "", "datetime_range"], [699, 4, 1, "", "datetime_ranges"], [89, 4, 1, "", "disable_string_cache"], [700, 4, 1, "", "duration"], [701, 4, 1, "", "element"], [90, 4, 1, "", "enable_string_cache"], [702, 4, 1, "", "exclude"], [703, 4, 1, "", "first"], [704, 4, 1, "", "fold"], [705, 4, 1, "", "format"], [105, 4, 1, "", "from_arrow"], [106, 4, 1, "", "from_dataframe"], [107, 4, 1, "", "from_dict"], [108, 4, 1, "", "from_dicts"], [706, 4, 1, "", "from_epoch"], [109, 4, 1, "", "from_numpy"], [110, 4, 1, "", "from_pandas"], [111, 4, 1, "", "from_records"], [112, 4, 1, "", "from_repr"], [113, 4, 1, "", "get_index_type"], [707, 4, 1, "", "groups"], [708, 4, 1, "", "head"], [709, 4, 1, "", "implode"], [710, 4, 1, "", "int_range"], [711, 4, 1, "", "int_ranges"], [712, 4, 1, "", "last"], [713, 4, 1, "", "lit"], [714, 4, 1, "", "map"], [715, 4, 1, "", "map_batches"], [716, 4, 1, "", "map_groups"], [717, 4, 1, "", "max"], [718, 4, 1, "", "max_horizontal"], [719, 4, 1, "", "mean"], [720, 4, 1, "", "median"], [721, 4, 1, "", "min"], [722, 4, 1, "", "min_horizontal"], [723, 4, 1, "", "n_unique"], [724, 4, 1, "", "ones"], [725, 4, 1, "", "quantile"], [115, 4, 1, "", "read_avro"], [116, 4, 1, "", "read_csv"], [117, 4, 1, "", "read_csv_batched"], [118, 4, 1, "", "read_database"], [119, 4, 1, "", "read_database_uri"], [120, 4, 1, "", "read_delta"], [121, 4, 1, "", "read_excel"], [122, 4, 1, "", "read_ipc"], [123, 4, 1, "", "read_ipc_schema"], [124, 4, 1, "", "read_ipc_stream"], [125, 4, 1, "", "read_json"], [126, 4, 1, "", "read_ndjson"], [127, 4, 1, "", "read_ods"], [128, 4, 1, "", "read_parquet"], [129, 4, 1, "", "read_parquet_schema"], [726, 4, 1, "", "reduce"], [727, 4, 1, "", "repeat"], [728, 4, 1, "", "rolling_corr"], [729, 4, 1, "", "rolling_cov"], [130, 4, 1, "", "scan_csv"], [131, 4, 1, "", "scan_delta"], [132, 4, 1, "", "scan_iceberg"], [133, 4, 1, "", "scan_ipc"], [134, 4, 1, "", "scan_ndjson"], [135, 4, 1, "", "scan_parquet"], [136, 4, 1, "", "scan_pyarrow_dataset"], [730, 4, 1, "", "select"], [863, 6, 0, "-", "selectors"], [137, 4, 1, "", "set_random_seed"], [138, 4, 1, "", "show_versions"], [731, 4, 1, "", "sql_expr"], [732, 4, 1, "", "std"], [733, 4, 1, "", "struct"], [734, 4, 1, "", "sum"], [735, 4, 1, "", "sum_horizontal"], [736, 4, 1, "", "tail"], [150, 4, 1, "", "threadpool_size"], [737, 4, 1, "", "time"], [738, 4, 1, "", "time_range"], [739, 4, 1, "", "time_ranges"], [151, 4, 1, "", "using_string_cache"], [740, 4, 1, "", "var"], [741, 4, 1, "", "when"], [742, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[154, 1, 1, "", "__dataframe__"], [155, 1, 1, "", "apply"], [156, 1, 1, "", "approx_n_unique"], [157, 1, 1, "", "bottom_k"], [158, 1, 1, "", "cast"], [159, 1, 1, "", "clear"], [160, 1, 1, "", "clone"], [161, 2, 1, "", "columns"], [162, 1, 1, "", "corr"], [163, 1, 1, "", "count"], [164, 1, 1, "", "describe"], [165, 1, 1, "", "drop"], [166, 1, 1, "", "drop_in_place"], [167, 1, 1, "", "drop_nulls"], [168, 2, 1, "", "dtypes"], [169, 1, 1, "", "equals"], [170, 1, 1, "", "estimated_size"], [171, 1, 1, "", "explode"], [172, 1, 1, "", "extend"], [173, 1, 1, "", "fill_nan"], [174, 1, 1, "", "fill_null"], [175, 1, 1, "", "filter"], [176, 1, 1, "", "find_idx_by_name"], [177, 2, 1, "", "flags"], [178, 1, 1, "", "fold"], [179, 1, 1, "", "frame_equal"], [180, 1, 1, "", "gather_every"], [181, 1, 1, "", "get_column"], [182, 1, 1, "", "get_column_index"], [183, 1, 1, "", "get_columns"], [184, 1, 1, "", "glimpse"], [185, 1, 1, "", "group_by"], [186, 1, 1, "", "group_by_dynamic"], [187, 1, 1, "", "group_by_rolling"], [188, 1, 1, "", "groupby"], [189, 1, 1, "", "groupby_dynamic"], [190, 1, 1, "", "groupby_rolling"], [191, 1, 1, "", "hash_rows"], [192, 1, 1, "", "head"], [193, 2, 1, "", "height"], [194, 1, 1, "", "hstack"], [195, 1, 1, "", "insert_at_idx"], [196, 1, 1, "", "insert_column"], [197, 1, 1, "", "interpolate"], [198, 1, 1, "", "is_duplicated"], [199, 1, 1, "", "is_empty"], [200, 1, 1, "", "is_unique"], [201, 1, 1, "", "item"], [202, 1, 1, "", "iter_columns"], [203, 1, 1, "", "iter_rows"], [204, 1, 1, "", "iter_slices"], [205, 1, 1, "", "join"], [206, 1, 1, "", "join_asof"], [207, 1, 1, "", "lazy"], [208, 1, 1, "", "limit"], [209, 1, 1, "", "map_rows"], [210, 1, 1, "", "max"], [211, 1, 1, "", "max_horizontal"], [212, 1, 1, "", "mean"], [213, 1, 1, "", "mean_horizontal"], [214, 1, 1, "", "median"], [215, 1, 1, "", "melt"], [216, 1, 1, "", "merge_sorted"], [217, 1, 1, "", "min"], [218, 1, 1, "", "min_horizontal"], [219, 1, 1, "", "n_chunks"], [220, 1, 1, "", "n_unique"], [221, 1, 1, "", "null_count"], [222, 1, 1, "", "partition_by"], [223, 1, 1, "", "pipe"], [224, 1, 1, "", "pivot"], [225, 2, 1, "", "plot"], [226, 1, 1, "", "product"], [227, 1, 1, "", "quantile"], [228, 1, 1, "", "rechunk"], [229, 1, 1, "", "rename"], [230, 1, 1, "", "replace"], [231, 1, 1, "", "replace_at_idx"], [232, 1, 1, "", "replace_column"], [233, 1, 1, "", "reverse"], [234, 1, 1, "", "rolling"], [235, 1, 1, "", "row"], [236, 1, 1, "", "rows"], [237, 1, 1, "", "rows_by_key"], [238, 1, 1, "", "sample"], [239, 2, 1, "", "schema"], [240, 1, 1, "", "select"], [241, 1, 1, "", "select_seq"], [242, 1, 1, "", "set_sorted"], [243, 2, 1, "", "shape"], [244, 1, 1, "", "shift"], [245, 1, 1, "", "shift_and_fill"], [246, 1, 1, "", "shrink_to_fit"], [247, 1, 1, "", "slice"], [248, 1, 1, "", "sort"], [249, 1, 1, "", "std"], [250, 1, 1, "", "sum"], [251, 1, 1, "", "sum_horizontal"], [252, 1, 1, "", "tail"], [253, 1, 1, "", "take_every"], [254, 1, 1, "", "to_arrow"], [255, 1, 1, "", "to_dict"], [256, 1, 1, "", "to_dicts"], [257, 1, 1, "", "to_dummies"], [258, 1, 1, "", "to_init_repr"], [259, 1, 1, "", "to_numpy"], [260, 1, 1, "", "to_pandas"], [261, 1, 1, "", "to_series"], [262, 1, 1, "", "to_struct"], [263, 1, 1, "", "top_k"], [264, 1, 1, "", "transpose"], [265, 1, 1, "", "unique"], [266, 1, 1, "", "unnest"], [267, 1, 1, "", "unstack"], [268, 1, 1, "", "update"], [269, 1, 1, "", "upsample"], [270, 1, 1, "", "var"], [271, 1, 1, "", "vstack"], [272, 2, 1, "", "width"], [273, 1, 1, "", "with_columns"], [274, 1, 1, "", "with_columns_seq"], [275, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[305, 1, 1, "", "abs"], [306, 1, 1, "", "add"], [307, 1, 1, "", "agg_groups"], [308, 1, 1, "", "alias"], [309, 1, 1, "", "all"], [310, 1, 1, "", "and_"], [311, 1, 1, "", "any"], [312, 1, 1, "", "append"], [313, 1, 1, "", "apply"], [314, 1, 1, "", "approx_n_unique"], [315, 1, 1, "", "arccos"], [316, 1, 1, "", "arccosh"], [317, 1, 1, "", "arcsin"], [318, 1, 1, "", "arcsinh"], [319, 1, 1, "", "arctan"], [320, 1, 1, "", "arctanh"], [321, 1, 1, "", "arg_max"], [322, 1, 1, "", "arg_min"], [323, 1, 1, "", "arg_sort"], [324, 1, 1, "", "arg_true"], [325, 1, 1, "", "arg_unique"], [333, 1, 1, "", "backward_fill"], [339, 1, 1, "", "bottom_k"], [340, 1, 1, "", "cast"], [343, 1, 1, "", "cbrt"], [344, 1, 1, "", "ceil"], [345, 1, 1, "", "clip"], [346, 1, 1, "", "clip_max"], [347, 1, 1, "", "clip_min"], [348, 1, 1, "", "cos"], [349, 1, 1, "", "cosh"], [350, 1, 1, "", "cot"], [351, 1, 1, "", "count"], [352, 1, 1, "", "cum_count"], [353, 1, 1, "", "cum_max"], [354, 1, 1, "", "cum_min"], [355, 1, 1, "", "cum_prod"], [356, 1, 1, "", "cum_sum"], [357, 1, 1, "", "cumcount"], [358, 1, 1, "", "cummax"], [359, 1, 1, "", "cummin"], [360, 1, 1, "", "cumprod"], [361, 1, 1, "", "cumsum"], [362, 1, 1, "", "cumulative_eval"], [363, 1, 1, "", "cut"], [364, 1, 1, "", "degrees"], [365, 1, 1, "", "diff"], [366, 1, 1, "", "dot"], [367, 1, 1, "", "drop_nans"], [368, 1, 1, "", "drop_nulls"], [417, 1, 1, "", "entropy"], [418, 1, 1, "", "eq"], [419, 1, 1, "", "eq_missing"], [420, 1, 1, "", "ewm_mean"], [421, 1, 1, "", "ewm_std"], [422, 1, 1, "", "ewm_var"], [423, 1, 1, "", "exclude"], [424, 1, 1, "", "exp"], [425, 1, 1, "", "explode"], [426, 1, 1, "", "extend_constant"], [427, 1, 1, "", "fill_nan"], [428, 1, 1, "", "fill_null"], [429, 1, 1, "", "filter"], [430, 1, 1, "", "first"], [431, 1, 1, "", "flatten"], [432, 1, 1, "", "floor"], [433, 1, 1, "", "floordiv"], [434, 1, 1, "", "forward_fill"], [435, 1, 1, "", "from_json"], [436, 1, 1, "", "gather"], [437, 1, 1, "", "gather_every"], [438, 1, 1, "", "ge"], [439, 1, 1, "", "get"], [440, 1, 1, "", "gt"], [441, 1, 1, "", "hash"], [442, 1, 1, "", "head"], [443, 1, 1, "", "hist"], [444, 1, 1, "", "implode"], [445, 1, 1, "", "inspect"], [446, 1, 1, "", "interpolate"], [447, 1, 1, "", "is_between"], [448, 1, 1, "", "is_duplicated"], [449, 1, 1, "", "is_finite"], [450, 1, 1, "", "is_first"], [451, 1, 1, "", "is_first_distinct"], [452, 1, 1, "", "is_in"], [453, 1, 1, "", "is_infinite"], [454, 1, 1, "", "is_last"], [455, 1, 1, "", "is_last_distinct"], [456, 1, 1, "", "is_nan"], [457, 1, 1, "", "is_not"], [458, 1, 1, "", "is_not_nan"], [459, 1, 1, "", "is_not_null"], [460, 1, 1, "", "is_null"], [461, 1, 1, "", "is_unique"], [462, 1, 1, "", "keep_name"], [463, 1, 1, "", "kurtosis"], [464, 1, 1, "", "last"], [465, 1, 1, "", "le"], [466, 1, 1, "", "len"], [467, 1, 1, "", "limit"], [506, 1, 1, "", "log"], [507, 1, 1, "", "log10"], [508, 1, 1, "", "log1p"], [509, 1, 1, "", "lower_bound"], [510, 1, 1, "", "lt"], [511, 1, 1, "", "map"], [512, 1, 1, "", "map_alias"], [513, 1, 1, "", "map_batches"], [514, 1, 1, "", "map_dict"], [515, 1, 1, "", "map_elements"], [516, 1, 1, "", "max"], [517, 1, 1, "", "mean"], [518, 1, 1, "", "median"], [529, 1, 1, "", "min"], [530, 1, 1, "", "mod"], [531, 1, 1, "", "mode"], [532, 1, 1, "", "mul"], [533, 1, 1, "", "n_unique"], [540, 1, 1, "", "nan_max"], [541, 1, 1, "", "nan_min"], [542, 1, 1, "", "ne"], [543, 1, 1, "", "ne_missing"], [544, 1, 1, "", "not_"], [545, 1, 1, "", "null_count"], [546, 1, 1, "", "or_"], [547, 1, 1, "", "over"], [548, 1, 1, "", "pct_change"], [549, 1, 1, "", "peak_max"], [550, 1, 1, "", "peak_min"], [551, 1, 1, "", "pipe"], [552, 1, 1, "", "pow"], [553, 1, 1, "", "prefix"], [554, 1, 1, "", "product"], [555, 1, 1, "", "qcut"], [556, 1, 1, "", "quantile"], [557, 1, 1, "", "radians"], [558, 1, 1, "", "rank"], [559, 1, 1, "", "rechunk"], [560, 1, 1, "", "reinterpret"], [561, 1, 1, "", "repeat_by"], [562, 1, 1, "", "replace"], [563, 1, 1, "", "reshape"], [564, 1, 1, "", "reverse"], [565, 1, 1, "", "rle"], [566, 1, 1, "", "rle_id"], [567, 1, 1, "", "rolling"], [568, 1, 1, "", "rolling_apply"], [569, 1, 1, "", "rolling_map"], [570, 1, 1, "", "rolling_max"], [571, 1, 1, "", "rolling_mean"], [572, 1, 1, "", "rolling_median"], [573, 1, 1, "", "rolling_min"], [574, 1, 1, "", "rolling_quantile"], [575, 1, 1, "", "rolling_skew"], [576, 1, 1, "", "rolling_std"], [577, 1, 1, "", "rolling_sum"], [578, 1, 1, "", "rolling_var"], [579, 1, 1, "", "round"], [580, 1, 1, "", "round_sig_figs"], [581, 1, 1, "", "sample"], [582, 1, 1, "", "search_sorted"], [583, 1, 1, "", "set_sorted"], [584, 1, 1, "", "shift"], [585, 1, 1, "", "shift_and_fill"], [586, 1, 1, "", "shrink_dtype"], [587, 1, 1, "", "shuffle"], [588, 1, 1, "", "sign"], [589, 1, 1, "", "sin"], [590, 1, 1, "", "sinh"], [591, 1, 1, "", "skew"], [592, 1, 1, "", "slice"], [593, 1, 1, "", "sort"], [594, 1, 1, "", "sort_by"], [595, 1, 1, "", "sqrt"], [596, 1, 1, "", "std"], [651, 1, 1, "", "sub"], [652, 1, 1, "", "suffix"], [653, 1, 1, "", "sum"], [654, 1, 1, "", "tail"], [655, 1, 1, "", "take"], [656, 1, 1, "", "take_every"], [657, 1, 1, "", "tan"], [658, 1, 1, "", "tanh"], [659, 1, 1, "", "to_physical"], [660, 1, 1, "", "top_k"], [661, 1, 1, "", "truediv"], [662, 1, 1, "", "unique"], [663, 1, 1, "", "unique_counts"], [664, 1, 1, "", "upper_bound"], [665, 1, 1, "", "value_counts"], [666, 1, 1, "", "var"], [667, 1, 1, "", "where"], [668, 1, 1, "", "xor"]], "polars.Expr.arr": [[326, 1, 1, "", "all"], [327, 1, 1, "", "any"], [328, 1, 1, "", "max"], [329, 1, 1, "", "min"], [330, 1, 1, "", "sum"], [331, 1, 1, "", "to_list"], [332, 1, 1, "", "unique"]], "polars.Expr.bin": [[334, 1, 1, "", "contains"], [335, 1, 1, "", "decode"], [336, 1, 1, "", "encode"], [337, 1, 1, "", "ends_with"], [338, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[341, 1, 1, "", "get_categories"], [342, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[369, 1, 1, "", "base_utc_offset"], [370, 1, 1, "", "cast_time_unit"], [371, 1, 1, "", "combine"], [372, 1, 1, "", "convert_time_zone"], [373, 1, 1, "", "date"], [374, 1, 1, "", "datetime"], [375, 1, 1, "", "day"], [376, 1, 1, "", "days"], [377, 1, 1, "", "dst_offset"], [378, 1, 1, "", "epoch"], [379, 1, 1, "", "hour"], [380, 1, 1, "", "hours"], [381, 1, 1, "", "is_leap_year"], [382, 1, 1, "", "iso_year"], [383, 1, 1, "", "microsecond"], [384, 1, 1, "", "microseconds"], [385, 1, 1, "", "millisecond"], [386, 1, 1, "", "milliseconds"], [387, 1, 1, "", "minute"], [388, 1, 1, "", "minutes"], [389, 1, 1, "", "month"], [390, 1, 1, "", "month_end"], [391, 1, 1, "", "month_start"], [392, 1, 1, "", "nanosecond"], [393, 1, 1, "", "nanoseconds"], [394, 1, 1, "", "offset_by"], [395, 1, 1, "", "ordinal_day"], [396, 1, 1, "", "quarter"], [397, 1, 1, "", "replace_time_zone"], [398, 1, 1, "", "round"], [399, 1, 1, "", "second"], [400, 1, 1, "", "seconds"], [401, 1, 1, "", "strftime"], [402, 1, 1, "", "time"], [403, 1, 1, "", "timestamp"], [404, 1, 1, "", "to_string"], [405, 1, 1, "", "total_days"], [406, 1, 1, "", "total_hours"], [407, 1, 1, "", "total_microseconds"], [408, 1, 1, "", "total_milliseconds"], [409, 1, 1, "", "total_minutes"], [410, 1, 1, "", "total_nanoseconds"], [411, 1, 1, "", "total_seconds"], [412, 1, 1, "", "truncate"], [413, 1, 1, "", "week"], [414, 1, 1, "", "weekday"], [415, 1, 1, "", "with_time_unit"], [416, 1, 1, "", "year"]], "polars.Expr.list": [[468, 1, 1, "", "all"], [469, 1, 1, "", "any"], [470, 1, 1, "", "arg_max"], [471, 1, 1, "", "arg_min"], [472, 1, 1, "", "concat"], [473, 1, 1, "", "contains"], [474, 1, 1, "", "count_match"], [475, 1, 1, "", "count_matches"], [476, 1, 1, "", "diff"], [477, 1, 1, "", "drop_nulls"], [478, 1, 1, "", "eval"], [479, 1, 1, "", "explode"], [480, 1, 1, "", "first"], [481, 1, 1, "", "gather"], [482, 1, 1, "", "get"], [483, 1, 1, "", "head"], [484, 1, 1, "", "join"], [485, 1, 1, "", "last"], [486, 1, 1, "", "len"], [487, 1, 1, "", "lengths"], [488, 1, 1, "", "max"], [489, 1, 1, "", "mean"], [490, 1, 1, "", "min"], [491, 1, 1, "", "reverse"], [492, 1, 1, "", "sample"], [493, 1, 1, "", "set_difference"], [494, 1, 1, "", "set_intersection"], [495, 1, 1, "", "set_symmetric_difference"], [496, 1, 1, "", "set_union"], [497, 1, 1, "", "shift"], [498, 1, 1, "", "slice"], [499, 1, 1, "", "sort"], [500, 1, 1, "", "sum"], [501, 1, 1, "", "tail"], [502, 1, 1, "", "take"], [503, 1, 1, "", "to_array"], [504, 1, 1, "", "to_struct"], [505, 1, 1, "", "unique"]], "polars.Expr.meta": [[519, 1, 1, "", "eq"], [520, 1, 1, "", "has_multiple_outputs"], [521, 1, 1, "", "is_regex_projection"], [522, 1, 1, "", "ne"], [523, 1, 1, "", "output_name"], [524, 1, 1, "", "pop"], [525, 1, 1, "", "root_names"], [526, 1, 1, "", "tree_format"], [527, 1, 1, "", "undo_aliases"], [528, 1, 1, "", "write_json"]], "polars.Expr.name": [[534, 1, 1, "", "keep"], [535, 1, 1, "", "map"], [536, 1, 1, "", "prefix"], [537, 1, 1, "", "suffix"], [538, 1, 1, "", "to_lowercase"], [539, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[597, 1, 1, "", "concat"], [598, 1, 1, "", "contains"], [599, 1, 1, "", "contains_any"], [600, 1, 1, "", "count_match"], [601, 1, 1, "", "count_matches"], [602, 1, 1, "", "decode"], [603, 1, 1, "", "encode"], [604, 1, 1, "", "ends_with"], [605, 1, 1, "", "explode"], [606, 1, 1, "", "extract"], [607, 1, 1, "", "extract_all"], [608, 1, 1, "", "extract_groups"], [609, 1, 1, "", "json_decode"], [610, 1, 1, "", "json_extract"], [611, 1, 1, "", "json_path_match"], [612, 1, 1, "", "len_bytes"], [613, 1, 1, "", "len_chars"], [614, 1, 1, "", "lengths"], [615, 1, 1, "", "ljust"], [616, 1, 1, "", "lstrip"], [617, 1, 1, "", "n_chars"], [618, 1, 1, "", "pad_end"], [619, 1, 1, "", "pad_start"], [620, 1, 1, "", "parse_int"], [621, 1, 1, "", "replace"], [622, 1, 1, "", "replace_all"], [623, 1, 1, "", "replace_many"], [624, 1, 1, "", "reverse"], [625, 1, 1, "", "rjust"], [626, 1, 1, "", "rstrip"], [627, 1, 1, "", "slice"], [628, 1, 1, "", "split"], [629, 1, 1, "", "split_exact"], [630, 1, 1, "", "splitn"], [631, 1, 1, "", "starts_with"], [632, 1, 1, "", "strip"], [633, 1, 1, "", "strip_chars"], [634, 1, 1, "", "strip_chars_end"], [635, 1, 1, "", "strip_chars_start"], [636, 1, 1, "", "strip_prefix"], [637, 1, 1, "", "strip_suffix"], [638, 1, 1, "", "strptime"], [639, 1, 1, "", "to_date"], [640, 1, 1, "", "to_datetime"], [641, 1, 1, "", "to_decimal"], [642, 1, 1, "", "to_integer"], [643, 1, 1, "", "to_lowercase"], [644, 1, 1, "", "to_time"], [645, 1, 1, "", "to_titlecase"], [646, 1, 1, "", "to_uppercase"], [647, 1, 1, "", "zfill"]], "polars.Expr.struct": [[648, 1, 1, "", "field"], [649, 1, 1, "", "json_encode"], [650, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[766, 1, 1, "", "approx_n_unique"], [767, 1, 1, "", "bottom_k"], [768, 1, 1, "", "cache"], [769, 1, 1, "", "cast"], [770, 1, 1, "", "clear"], [771, 1, 1, "", "clone"], [772, 1, 1, "", "collect"], [773, 1, 1, "", "collect_async"], [774, 2, 1, "", "columns"], [775, 1, 1, "", "count"], [776, 1, 1, "", "deserialize"], [777, 1, 1, "", "drop"], [778, 1, 1, "", "drop_nulls"], [779, 2, 1, "", "dtypes"], [780, 1, 1, "", "explain"], [781, 1, 1, "", "explode"], [782, 1, 1, "", "fetch"], [783, 1, 1, "", "fill_nan"], [784, 1, 1, "", "fill_null"], [785, 1, 1, "", "filter"], [786, 1, 1, "", "first"], [787, 1, 1, "", "gather_every"], [788, 1, 1, "", "group_by"], [789, 1, 1, "", "group_by_dynamic"], [790, 1, 1, "", "group_by_rolling"], [791, 1, 1, "", "groupby"], [792, 1, 1, "", "groupby_dynamic"], [793, 1, 1, "", "groupby_rolling"], [794, 1, 1, "", "head"], [795, 1, 1, "", "inspect"], [796, 1, 1, "", "interpolate"], [797, 1, 1, "", "join"], [798, 1, 1, "", "join_asof"], [799, 1, 1, "", "last"], [800, 1, 1, "", "lazy"], [801, 1, 1, "", "limit"], [802, 1, 1, "", "map"], [803, 1, 1, "", "map_batches"], [804, 1, 1, "", "max"], [805, 1, 1, "", "mean"], [806, 1, 1, "", "median"], [807, 1, 1, "", "melt"], [808, 1, 1, "", "merge_sorted"], [809, 1, 1, "", "min"], [810, 1, 1, "", "null_count"], [811, 1, 1, "", "pipe"], [812, 1, 1, "", "profile"], [813, 1, 1, "", "quantile"], [814, 1, 1, "", "rename"], [815, 1, 1, "", "reverse"], [816, 1, 1, "", "rolling"], [817, 2, 1, "", "schema"], [818, 1, 1, "", "select"], [819, 1, 1, "", "select_seq"], [820, 1, 1, "", "serialize"], [821, 1, 1, "", "set_sorted"], [822, 1, 1, "", "shift"], [823, 1, 1, "", "shift_and_fill"], [824, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_parquet"], [825, 1, 1, "", "slice"], [826, 1, 1, "", "sort"], [827, 1, 1, "", "std"], [828, 1, 1, "", "sum"], [829, 1, 1, "", "tail"], [830, 1, 1, "", "take_every"], [831, 1, 1, "", "top_k"], [832, 1, 1, "", "unique"], [833, 1, 1, "", "unnest"], [834, 1, 1, "", "update"], [835, 1, 1, "", "var"], [836, 2, 1, "", "width"], [837, 1, 1, "", "with_columns"], [838, 1, 1, "", "with_columns_seq"], [839, 1, 1, "", "with_context"], [840, 1, 1, "", "with_row_count"]], "polars.List": [[61, 1, 1, "", "__init__"]], "polars.Null": [[62, 1, 1, "", "__init__"]], "polars.Object": [[63, 1, 1, "", "__init__"]], "polars.SQLContext": [[1237, 1, 1, "", "__enter__"], [1237, 1, 1, "", "__exit__"], [1237, 1, 1, "", "__init__"], [64, 1, 1, "", "execute"], [65, 1, 1, "", "register"], [66, 1, 1, "", "register_globals"], [67, 1, 1, "", "register_many"], [68, 1, 1, "", "tables"], [69, 1, 1, "", "unregister"]], "polars.Series": [[865, 1, 1, "", "abs"], [866, 1, 1, "", "alias"], [867, 1, 1, "", "all"], [868, 1, 1, "", "any"], [869, 1, 1, "", "append"], [870, 1, 1, "", "apply"], [871, 1, 1, "", "arccos"], [872, 1, 1, "", "arccosh"], [873, 1, 1, "", "arcsin"], [874, 1, 1, "", "arcsinh"], [875, 1, 1, "", "arctan"], [876, 1, 1, "", "arctanh"], [877, 1, 1, "", "arg_max"], [878, 1, 1, "", "arg_min"], [879, 1, 1, "", "arg_sort"], [880, 1, 1, "", "arg_true"], [881, 1, 1, "", "arg_unique"], [894, 1, 1, "", "bottom_k"], [895, 1, 1, "", "cast"], [896, 3, 1, "", "cat"], [902, 1, 1, "", "cbrt"], [903, 1, 1, "", "ceil"], [904, 1, 1, "", "chunk_lengths"], [905, 1, 1, "", "clear"], [906, 1, 1, "", "clip"], [907, 1, 1, "", "clip_max"], [908, 1, 1, "", "clip_min"], [909, 1, 1, "", "clone"], [910, 1, 1, "", "cos"], [911, 1, 1, "", "cosh"], [912, 1, 1, "", "cot"], [913, 1, 1, "", "cum_max"], [914, 1, 1, "", "cum_min"], [915, 1, 1, "", "cum_prod"], [916, 1, 1, "", "cum_sum"], [917, 1, 1, "", "cummax"], [918, 1, 1, "", "cummin"], [919, 1, 1, "", "cumprod"], [920, 1, 1, "", "cumsum"], [921, 1, 1, "", "cumulative_eval"], [922, 1, 1, "", "cut"], [923, 1, 1, "", "describe"], [924, 1, 1, "", "diff"], [925, 1, 1, "", "dot"], [926, 1, 1, "", "drop_nans"], [927, 1, 1, "", "drop_nulls"], [928, 3, 1, "", "dt"], [981, 3, 1, "", "dtype"], [982, 1, 1, "", "entropy"], [983, 1, 1, "", "equals"], [984, 1, 1, "", "estimated_size"], [985, 1, 1, "", "ewm_mean"], [986, 1, 1, "", "ewm_std"], [987, 1, 1, "", "ewm_var"], [988, 1, 1, "", "exp"], [989, 1, 1, "", "explode"], [990, 1, 1, "", "extend"], [991, 1, 1, "", "extend_constant"], [992, 1, 1, "", "fill_nan"], [993, 1, 1, "", "fill_null"], [994, 1, 1, "", "filter"], [995, 3, 1, "", "flags"], [996, 1, 1, "", "floor"], [997, 1, 1, "", "gather"], [998, 1, 1, "", "gather_every"], [999, 1, 1, "", "get_chunks"], [1000, 1, 1, "", "has_validity"], [1001, 1, 1, "", "hash"], [1002, 1, 1, "", "head"], [1003, 1, 1, "", "hist"], [1004, 1, 1, "", "implode"], [1005, 3, 1, "", "inner_dtype"], [1006, 1, 1, "", "interpolate"], [1007, 1, 1, "", "is_between"], [1008, 1, 1, "", "is_boolean"], [1009, 1, 1, "", "is_duplicated"], [1010, 1, 1, "", "is_empty"], [1011, 1, 1, "", "is_finite"], [1012, 1, 1, "", "is_first"], [1013, 1, 1, "", "is_first_distinct"], [1014, 1, 1, "", "is_float"], [1015, 1, 1, "", "is_in"], [1016, 1, 1, "", "is_infinite"], [1017, 1, 1, "", "is_integer"], [1018, 1, 1, "", "is_last"], [1019, 1, 1, "", "is_last_distinct"], [1020, 1, 1, "", "is_nan"], [1021, 1, 1, "", "is_not_nan"], [1022, 1, 1, "", "is_not_null"], [1023, 1, 1, "", "is_null"], [1024, 1, 1, "", "is_numeric"], [1025, 1, 1, "", "is_sorted"], [1026, 1, 1, "", "is_temporal"], [1027, 1, 1, "", "is_unique"], [1028, 1, 1, "", "is_utf8"], [1029, 1, 1, "", "item"], [1030, 1, 1, "", "kurtosis"], [1031, 1, 1, "", "len"], [1032, 1, 1, "", "limit"], [1033, 3, 1, "", "list"], [1072, 1, 1, "", "log"], [1073, 1, 1, "", "log10"], [1074, 1, 1, "", "log1p"], [1075, 1, 1, "", "lower_bound"], [1076, 1, 1, "", "map_dict"], [1077, 1, 1, "", "map_elements"], [1078, 1, 1, "", "max"], [1079, 1, 1, "", "mean"], [1080, 1, 1, "", "median"], [1081, 1, 1, "", "min"], [1082, 1, 1, "", "mode"], [1083, 1, 1, "", "n_chunks"], [1084, 1, 1, "", "n_unique"], [1085, 3, 1, "", "name"], [1086, 1, 1, "", "nan_max"], [1087, 1, 1, "", "nan_min"], [1088, 1, 1, "", "new_from_index"], [1089, 1, 1, "", "not_"], [1090, 1, 1, "", "null_count"], [1091, 1, 1, "", "pct_change"], [1092, 1, 1, "", "peak_max"], [1093, 1, 1, "", "peak_min"], [1094, 3, 1, "", "plot"], [1095, 1, 1, "", "product"], [1096, 1, 1, "", "qcut"], [1097, 1, 1, "", "quantile"], [1098, 1, 1, "", "rank"], [1099, 1, 1, "", "rechunk"], [1100, 1, 1, "", "reinterpret"], [1101, 1, 1, "", "rename"], [1102, 1, 1, "", "replace"], [1103, 1, 1, "", "reshape"], [1104, 1, 1, "", "reverse"], [1105, 1, 1, "", "rle"], [1106, 1, 1, "", "rle_id"], [1107, 1, 1, "", "rolling_apply"], [1108, 1, 1, "", "rolling_map"], [1109, 1, 1, "", "rolling_max"], [1110, 1, 1, "", "rolling_mean"], [1111, 1, 1, "", "rolling_median"], [1112, 1, 1, "", "rolling_min"], [1113, 1, 1, "", "rolling_quantile"], [1114, 1, 1, "", "rolling_skew"], [1115, 1, 1, "", "rolling_std"], [1116, 1, 1, "", "rolling_sum"], [1117, 1, 1, "", "rolling_var"], [1118, 1, 1, "", "round"], [1119, 1, 1, "", "round_sig_figs"], [1120, 1, 1, "", "sample"], [1121, 1, 1, "", "scatter"], [1122, 1, 1, "", "search_sorted"], [1123, 1, 1, "", "series_equal"], [1124, 1, 1, "", "set"], [1125, 1, 1, "", "set_at_idx"], [1126, 1, 1, "", "set_sorted"], [1127, 3, 1, "", "shape"], [1128, 1, 1, "", "shift"], [1129, 1, 1, "", "shift_and_fill"], [1130, 1, 1, "", "shrink_dtype"], [1131, 1, 1, "", "shrink_to_fit"], [1132, 1, 1, "", "shuffle"], [1133, 1, 1, "", "sign"], [1134, 1, 1, "", "sin"], [1135, 1, 1, "", "sinh"], [1136, 1, 1, "", "skew"], [1137, 1, 1, "", "slice"], [1138, 1, 1, "", "sort"], [1139, 1, 1, "", "sqrt"], [1140, 1, 1, "", "std"], [1141, 3, 1, "", "str"], [1199, 1, 1, "", "sum"], [1200, 1, 1, "", "tail"], [1201, 1, 1, "", "take"], [1202, 1, 1, "", "take_every"], [1203, 1, 1, "", "tan"], [1204, 1, 1, "", "tanh"], [1205, 1, 1, "", "to_arrow"], [1206, 1, 1, "", "to_dummies"], [1207, 1, 1, "", "to_frame"], [1208, 1, 1, "", "to_init_repr"], [1209, 1, 1, "", "to_list"], [1210, 1, 1, "", "to_numpy"], [1211, 1, 1, "", "to_pandas"], [1212, 1, 1, "", "to_physical"], [1213, 1, 1, "", "top_k"], [1214, 1, 1, "", "unique"], [1215, 1, 1, "", "unique_counts"], [1216, 1, 1, "", "upper_bound"], [1217, 1, 1, "", "value_counts"], [1218, 1, 1, "", "var"], [1219, 1, 1, "", "view"], [1220, 1, 1, "", "zip_with"]], "polars.Series.arr": [[882, 1, 1, "", "all"], [883, 1, 1, "", "any"], [884, 1, 1, "", "max"], [885, 1, 1, "", "min"], [886, 1, 1, "", "sum"], [887, 1, 1, "", "to_list"], [888, 1, 1, "", "unique"]], "polars.Series.bin": [[889, 1, 1, "", "contains"], [890, 1, 1, "", "decode"], [891, 1, 1, "", "encode"], [892, 1, 1, "", "ends_with"], [893, 1, 1, "", "starts_with"]], "polars.Series.cat": [[897, 1, 1, "", "get_categories"], [898, 1, 1, "", "is_local"], [899, 1, 1, "", "set_ordering"], [900, 1, 1, "", "to_local"], [901, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[929, 1, 1, "", "base_utc_offset"], [930, 1, 1, "", "cast_time_unit"], [931, 1, 1, "", "combine"], [932, 1, 1, "", "convert_time_zone"], [933, 1, 1, "", "date"], [934, 1, 1, "", "datetime"], [935, 1, 1, "", "day"], [936, 1, 1, "", "days"], [937, 1, 1, "", "dst_offset"], [938, 1, 1, "", "epoch"], [939, 1, 1, "", "hour"], [940, 1, 1, "", "hours"], [941, 1, 1, "", "is_leap_year"], [942, 1, 1, "", "iso_year"], [943, 1, 1, "", "max"], [944, 1, 1, "", "mean"], [945, 1, 1, "", "median"], [946, 1, 1, "", "microsecond"], [947, 1, 1, "", "microseconds"], [948, 1, 1, "", "millisecond"], [949, 1, 1, "", "milliseconds"], [950, 1, 1, "", "min"], [951, 1, 1, "", "minute"], [952, 1, 1, "", "minutes"], [953, 1, 1, "", "month"], [954, 1, 1, "", "month_end"], [955, 1, 1, "", "month_start"], [956, 1, 1, "", "nanosecond"], [957, 1, 1, "", "nanoseconds"], [958, 1, 1, "", "offset_by"], [959, 1, 1, "", "ordinal_day"], [960, 1, 1, "", "quarter"], [961, 1, 1, "", "replace_time_zone"], [962, 1, 1, "", "round"], [963, 1, 1, "", "second"], [964, 1, 1, "", "seconds"], [965, 1, 1, "", "strftime"], [966, 1, 1, "", "time"], [967, 1, 1, "", "timestamp"], [968, 1, 1, "", "to_string"], [969, 1, 1, "", "total_days"], [970, 1, 1, "", "total_hours"], [971, 1, 1, "", "total_microseconds"], [972, 1, 1, "", "total_milliseconds"], [973, 1, 1, "", "total_minutes"], [974, 1, 1, "", "total_nanoseconds"], [975, 1, 1, "", "total_seconds"], [976, 1, 1, "", "truncate"], [977, 1, 1, "", "week"], [978, 1, 1, "", "weekday"], [979, 1, 1, "", "with_time_unit"], [980, 1, 1, "", "year"]], "polars.Series.list": [[1034, 1, 1, "", "all"], [1035, 1, 1, "", "any"], [1036, 1, 1, "", "arg_max"], [1037, 1, 1, "", "arg_min"], [1038, 1, 1, "", "concat"], [1039, 1, 1, "", "contains"], [1040, 1, 1, "", "count_match"], [1041, 1, 1, "", "count_matches"], [1042, 1, 1, "", "diff"], [1043, 1, 1, "", "drop_nulls"], [1044, 1, 1, "", "eval"], [1045, 1, 1, "", "explode"], [1046, 1, 1, "", "first"], [1047, 1, 1, "", "gather"], [1048, 1, 1, "", "get"], [1049, 1, 1, "", "head"], [1050, 1, 1, "", "join"], [1051, 1, 1, "", "last"], [1052, 1, 1, "", "len"], [1053, 1, 1, "", "lengths"], [1054, 1, 1, "", "max"], [1055, 1, 1, "", "mean"], [1056, 1, 1, "", "min"], [1057, 1, 1, "", "reverse"], [1058, 1, 1, "", "sample"], [1059, 1, 1, "", "set_difference"], [1060, 1, 1, "", "set_intersection"], [1061, 1, 1, "", "set_symmetric_difference"], [1062, 1, 1, "", "set_union"], [1063, 1, 1, "", "shift"], [1064, 1, 1, "", "slice"], [1065, 1, 1, "", "sort"], [1066, 1, 1, "", "sum"], [1067, 1, 1, "", "tail"], [1068, 1, 1, "", "take"], [1069, 1, 1, "", "to_array"], [1070, 1, 1, "", "to_struct"], [1071, 1, 1, "", "unique"]], "polars.Series.str": [[1142, 1, 1, "", "concat"], [1143, 1, 1, "", "contains"], [1144, 1, 1, "", "contains_any"], [1145, 1, 1, "", "count_match"], [1146, 1, 1, "", "count_matches"], [1147, 1, 1, "", "decode"], [1148, 1, 1, "", "encode"], [1149, 1, 1, "", "ends_with"], [1150, 1, 1, "", "explode"], [1151, 1, 1, "", "extract"], [1152, 1, 1, "", "extract_all"], [1153, 1, 1, "", "extract_groups"], [1154, 1, 1, "", "json_decode"], [1155, 1, 1, "", "json_extract"], [1156, 1, 1, "", "json_path_match"], [1157, 1, 1, "", "len_bytes"], [1158, 1, 1, "", "len_chars"], [1159, 1, 1, "", "lengths"], [1160, 1, 1, "", "ljust"], [1161, 1, 1, "", "lstrip"], [1162, 1, 1, "", "n_chars"], [1163, 1, 1, "", "pad_end"], [1164, 1, 1, "", "pad_start"], [1165, 1, 1, "", "parse_int"], [1166, 1, 1, "", "replace"], [1167, 1, 1, "", "replace_all"], [1168, 1, 1, "", "replace_many"], [1169, 1, 1, "", "reverse"], [1170, 1, 1, "", "rjust"], [1171, 1, 1, "", "rstrip"], [1172, 1, 1, "", "slice"], [1173, 1, 1, "", "split"], [1174, 1, 1, "", "split_exact"], [1175, 1, 1, "", "splitn"], [1176, 1, 1, "", "starts_with"], [1177, 1, 1, "", "strip"], [1178, 1, 1, "", "strip_chars"], [1179, 1, 1, "", "strip_chars_end"], [1180, 1, 1, "", "strip_chars_start"], [1181, 1, 1, "", "strip_prefix"], [1182, 1, 1, "", "strip_suffix"], [1183, 1, 1, "", "strptime"], [1184, 1, 1, "", "to_date"], [1185, 1, 1, "", "to_datetime"], [1186, 1, 1, "", "to_decimal"], [1187, 1, 1, "", "to_integer"], [1188, 1, 1, "", "to_lowercase"], [1189, 1, 1, "", "to_time"], [1190, 1, 1, "", "to_titlecase"], [1191, 1, 1, "", "to_uppercase"], [1192, 1, 1, "", "zfill"]], "polars.Series.struct": [[1193, 1, 1, "", "field"], [1194, 3, 1, "", "fields"], [1195, 3, 1, "", "json_encode"], [1196, 1, 1, "", "rename_fields"], [1197, 3, 1, "", "schema"], [1198, 1, 1, "", "unnest"]], "polars.String": [[70, 1, 1, "", "__init__"]], "polars.StringCache": [[71, 1, 1, "", "__init__"]], "polars.Struct": [[72, 1, 1, "", "__init__"]], "polars.Time": [[73, 1, 1, "", "__init__"]], "polars.UInt16": [[74, 1, 1, "", "__init__"]], "polars.UInt32": [[75, 1, 1, "", "__init__"]], "polars.UInt64": [[76, 1, 1, "", "__init__"]], "polars.UInt8": [[77, 1, 1, "", "__init__"]], "polars.Unknown": [[78, 1, 1, "", "__init__"]], "polars.api": [[81, 4, 1, "", "register_dataframe_namespace"], [82, 4, 1, "", "register_expr_namespace"], [83, 4, 1, "", "register_lazyframe_namespace"], [84, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[276, 1, 1, "", "__iter__"], [277, 1, 1, "", "agg"], [278, 1, 1, "", "all"], [279, 1, 1, "", "apply"], [280, 1, 1, "", "count"], [281, 1, 1, "", "first"], [282, 1, 1, "", "head"], [283, 1, 1, "", "last"], [284, 1, 1, "", "map_groups"], [285, 1, 1, "", "max"], [286, 1, 1, "", "mean"], [287, 1, 1, "", "median"], [288, 1, 1, "", "min"], [289, 1, 1, "", "n_unique"], [290, 1, 1, "", "quantile"], [291, 1, 1, "", "sum"], [292, 1, 1, "", "tail"]], "polars.exceptions": [[91, 5, 1, "", "ArrowError"], [92, 5, 1, "", "ColumnNotFoundError"], [93, 5, 1, "", "ComputeError"], [94, 5, 1, "", "DuplicateError"], [95, 5, 1, "", "InvalidOperationError"], [96, 5, 1, "", "NoDataError"], [97, 5, 1, "", "NoRowsReturnedError"], [98, 5, 1, "", "PolarsPanicError"], [99, 5, 1, "", "RowsError"], [100, 5, 1, "", "SchemaError"], [101, 5, 1, "", "SchemaFieldNotFoundError"], [102, 5, 1, "", "ShapeError"], [103, 5, 1, "", "StructFieldNotFoundError"], [104, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[114, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[841, 1, 1, "", "agg"], [842, 1, 1, "", "all"], [843, 1, 1, "", "apply"], [844, 1, 1, "", "count"], [845, 1, 1, "", "first"], [846, 1, 1, "", "head"], [847, 1, 1, "", "last"], [848, 1, 1, "", "map_groups"], [849, 1, 1, "", "max"], [850, 1, 1, "", "mean"], [851, 1, 1, "", "median"], [852, 1, 1, "", "min"], [853, 1, 1, "", "n_unique"], [854, 1, 1, "", "quantile"], [855, 1, 1, "", "sum"], [856, 1, 1, "", "tail"]], "polars.selectors": [[863, 4, 1, "", "all"], [863, 4, 1, "", "by_dtype"], [863, 4, 1, "", "by_name"], [863, 4, 1, "", "categorical"], [863, 4, 1, "", "contains"], [863, 4, 1, "", "date"], [863, 4, 1, "", "datetime"], [863, 4, 1, "", "duration"], [863, 4, 1, "", "ends_with"], [863, 4, 1, "", "expand_selector"], [863, 4, 1, "", "first"], [863, 4, 1, "", "float"], [863, 4, 1, "", "integer"], [863, 4, 1, "", "is_selector"], [863, 4, 1, "", "last"], [863, 4, 1, "", "matches"], [863, 4, 1, "", "numeric"], [863, 4, 1, "", "starts_with"], [863, 4, 1, "", "string"], [863, 4, 1, "", "temporal"], [863, 4, 1, "", "time"]], "polars.testing": [[139, 4, 1, "", "assert_frame_equal"], [140, 4, 1, "", "assert_frame_not_equal"], [141, 4, 1, "", "assert_series_equal"], [142, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[143, 0, 1, "", "column"], [144, 4, 1, "", "columns"], [145, 4, 1, "", "create_list_strategy"], [146, 4, 1, "", "dataframes"], [147, 4, 1, "", "load_profile"], [148, 4, 1, "", "series"], [149, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[143, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 172, 990], "api": [1, 81, 82, 83, 84, 763], "provid": 1, "new": 1, "function": [1, 152, 750, 762, 863], "avail": 1, "registr": 1, "exampl": [1, 301, 863, 1233, 1238], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 747, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1238], "arrai": [2, 743, 1221], "binari": [3, 744, 757, 1223], "boolean": [4, 745, 1224], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 152], "activate_decim": 6, "load": [7, 152], "load_from_fil": 8, "restore_default": 9, "save": [10, 152], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 152], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 146, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 298], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 528], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 373, 694, 933], "datetim": [48, 374, 697, 934], "decim": 49, "durat": [50, 700], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860], "sink_csv": 58, "sink_ipc": 59, "sink_parquet": 60, "list": [61, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 752, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1230], "null": 62, "object": 63, "sqlcontext": [64, 65, 66, 67, 68, 69], "execut": 64, "regist": 65, "register_glob": 66, "register_mani": 67, "tabl": 68, "unregist": 69, "string": [70, 758, 1234], "stringcach": [71, 762], "struct": [72, 648, 649, 650, 733, 759, 1193, 1194, 1195, 1196, 1197, 1198, 1235], "time": [73, 402, 737, 966], "uint16": 74, "uint32": 75, "uint64": 76, "uint8": 77, "unknown": 78, "utf8": 79, "align_fram": 80, "register_dataframe_namespac": 81, "register_expr_namespac": 82, "register_lazyframe_namespac": 83, "register_series_namespac": 84, "build_info": 85, "collect_al": 86, "collect_all_async": 87, "concat": [88, 472, 597, 1038, 1142], "disable_string_cach": 89, "enable_string_cach": 90, "except": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 303], "arrowerror": 91, "columnnotfounderror": 92, "computeerror": 93, "duplicateerror": 94, "invalidoperationerror": 95, "nodataerror": 96, "norowsreturnederror": 97, "polarspanicerror": 98, "rowserror": 99, "schemaerror": 100, "schemafieldnotfounderror": 101, "shapeerror": 102, "structfieldnotfounderror": 103, "toomanyrowsreturnederror": 104, "from_arrow": 105, "from_datafram": 106, "from_dict": [107, 108], "from_numpi": 109, "from_panda": 110, "from_record": 111, "from_repr": 112, "get_index_typ": 113, "io": 114, "csv": [114, 764], "batched_read": 114, "batchedcsvread": [114, 764], "next_batch": 114, "read_avro": 115, "read_csv": 116, "read_csv_batch": 117, "read_databas": 118, "read_database_uri": 119, "read_delta": 120, "read_excel": 121, "read_ipc": 122, "read_ipc_schema": 123, "read_ipc_stream": 124, "read_json": 125, "read_ndjson": 126, "read_od": 127, "read_parquet": 128, "read_parquet_schema": 129, "scan_csv": 130, "scan_delta": 131, "scan_iceberg": 132, "scan_ipc": 133, "scan_ndjson": 134, "scan_parquet": 135, "scan_pyarrow_dataset": 136, "set_random_se": 137, "show_vers": 138, "test": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 1238], "assert_frame_equ": 139, "assert_frame_not_equ": 140, "assert_series_equ": 141, "assert_series_not_equ": 142, "parametr": [143, 144, 145, 146, 147, 148, 149, 1238], "column": [143, 144, 161, 748, 774], "create_list_strategi": 145, "load_profil": 147, "seri": [148, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1229], "set_profil": 149, "threadpool_s": 150, "using_string_cach": 151, "option": 152, "current": 152, "us": 152, "context": 152, "manag": 152, "decor": 152, "aggreg": [153, 304, 765, 864], "__dataframe__": 154, "appli": [155, 279, 313, 673, 843, 870], "approx_n_uniqu": [156, 314, 674, 766], "bottom_k": [157, 339, 767, 894], "cast": [158, 340, 769, 895], "clear": [159, 770, 905], "clone": [160, 771, 909], "corr": [162, 683], "count": [163, 280, 351, 684, 775, 844], "describ": [164, 923], "drop": [165, 777], "drop_in_plac": 166, "drop_nul": [167, 368, 477, 778, 927, 1043], "dtype": [168, 779, 981], "equal": [169, 983], "estimated_s": [170, 984], "explod": [171, 425, 479, 605, 781, 989, 1045, 1150], "fill_nan": [173, 427, 783, 992], "fill_nul": [174, 428, 784, 993], "filter": [175, 429, 785, 994], "find_idx_by_nam": 176, "flag": [177, 995], "fold": [178, 704], "frame_equ": 179, "gather_everi": [180, 437, 787, 998], "get_column": [181, 183], "get_column_index": 182, "glimps": 184, "group_bi": [185, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 788, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856], "group_by_dynam": [186, 789], "group_by_rol": [187, 790], "groupbi": [188, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 297, 791, 859], "groupby_dynam": [189, 792], "groupby_rol": [190, 793], "hash_row": 191, "head": [192, 282, 442, 483, 708, 794, 846, 1002, 1049], "height": 193, "hstack": 194, "insert_at_idx": 195, "insert_column": 196, "interpol": [197, 446, 796, 1006], "is_dupl": [198, 448, 1009], "is_empti": [199, 1010], "is_uniqu": [200, 461, 1027], "item": [201, 1029], "iter_column": 202, "iter_row": 203, "iter_slic": 204, "join": [205, 484, 797, 1050], "join_asof": [206, 798], "lazi": [207, 800], "limit": [208, 467, 801, 1032], "map_row": 209, "max": [210, 285, 328, 488, 516, 717, 804, 849, 884, 943, 1054, 1078], "max_horizont": [211, 718], "mean": [212, 286, 489, 517, 719, 805, 850, 944, 1055, 1079], "mean_horizont": 213, "median": [214, 287, 518, 720, 806, 851, 945, 1080], "melt": [215, 807], "merge_sort": [216, 808], "min": [217, 288, 329, 490, 529, 721, 809, 852, 885, 950, 1056, 1081], "min_horizont": [218, 722], "n_chunk": [219, 1083], "n_uniqu": [220, 289, 533, 723, 853, 1084], "null_count": [221, 545, 810, 1090], "partition_bi": 222, "pipe": [223, 551, 811], "pivot": 224, "plot": [225, 301, 1094, 1233], "product": [226, 554, 1095], "quantil": [227, 290, 556, 725, 813, 854, 1097], "rechunk": [228, 559, 1099], "renam": [229, 814, 1101], "replac": [230, 562, 621, 1102, 1166], "replace_at_idx": 231, "replace_column": 232, "revers": [233, 491, 564, 624, 815, 1057, 1104, 1169], "roll": [234, 567, 816], "row": [235, 236], "rows_by_kei": 237, "sampl": [238, 492, 581, 1058, 1120], "schema": [239, 817, 1197], "select": [240, 300, 730, 755, 818, 862, 1232], "select_seq": [241, 819], "set_sort": [242, 583, 821, 1126], "shape": [243, 1127], "shift": [244, 497, 584, 822, 1063, 1128], "shift_and_fil": [245, 585, 823, 1129], "shrink_to_fit": [246, 1131], "slice": [247, 498, 592, 627, 825, 1064, 1137, 1172], "sort": [248, 499, 593, 826, 1065, 1138], "std": [249, 596, 732, 827, 1140], "sum": [250, 291, 330, 500, 653, 734, 828, 855, 886, 1066, 1199], "sum_horizont": [251, 735], "tail": [252, 292, 501, 654, 736, 829, 856, 1067, 1200], "take_everi": [253, 656, 830, 1202], "to_arrow": [254, 1205], "to_dict": [255, 256], "to_dummi": [257, 1206], "to_init_repr": [258, 1208], "to_numpi": [259, 1210], "to_panda": [260, 1211], "to_seri": 261, "to_struct": [262, 504, 1070], "top_k": [263, 660, 831, 1213], "transpos": 264, "uniqu": [265, 332, 505, 662, 832, 888, 1071, 1214], "unnest": [266, 833, 1198], "unstack": 267, "updat": [268, 834], "upsampl": 269, "var": [270, 666, 740, 835, 1218], "vstack": 271, "width": [272, 836], "with_column": [273, 837], "with_columns_seq": [274, 838], "with_row_count": [275, 840], "__iter__": 276, "agg": [277, 841], "all": [278, 309, 326, 468, 669, 842, 867, 882, 1034], "first": [281, 430, 480, 703, 786, 845, 1046], "last": [283, 464, 485, 712, 799, 847, 1051], "map_group": [284, 716, 848], "attribut": [293, 857, 1222], "comput": [294, 749, 1226], "descript": [295, 858, 1227], "export": [296, 1228], "miscellan": [299, 754, 762, 861, 1231], "manipul": [300, 755, 862, 1232], "data": 302, "type": 302, "numer": [302, 757], "tempor": [302, 760, 1236], "nest": 302, "other": 302, "expr": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668], "ab": [305, 865], "add": 306, "agg_group": 307, "alia": [308, 866], "and_": 310, "ani": [311, 327, 469, 671, 868, 883, 1035], "append": [312, 869], "arcco": [315, 871], "arccosh": [316, 872], "arcsin": [317, 873], "arcsinh": [318, 874], "arctan": [319, 875], "arctanh": [320, 876], "arg_max": [321, 470, 877, 1036], "arg_min": [322, 471, 878, 1037], "arg_sort": [323, 879], "arg_tru": [324, 880], "arg_uniqu": [325, 881], "arr": [326, 327, 328, 329, 330, 331, 332, 882, 883, 884, 885, 886, 887, 888], "to_list": [331, 887, 1209], "backward_fil": 333, "bin": [334, 335, 336, 337, 338, 889, 890, 891, 892, 893], "contain": [334, 473, 598, 889, 1039, 1143], "decod": [335, 602, 890, 1147], "encod": [336, 603, 891, 1148], "ends_with": [337, 604, 892, 1149], "starts_with": [338, 631, 893, 1176], "cat": [341, 342, 896, 897, 898, 899, 900, 901], "get_categori": [341, 897], "set_ord": [342, 899], "cbrt": [343, 902], "ceil": [344, 903], "clip": [345, 906], "clip_max": [346, 907], "clip_min": [347, 908], "co": [348, 910], "cosh": [349, 911], "cot": [350, 912], "cum_count": 352, "cum_max": [353, 913], "cum_min": [354, 914], "cum_prod": [355, 915], "cum_sum": [356, 688, 916], "cumcount": 357, "cummax": [358, 917], "cummin": [359, 918], "cumprod": [360, 919], "cumsum": [361, 692, 920], "cumulative_ev": [362, 921], "cut": [363, 922], "degre": 364, "diff": [365, 476, 924, 1042], "dot": [366, 925], "drop_nan": [367, 926], "dt": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980], "base_utc_offset": [369, 929], "cast_time_unit": [370, 930], "combin": [371, 931], "convert_time_zon": [372, 932], "dai": [375, 376, 935, 936], "dst_offset": [377, 937], "epoch": [378, 938], "hour": [379, 380, 939, 940], "is_leap_year": [381, 941], "iso_year": [382, 942], "microsecond": [383, 384, 946, 947], "millisecond": [385, 386, 948, 949], "minut": [387, 388, 951, 952], "month": [389, 953], "month_end": [390, 954], "month_start": [391, 955], "nanosecond": [392, 393, 956, 957], "offset_bi": [394, 958], "ordinal_dai": [395, 959], "quarter": [396, 960], "replace_time_zon": [397, 961], "round": [398, 579, 962, 1118], "second": [399, 400, 963, 964], "strftime": [401, 965], "timestamp": [403, 967], "to_str": [404, 968], "total_dai": [405, 969], "total_hour": [406, 970], "total_microsecond": [407, 971], "total_millisecond": [408, 972], "total_minut": [409, 973], "total_nanosecond": [410, 974], "total_second": [411, 975], "truncat": [412, 976], "week": [413, 977], "weekdai": [414, 978], "with_time_unit": [415, 979], "year": [416, 980], "entropi": [417, 982], "eq": [418, 519], "eq_miss": 419, "ewm_mean": [420, 985], "ewm_std": [421, 986], "ewm_var": [422, 987], "exclud": [423, 702], "exp": [424, 988], "extend_const": [426, 991], "flatten": 431, "floor": [432, 996], "floordiv": 433, "forward_fil": 434, "from_json": 435, "gather": [436, 481, 997, 1047], "ge": 438, "get": [439, 482, 1048], "gt": 440, "hash": [441, 1001], "hist": [443, 1003], "implod": [444, 709, 1004], "inspect": [445, 795], "is_between": [447, 1007], "is_finit": [449, 1011], "is_first": [450, 1012], "is_first_distinct": [451, 1013], "is_in": [452, 1015], "is_infinit": [453, 1016], "is_last": [454, 1018], "is_last_distinct": [455, 1019], "is_nan": [456, 1020], "is_not": 457, "is_not_nan": [458, 1021], "is_not_nul": [459, 1022], "is_nul": [460, 1023], "keep_nam": 462, "kurtosi": [463, 1030], "le": 465, "len": [466, 486, 1031, 1052], "count_match": [474, 475, 600, 601, 1040, 1041, 1145, 1146], "eval": [478, 1044], "length": [487, 614, 1053, 1159], "set_differ": [493, 1059], "set_intersect": [494, 1060], "set_symmetric_differ": [495, 1061], "set_union": [496, 1062], "take": [502, 655, 1068, 1201], "to_arrai": [503, 1069], "log": [506, 1072], "log10": [507, 1073], "log1p": [508, 1074], "lower_bound": [509, 1075], "lt": 510, "map": [511, 535, 714, 802], "map_alia": 512, "map_batch": [513, 715, 803], "map_dict": [514, 1076], "map_el": [515, 1077], "meta": [519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 753], "has_multiple_output": 520, "is_regex_project": 521, "ne": [522, 542], "output_nam": 523, "pop": 524, "root_nam": 525, "tree_format": 526, "undo_alias": 527, "mod": 530, "mode": [531, 1082], "mul": 532, "name": [534, 535, 536, 537, 538, 539, 748, 756, 1085], "keep": 534, "prefix": [536, 553], "suffix": [537, 652], "to_lowercas": [538, 643, 1188], "to_uppercas": [539, 646, 1191], "nan_max": [540, 1086], "nan_min": [541, 1087], "ne_miss": 543, "not_": [544, 1089], "or_": 546, "over": 547, "pct_chang": [548, 1091], "peak_max": [549, 1092], "peak_min": [550, 1093], "pow": 552, "qcut": [555, 1096], "radian": 557, "rank": [558, 1098], "reinterpret": [560, 1100], "repeat_bi": 561, "reshap": [563, 1103], "rle": [565, 1105], "rle_id": [566, 1106], "rolling_appli": [568, 1107], "rolling_map": [569, 1108], "rolling_max": [570, 1109], "rolling_mean": [571, 1110], "rolling_median": [572, 1111], "rolling_min": [573, 1112], "rolling_quantil": [574, 1113], "rolling_skew": [575, 1114], "rolling_std": [576, 1115], "rolling_sum": [577, 1116], "rolling_var": [578, 1117], "round_sig_fig": [580, 1119], "search_sort": [582, 1122], "shrink_dtyp": [586, 1130], "shuffl": [587, 1132], "sign": [588, 1133], "sin": [589, 1134], "sinh": [590, 1135], "skew": [591, 1136], "sort_bi": 594, "sqrt": [595, 1139], "str": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192], "contains_ani": [599, 1144], "extract": [606, 1151], "extract_al": [607, 1152], "extract_group": [608, 1153], "json_decod": [609, 1154], "json_extract": [610, 1155], "json_path_match": [611, 1156], "len_byt": [612, 1157], "len_char": [613, 1158], "ljust": [615, 1160], "lstrip": [616, 1161], "n_char": [617, 1162], "pad_end": [618, 1163], "pad_start": [619, 1164], "parse_int": [620, 1165], "replace_al": [622, 1167], "replace_mani": [623, 1168], "rjust": [625, 1170], "rstrip": [626, 1171], "split": [628, 1173], "split_exact": [629, 1174], "splitn": [630, 1175], "strip": [632, 1177], "strip_char": [633, 1178], "strip_chars_end": [634, 1179], "strip_chars_start": [635, 1180], "strip_prefix": [636, 1181], "strip_suffix": [637, 1182], "strptime": [638, 1183], "to_dat": [639, 1184], "to_datetim": [640, 1185], "to_decim": [641, 1186], "to_integ": [642, 1187], "to_tim": [644, 1189], "to_titlecas": [645, 1190], "zfill": [647, 1192], "field": [648, 1193, 1194], "json_encod": [649, 1195], "rename_field": [650, 1196], "sub": 651, "tan": [657, 1203], "tanh": [658, 1204], "to_phys": [659, 1212], "truediv": 661, "unique_count": [663, 1215], "upper_bound": [664, 1216], "value_count": [665, 1217], "where": 667, "xor": 668, "all_horizont": 670, "any_horizont": 672, "arang": 675, "arctan2": 676, "arctan2d": 677, "arg_sort_bi": 678, "arg_wher": 679, "coalesc": 680, "concat_list": 681, "concat_str": 682, "cov": 685, "cum_fold": 686, "cum_reduc": 687, "cum_sum_horizont": 689, "cumfold": 690, "cumreduc": 691, "cumsum_horizont": 693, "date_rang": [695, 696], "datetime_rang": [698, 699], "element": 701, "format": 705, "from_epoch": 706, "group": 707, "int_rang": [710, 711], "lit": 713, "ones": 724, "reduc": 726, "repeat": 727, "rolling_corr": 728, "rolling_cov": 729, "sql_expr": 731, "time_rang": [738, 739], "when": 741, "zero": 742, "categori": [746, 1225], "col": 747, "express": 751, "oper": [757, 863], "conjunct": 757, "comparison": 757, "window": 761, "convers": 762, "parallel": 762, "random": 762, "refer": 763, "input": 764, "output": 764, "feather": 764, "ipc": 764, "parquet": 764, "databas": 764, "json": 764, "avro": 764, "spreadsheet": 764, "apach": 764, "iceberg": 764, "delta": 764, "lake": 764, "dataset": 764, "cach": 768, "collect": 772, "collect_async": 773, "deseri": 776, "explain": 780, "fetch": 782, "profil": [812, 1238], "serial": 820, "show_graph": 824, "with_context": 839, "lazygroupbi": [841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856], "read": 861, "write": 861, "logic": 861, "plan": 861, "selector": 863, "import": 863, "set": [863, 1124], "is_loc": 898, "to_loc": 900, "uses_lexical_ord": 901, "chunk_length": 904, "get_chunk": 999, "has_valid": 1000, "inner_dtyp": 1005, "is_boolean": 1008, "is_float": 1014, "is_integ": 1017, "is_numer": 1024, "is_sort": 1025, "is_tempor": 1026, "is_utf8": 1028, "new_from_index": 1088, "scatter": 1121, "series_equ": 1123, "set_at_idx": 1125, "to_fram": 1207, "view": 1219, "zip_with": 1220, "sql": 1237, "method": 1237, "assert": 1238, "primit": 1238, "strategi": 1238, "helper": 1238, "util": 1239}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.min": [[217, "polars-dataframe-min"]], "polars.DataFrame.insert_column": [[196, "polars-dataframe-insert-column"]], "polars.DataFrame.drop": [[165, "polars-dataframe-drop"]], "polars.DataFrame.iter_columns": [[202, "polars-dataframe-iter-columns"]], "polars.DataFrame.mean_horizontal": [[213, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.groupby_rolling": [[190, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.group_by": [[185, "polars-dataframe-group-by"]], "polars.DataFrame.item": [[201, "polars-dataframe-item"]], "polars.DataFrame.groupby_dynamic": [[189, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.interpolate": [[197, "polars-dataframe-interpolate"]], "polars.DataFrame.join": [[205, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[206, "polars-dataframe-join-asof"]], "polars.DataFrame.get_columns": [[183, "polars-dataframe-get-columns"]], "polars.DataFrame.group_by_dynamic": [[186, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.limit": [[208, "polars-dataframe-limit"]], "polars.DataFrame.group_by_rolling": [[187, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.estimated_size": [[170, "polars-dataframe-estimated-size"]], "polars.DataFrame.iter_slices": [[204, "polars-dataframe-iter-slices"]], "polars.DataFrame.frame_equal": [[179, "polars-dataframe-frame-equal"]], "polars.DataFrame.is_duplicated": [[198, "polars-dataframe-is-duplicated"]], "polars.DataFrame.dtypes": [[168, "polars-dataframe-dtypes"]], "polars.DataFrame.map_rows": [[209, "polars-dataframe-map-rows"]], "polars.DataFrame.merge_sorted": [[216, "polars-dataframe-merge-sorted"]], "polars.DataFrame.extend": [[172, "polars-dataframe-extend"]], "polars.DataFrame.hash_rows": [[191, "polars-dataframe-hash-rows"]], "polars.DataFrame.fill_null": [[174, "polars-dataframe-fill-null"]], "polars.DataFrame.melt": [[215, "polars-dataframe-melt"]], "polars.DataFrame.flags": [[177, "polars-dataframe-flags"]], "polars.DataFrame.get_column_index": [[182, "polars-dataframe-get-column-index"]], "polars.DataFrame.fold": [[178, "polars-dataframe-fold"]], "polars.DataFrame.find_idx_by_name": [[176, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.glimpse": [[184, "polars-dataframe-glimpse"]], "polars.DataFrame.head": [[192, "polars-dataframe-head"]], "polars.DataFrame.is_empty": [[199, "polars-dataframe-is-empty"]], "polars.DataFrame.filter": [[175, "polars-dataframe-filter"]], "polars.DataFrame.max": [[210, "polars-dataframe-max"]], "polars.DataFrame.height": [[193, "polars-dataframe-height"]], "polars.DataFrame.iter_rows": [[203, "polars-dataframe-iter-rows"]], "polars.DataFrame.hstack": [[194, "polars-dataframe-hstack"]], "polars.DataFrame.gather_every": [[180, "polars-dataframe-gather-every"]], "polars.DataFrame.is_unique": [[200, "polars-dataframe-is-unique"]], "polars.DataFrame.explode": [[171, "polars-dataframe-explode"]], "polars.DataFrame.equals": [[169, "polars-dataframe-equals"]], "polars.DataFrame.drop_nulls": [[167, "polars-dataframe-drop-nulls"]], "polars.DataFrame.median": [[214, "polars-dataframe-median"]], "polars.DataFrame.min_horizontal": [[218, "polars-dataframe-min-horizontal"]], "polars.DataFrame.drop_in_place": [[166, "polars-dataframe-drop-in-place"]], "polars.DataFrame.mean": [[212, "polars-dataframe-mean"]], "polars.DataFrame.n_chunks": [[219, "polars-dataframe-n-chunks"]], "polars.DataFrame.fill_nan": [[173, "polars-dataframe-fill-nan"]], "polars.DataFrame.max_horizontal": [[211, "polars-dataframe-max-horizontal"]], "polars.DataFrame.groupby": [[188, "polars-dataframe-groupby"]], "polars.DataFrame.insert_at_idx": [[195, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.lazy": [[207, "polars-dataframe-lazy"]], "polars.DataFrame.get_column": [[181, "polars-dataframe-get-column"]], "polars.testing.assert_series_not_equal": [[142, "polars-testing-assert-series-not-equal"]], "polars.read_delta": [[120, "polars-read-delta"]], "polars.testing.parametric.create_list_strategy": [[145, "polars-testing-parametric-create-list-strategy"]], "polars.read_csv": [[116, "polars-read-csv"]], "polars.read_database_uri": [[119, "polars-read-database-uri"]], "polars.testing.assert_frame_not_equal": [[140, "polars-testing-assert-frame-not-equal"]], "polars.scan_csv": [[130, "polars-scan-csv"]], "polars.read_ods": [[127, "polars-read-ods"]], "polars.read_ipc_stream": [[124, "polars-read-ipc-stream"]], "polars.DataFrame.corr": [[162, "polars-dataframe-corr"]], "polars.testing.assert_frame_equal": [[139, "polars-testing-assert-frame-equal"]], "polars.testing.assert_series_equal": [[141, "polars-testing-assert-series-equal"]], "polars.read_parquet": [[128, "polars-read-parquet"]], "polars.scan_ndjson": [[134, "polars-scan-ndjson"]], "polars.DataFrame.describe": [[164, "polars-dataframe-describe"]], "Aggregation": [[153, "aggregation"], [864, "aggregation"], [765, "aggregation"], [304, "aggregation"]], "polars.from_records": [[111, "polars-from-records"]], "polars.testing.parametric.set_profile": [[149, "polars-testing-parametric-set-profile"]], "polars.get_index_type": [[113, "polars-get-index-type"]], "polars.read_avro": [[115, "polars-read-avro"]], "polars.testing.parametric.dataframes": [[146, "polars-testing-parametric-dataframes"]], "polars.DataFrame.count": [[163, "polars-dataframe-count"]], "polars.scan_delta": [[131, "polars-scan-delta"]], "polars.set_random_seed": [[137, "polars-set-random-seed"]], "polars.read_ipc_schema": [[123, "polars-read-ipc-schema"]], "polars.read_database": [[118, "polars-read-database"]], "polars.using_string_cache": [[151, "polars-using-string-cache"]], "polars.testing.parametric.series": [[148, "polars-testing-parametric-series"]], "polars.scan_parquet": [[135, "polars-scan-parquet"]], "polars.DataFrame.__dataframe__": [[154, "polars-dataframe-dataframe"]], "polars.read_ipc": [[122, "polars-read-ipc"]], "polars.DataFrame.apply": [[155, "polars-dataframe-apply"]], "polars.DataFrame.clear": [[159, "polars-dataframe-clear"]], "polars.testing.parametric.columns": [[144, "polars-testing-parametric-columns"]], "polars.from_repr": [[112, "polars-from-repr"]], "polars.from_pandas": [[110, "polars-from-pandas"]], "polars.testing.parametric.load_profile": [[147, "polars-testing-parametric-load-profile"]], "polars.scan_iceberg": [[132, "polars-scan-iceberg"]], "polars.scan_ipc": [[133, "polars-scan-ipc"]], "polars.DataFrame.clone": [[160, "polars-dataframe-clone"]], "polars.DataFrame.bottom_k": [[157, "polars-dataframe-bottom-k"]], "polars.read_excel": [[121, "polars-read-excel"]], "polars.DataFrame.columns": [[161, "polars-dataframe-columns"]], "polars.read_json": [[125, "polars-read-json"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[114, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_csv_batched": [[117, "polars-read-csv-batched"]], "polars.show_versions": [[138, "polars-show-versions"]], "polars.testing.parametric.column": [[143, "polars-testing-parametric-column"]], "polars.threadpool_size": [[150, "polars-threadpool-size"]], "Config": [[152, "config"]], "Config options": [[152, "config-options"]], "Config load, save, and current state": [[152, "config-load-save-and-current-state"]], "Use as a context manager": [[152, "use-as-a-context-manager"]], "Use as a function decorator": [[152, "use-as-a-function-decorator"]], "polars.DataFrame.cast": [[158, "polars-dataframe-cast"]], "polars.scan_pyarrow_dataset": [[136, "polars-scan-pyarrow-dataset"]], "polars.read_ndjson": [[126, "polars-read-ndjson"]], "polars.read_parquet_schema": [[129, "polars-read-parquet-schema"]], "polars.DataFrame.approx_n_unique": [[156, "polars-dataframe-approx-n-unique"]], "polars.Series.str.n_chars": [[1162, "polars-series-str-n-chars"]], "polars.Series.take_every": [[1202, "polars-series-take-every"]], "polars.Series.str.replace_all": [[1167, "polars-series-str-replace-all"]], "polars.Series.str.strip_chars_end": [[1179, "polars-series-str-strip-chars-end"]], "polars.Series.str.lengths": [[1159, "polars-series-str-lengths"]], "polars.Series.str.to_uppercase": [[1191, "polars-series-str-to-uppercase"]], "polars.Series.to_arrow": [[1205, "polars-series-to-arrow"]], "polars.Series.struct.json_encode": [[1195, "polars-series-struct-json-encode"]], "polars.Series.str.parse_int": [[1165, "polars-series-str-parse-int"]], "polars.Series.struct.rename_fields": [[1196, "polars-series-struct-rename-fields"]], "polars.Series.str.to_decimal": [[1186, "polars-series-str-to-decimal"]], "polars.Series.struct.fields": [[1194, "polars-series-struct-fields"]], "polars.Series.str.strip_chars": [[1178, "polars-series-str-strip-chars"]], "polars.Series.str.pad_start": [[1164, "polars-series-str-pad-start"]], "polars.Series.to_dummies": [[1206, "polars-series-to-dummies"]], "polars.Series.to_list": [[1209, "polars-series-to-list"]], "polars.Series.str.reverse": [[1169, "polars-series-str-reverse"]], "polars.Series.to_init_repr": [[1208, "polars-series-to-init-repr"]], "polars.Series.str.to_titlecase": [[1190, "polars-series-str-to-titlecase"]], "polars.Series.str.split_exact": [[1174, "polars-series-str-split-exact"]], "polars.Series.str.strip": [[1177, "polars-series-str-strip"]], "polars.Series.str.strptime": [[1183, "polars-series-str-strptime"]], "polars.Series.take": [[1201, "polars-series-take"]], "polars.Series.str.starts_with": [[1176, "polars-series-str-starts-with"]], "polars.Series.struct.unnest": [[1198, "polars-series-struct-unnest"]], "polars.Series.str.splitn": [[1175, "polars-series-str-splitn"]], "polars.Series.str.json_path_match": [[1156, "polars-series-str-json-path-match"]], "polars.Series.str.ljust": [[1160, "polars-series-str-ljust"]], "polars.Series.str.slice": [[1172, "polars-series-str-slice"]], "polars.Series.tanh": [[1204, "polars-series-tanh"]], "polars.Series.str.replace": [[1166, "polars-series-str-replace"]], "polars.Series.str.replace_many": [[1168, "polars-series-str-replace-many"]], "polars.Series.str.strip_suffix": [[1182, "polars-series-str-strip-suffix"]], "polars.Series.str.strip_chars_start": [[1180, "polars-series-str-strip-chars-start"]], "polars.Series.tan": [[1203, "polars-series-tan"]], "polars.Series.tail": [[1200, "polars-series-tail"]], "polars.Series.str.len_bytes": [[1157, "polars-series-str-len-bytes"]], "polars.Series.str.pad_end": [[1163, "polars-series-str-pad-end"]], "polars.Series.str.to_lowercase": [[1188, "polars-series-str-to-lowercase"]], "polars.Series.struct.field": [[1193, "polars-series-struct-field"]], "polars.Series.str.rstrip": [[1171, "polars-series-str-rstrip"]], "polars.Series.str.lstrip": [[1161, "polars-series-str-lstrip"]], "polars.Series.str.to_time": [[1189, "polars-series-str-to-time"]], "polars.Series.str.to_date": [[1184, "polars-series-str-to-date"]], "polars.Series.str.zfill": [[1192, "polars-series-str-zfill"]], "polars.Series.str.to_integer": [[1187, "polars-series-str-to-integer"]], "polars.Series.str.to_datetime": [[1185, "polars-series-str-to-datetime"]], "polars.Series.str.rjust": [[1170, "polars-series-str-rjust"]], "polars.Series.str.split": [[1173, "polars-series-str-split"]], "polars.Series.str.strip_prefix": [[1181, "polars-series-str-strip-prefix"]], "polars.Series.to_frame": [[1207, "polars-series-to-frame"]], "polars.Series.struct.schema": [[1197, "polars-series-struct-schema"]], "polars.Series.str.len_chars": [[1158, "polars-series-str-len-chars"]], "polars.Series.str.json_extract": [[1155, "polars-series-str-json-extract"]], "polars.Series.sum": [[1199, "polars-series-sum"]], "polars.List": [[61, "polars-list"]], "polars.concat": [[88, "polars-concat"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.exceptions.TooManyRowsReturnedError": [[104, "polars-exceptions-toomanyrowsreturnederror"]], "polars.api.register_series_namespace": [[84, "polars-api-register-series-namespace"]], "polars.align_frames": [[80, "polars-align-frames"]], "polars.String": [[70, "polars-string"]], "polars.from_dict": [[107, "polars-from-dict"]], "polars.exceptions.ComputeError": [[93, "polars-exceptions-computeerror"]], "polars.from_numpy": [[109, "polars-from-numpy"]], "polars.build_info": [[85, "polars-build-info"]], "polars.exceptions.ArrowError": [[91, "polars-exceptions-arrowerror"]], "polars.Object": [[63, "polars-object"]], "polars.SQLContext.unregister": [[69, "polars-sqlcontext-unregister"]], "polars.Int8": [[57, "polars-int8"]], "polars.collect_all_async": [[87, "polars-collect-all-async"]], "polars.SQLContext.tables": [[68, "polars-sqlcontext-tables"]], "polars.Utf8": [[79, "polars-utf8"]], "polars.exceptions.StructFieldNotFoundError": [[103, "polars-exceptions-structfieldnotfounderror"]], "polars.api.register_expr_namespace": [[82, "polars-api-register-expr-namespace"]], "polars.api.register_dataframe_namespace": [[81, "polars-api-register-dataframe-namespace"]], "polars.Null": [[62, "polars-null"]], "polars.exceptions.SchemaError": [[100, "polars-exceptions-schemaerror"]], "polars.SQLContext.register_many": [[67, "polars-sqlcontext-register-many"]], "polars.exceptions.ShapeError": [[102, "polars-exceptions-shapeerror"]], "polars.UInt32": [[75, "polars-uint32"]], "polars.Unknown": [[78, "polars-unknown"]], "polars.exceptions.NoRowsReturnedError": [[97, "polars-exceptions-norowsreturnederror"]], "polars.from_dataframe": [[106, "polars-from-dataframe"]], "polars.SQLContext.register": [[65, "polars-sqlcontext-register"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.api.register_lazyframe_namespace": [[83, "polars-api-register-lazyframe-namespace"]], "polars.SQLContext.register_globals": [[66, "polars-sqlcontext-register-globals"]], "polars.StringCache": [[71, "polars-stringcache"]], "polars.from_dicts": [[108, "polars-from-dicts"]], "polars.exceptions.DuplicateError": [[94, "polars-exceptions-duplicateerror"]], "polars.LazyFrame.sink_parquet": [[60, "polars-lazyframe-sink-parquet"]], "polars.Struct": [[72, "polars-struct"]], "polars.UInt8": [[77, "polars-uint8"]], "polars.exceptions.NoDataError": [[96, "polars-exceptions-nodataerror"]], "polars.UInt64": [[76, "polars-uint64"]], "polars.exceptions.SchemaFieldNotFoundError": [[101, "polars-exceptions-schemafieldnotfounderror"]], "polars.UInt16": [[74, "polars-uint16"]], "polars.exceptions.PolarsPanicError": [[98, "polars-exceptions-polarspanicerror"]], "polars.SQLContext.execute": [[64, "polars-sqlcontext-execute"]], "polars.from_arrow": [[105, "polars-from-arrow"]], "polars.exceptions.InvalidOperationError": [[95, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.RowsError": [[99, "polars-exceptions-rowserror"]], "polars.enable_string_cache": [[90, "polars-enable-string-cache"]], "polars.Int64": [[56, "polars-int64"]], "polars.collect_all": [[86, "polars-collect-all"]], "polars.exceptions.ColumnNotFoundError": [[92, "polars-exceptions-columnnotfounderror"]], "polars.Int32": [[55, "polars-int32"]], "polars.Time": [[73, "polars-time"]], "polars.disable_string_cache": [[89, "polars-disable-string-cache"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1233, "examples"], [1238, "examples"], [863, "examples"], [301, "examples"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Enum": [[51, "polars-enum"]], "polars.Float32": [[52, "polars-float32"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Date": [[47, "polars-date"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Float64": [[53, "polars-float64"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Binary": [[3, "polars-binary"]], "Index": [[0, "index"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Series.log10": [[1073, "polars-series-log10"]], "polars.Series.list.min": [[1056, "polars-series-list-min"]], "polars.Series.list.shift": [[1063, "polars-series-list-shift"]], "polars.Series.list.reverse": [[1057, "polars-series-list-reverse"]], "polars.Series.map_elements": [[1077, "polars-series-map-elements"]], "polars.Series.n_chunks": [[1083, "polars-series-n-chunks"]], "polars.Series.map_dict": [[1076, "polars-series-map-dict"]], "polars.Series.list.join": [[1050, "polars-series-list-join"]], "polars.Series.name": [[1085, "polars-series-name"]], "polars.Series.min": [[1081, "polars-series-min"]], "polars.Series.peak_max": [[1092, "polars-series-peak-max"]], "polars.Series.nan_max": [[1086, "polars-series-nan-max"]], "polars.Series.rechunk": [[1099, "polars-series-rechunk"]], "polars.Series.quantile": [[1097, "polars-series-quantile"]], "polars.Series.qcut": [[1096, "polars-series-qcut"]], "polars.Series.list.get": [[1048, "polars-series-list-get"]], "polars.Series.list.slice": [[1064, "polars-series-list-slice"]], "polars.Series.list.max": [[1054, "polars-series-list-max"]], "polars.Series.list.set_difference": [[1059, "polars-series-list-set-difference"]], "polars.Series.product": [[1095, "polars-series-product"]], "polars.Series.rank": [[1098, "polars-series-rank"]], "polars.Series.list.unique": [[1071, "polars-series-list-unique"]], "polars.Series.list.set_symmetric_difference": [[1061, "polars-series-list-set-symmetric-difference"]], "polars.Series.lower_bound": [[1075, "polars-series-lower-bound"]], "polars.Series.mode": [[1082, "polars-series-mode"]], "polars.Series.pct_change": [[1091, "polars-series-pct-change"]], "polars.Series.null_count": [[1090, "polars-series-null-count"]], "polars.Series.median": [[1080, "polars-series-median"]], "polars.Series.list.sample": [[1058, "polars-series-list-sample"]], "polars.Series.list.lengths": [[1053, "polars-series-list-lengths"]], "polars.Series.list.sort": [[1065, "polars-series-list-sort"]], "polars.Series.list.to_array": [[1069, "polars-series-list-to-array"]], "polars.Series.list.set_union": [[1062, "polars-series-list-set-union"]], "polars.Series.list.explode": [[1045, "polars-series-list-explode"]], "polars.Series.list.sum": [[1066, "polars-series-list-sum"]], "polars.Series.not_": [[1089, "polars-series-not"]], "polars.Series.log1p": [[1074, "polars-series-log1p"]], "polars.Series.list.len": [[1052, "polars-series-list-len"]], "polars.Series.max": [[1078, "polars-series-max"]], "polars.Series.peak_min": [[1093, "polars-series-peak-min"]], "polars.Series.list.head": [[1049, "polars-series-list-head"]], "polars.Series.list.first": [[1046, "polars-series-list-first"]], "polars.Series.mean": [[1079, "polars-series-mean"]], "polars.Series.list.tail": [[1067, "polars-series-list-tail"]], "polars.Series.log": [[1072, "polars-series-log"]], "polars.Series.n_unique": [[1084, "polars-series-n-unique"]], "polars.Series.list.gather": [[1047, "polars-series-list-gather"]], "polars.Series.list.to_struct": [[1070, "polars-series-list-to-struct"]], "polars.Series.new_from_index": [[1088, "polars-series-new-from-index"]], "polars.Series.list.mean": [[1055, "polars-series-list-mean"]], "polars.Series.list.set_intersection": [[1060, "polars-series-list-set-intersection"]], "polars.Series.list.last": [[1051, "polars-series-list-last"]], "polars.Series.nan_min": [[1087, "polars-series-nan-min"]], "polars.Series.list.take": [[1068, "polars-series-list-take"]], "polars.Series.plot": [[1094, "polars-series-plot"]], "polars.Series.shift": [[1128, "polars-series-shift"]], "polars.Series.shrink_to_fit": [[1131, "polars-series-shrink-to-fit"]], "polars.Series.rle_id": [[1106, "polars-series-rle-id"]], "polars.Series.rolling_median": [[1111, "polars-series-rolling-median"]], "polars.Series.shape": [[1127, "polars-series-shape"]], "polars.Series.std": [[1140, "polars-series-std"]], "polars.Series.rolling_map": [[1108, "polars-series-rolling-map"]], "polars.Series.set_sorted": [[1126, "polars-series-set-sorted"]], "polars.Series.str.ends_with": [[1149, "polars-series-str-ends-with"]], "polars.Series.rle": [[1105, "polars-series-rle"]], "polars.Series.str.contains": [[1143, "polars-series-str-contains"]], "polars.Series.round": [[1118, "polars-series-round"]], "polars.Series.rolling_var": [[1117, "polars-series-rolling-var"]], "polars.Series.shift_and_fill": [[1129, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[1130, "polars-series-shrink-dtype"]], "polars.Series.sign": [[1133, "polars-series-sign"]], "polars.Series.str": [[1141, "polars-series-str"]], "polars.Series.str.contains_any": [[1144, "polars-series-str-contains-any"]], "polars.Series.rolling_max": [[1109, "polars-series-rolling-max"]], "polars.Series.str.extract": [[1151, "polars-series-str-extract"]], "polars.Series.str.encode": [[1148, "polars-series-str-encode"]], "polars.Series.sqrt": [[1139, "polars-series-sqrt"]], "polars.Series.replace": [[1102, "polars-series-replace"]], "polars.Series.slice": [[1137, "polars-series-slice"]], "polars.Series.rolling_min": [[1112, "polars-series-rolling-min"]], "polars.Series.set": [[1124, "polars-series-set"]], "polars.Series.rolling_quantile": [[1113, "polars-series-rolling-quantile"]], "polars.Series.str.json_decode": [[1154, "polars-series-str-json-decode"]], "polars.Series.sinh": [[1135, "polars-series-sinh"]], "polars.Series.reinterpret": [[1100, "polars-series-reinterpret"]], "polars.Series.reverse": [[1104, "polars-series-reverse"]], "polars.Series.rolling_skew": [[1114, "polars-series-rolling-skew"]], "polars.Series.set_at_idx": [[1125, "polars-series-set-at-idx"]], "polars.Series.rolling_sum": [[1116, "polars-series-rolling-sum"]], "polars.Series.str.concat": [[1142, "polars-series-str-concat"]], "polars.Series.rolling_mean": [[1110, "polars-series-rolling-mean"]], "polars.Series.str.count_matches": [[1146, "polars-series-str-count-matches"]], "polars.Series.str.decode": [[1147, "polars-series-str-decode"]], "polars.Series.str.extract_groups": [[1153, "polars-series-str-extract-groups"]], "polars.Series.search_sorted": [[1122, "polars-series-search-sorted"]], "polars.Series.scatter": [[1121, "polars-series-scatter"]], "polars.Series.reshape": [[1103, "polars-series-reshape"]], "polars.Series.str.extract_all": [[1152, "polars-series-str-extract-all"]], "polars.Series.series_equal": [[1123, "polars-series-series-equal"]], "polars.Series.skew": [[1136, "polars-series-skew"]], "polars.Series.str.explode": [[1150, "polars-series-str-explode"]], "polars.Series.str.count_match": [[1145, "polars-series-str-count-match"]], "polars.Series.round_sig_figs": [[1119, "polars-series-round-sig-figs"]], "polars.Series.sort": [[1138, "polars-series-sort"]], "polars.Series.rename": [[1101, "polars-series-rename"]], "polars.Series.sin": [[1134, "polars-series-sin"]], "polars.Series.sample": [[1120, "polars-series-sample"]], "polars.Series.rolling_apply": [[1107, "polars-series-rolling-apply"]], "polars.Series.rolling_std": [[1115, "polars-series-rolling-std"]], "polars.Series.shuffle": [[1132, "polars-series-shuffle"]], "polars.Series.implode": [[1004, "polars-series-implode"]], "polars.Series.list.all": [[1034, "polars-series-list-all"]], "polars.Series.flags": [[995, "polars-series-flags"]], "polars.Series.is_last": [[1018, "polars-series-is-last"]], "polars.Series.has_validity": [[1000, "polars-series-has-validity"]], "polars.Series.is_not_null": [[1022, "polars-series-is-not-null"]], "polars.Series.is_in": [[1015, "polars-series-is-in"]], "polars.Series.interpolate": [[1006, "polars-series-interpolate"]], "polars.Series.gather": [[997, "polars-series-gather"]], "polars.Series.extend": [[990, "polars-series-extend"]], "polars.Series.get_chunks": [[999, "polars-series-get-chunks"]], "polars.Series.is_infinite": [[1016, "polars-series-is-infinite"]], "polars.Series.extend_constant": [[991, "polars-series-extend-constant"]], "polars.Series.list.arg_max": [[1036, "polars-series-list-arg-max"]], "polars.Series.is_first": [[1012, "polars-series-is-first"]], "polars.Series.len": [[1031, "polars-series-len"]], "polars.Series.is_null": [[1023, "polars-series-is-null"]], "polars.Series.hash": [[1001, "polars-series-hash"]], "polars.Series.is_sorted": [[1025, "polars-series-is-sorted"]], "polars.Series.is_first_distinct": [[1013, "polars-series-is-first-distinct"]], "polars.Series.filter": [[994, "polars-series-filter"]], "polars.Series.is_last_distinct": [[1019, "polars-series-is-last-distinct"]], "polars.Series.list.concat": [[1038, "polars-series-list-concat"]], "polars.Series.is_finite": [[1011, "polars-series-is-finite"]], "polars.Series.is_unique": [[1027, "polars-series-is-unique"]], "polars.Series.inner_dtype": [[1005, "polars-series-inner-dtype"]], "polars.Series.hist": [[1003, "polars-series-hist"]], "polars.Series.list.arg_min": [[1037, "polars-series-list-arg-min"]], "polars.Series.head": [[1002, "polars-series-head"]], "polars.Series.is_integer": [[1017, "polars-series-is-integer"]], "polars.Series.list.contains": [[1039, "polars-series-list-contains"]], "polars.Series.is_boolean": [[1008, "polars-series-is-boolean"]], "polars.Series.is_nan": [[1020, "polars-series-is-nan"]], "polars.Series.list.diff": [[1042, "polars-series-list-diff"]], "polars.Series.floor": [[996, "polars-series-floor"]], "polars.Series.list.eval": [[1044, "polars-series-list-eval"]], "polars.Series.list": [[1033, "polars-series-list"]], "polars.Series.list.count_matches": [[1041, "polars-series-list-count-matches"]], "polars.Series.gather_every": [[998, "polars-series-gather-every"]], "polars.Series.is_not_nan": [[1021, "polars-series-is-not-nan"]], "polars.Series.is_duplicated": [[1009, "polars-series-is-duplicated"]], "polars.Series.kurtosis": [[1030, "polars-series-kurtosis"]], "polars.Series.limit": [[1032, "polars-series-limit"]], "polars.Series.item": [[1029, "polars-series-item"]], "polars.Series.list.count_match": [[1040, "polars-series-list-count-match"]], "polars.Series.fill_null": [[993, "polars-series-fill-null"]], "polars.Series.is_between": [[1007, "polars-series-is-between"]], "polars.Series.is_utf8": [[1028, "polars-series-is-utf8"]], "polars.Series.list.any": [[1035, "polars-series-list-any"]], "polars.Series.is_empty": [[1010, "polars-series-is-empty"]], "polars.Series.is_float": [[1014, "polars-series-is-float"]], "polars.Series.is_temporal": [[1026, "polars-series-is-temporal"]], "polars.Series.fill_nan": [[992, "polars-series-fill-nan"]], "polars.Series.is_numeric": [[1024, "polars-series-is-numeric"]], "polars.Series.list.drop_nulls": [[1043, "polars-series-list-drop-nulls"]], "polars.Series.dt.round": [[962, "polars-series-dt-round"]], "polars.Series.dt.total_minutes": [[973, "polars-series-dt-total-minutes"]], "polars.Series.dt.total_nanoseconds": [[974, "polars-series-dt-total-nanoseconds"]], "polars.Series.ewm_mean": [[985, "polars-series-ewm-mean"]], "polars.Series.estimated_size": [[984, "polars-series-estimated-size"]], "polars.Series.dt.total_seconds": [[975, "polars-series-dt-total-seconds"]], "polars.Series.dt.with_time_unit": [[979, "polars-series-dt-with-time-unit"]], "polars.Series.entropy": [[982, "polars-series-entropy"]], "polars.Series.dt.month": [[953, "polars-series-dt-month"]], "polars.Series.dt.total_days": [[969, "polars-series-dt-total-days"]], "polars.Series.dt.minutes": [[952, "polars-series-dt-minutes"]], "polars.Series.dt.total_microseconds": [[971, "polars-series-dt-total-microseconds"]], "polars.Series.dt.microsecond": [[946, "polars-series-dt-microsecond"]], "polars.Series.dt.epoch": [[938, "polars-series-dt-epoch"]], "polars.Series.ewm_std": [[986, "polars-series-ewm-std"]], "polars.Series.dt.hour": [[939, "polars-series-dt-hour"]], "polars.Series.dt.days": [[936, "polars-series-dt-days"]], "polars.Series.dt.to_string": [[968, "polars-series-dt-to-string"]], "polars.Series.dt.nanosecond": [[956, "polars-series-dt-nanosecond"]], "polars.Series.equals": [[983, "polars-series-equals"]], "polars.Series.dtype": [[981, "polars-series-dtype"]], "polars.Series.dt.min": [[950, "polars-series-dt-min"]], "polars.Series.dt.max": [[943, "polars-series-dt-max"]], "polars.Series.dt.month_end": [[954, "polars-series-dt-month-end"]], "polars.Series.explode": [[989, "polars-series-explode"]], "polars.Series.dt.day": [[935, "polars-series-dt-day"]], "polars.Series.dt.truncate": [[976, "polars-series-dt-truncate"]], "polars.Series.dt.quarter": [[960, "polars-series-dt-quarter"]], "polars.Series.exp": [[988, "polars-series-exp"]], "polars.Series.dt.hours": [[940, "polars-series-dt-hours"]], "polars.Series.dt.minute": [[951, "polars-series-dt-minute"]], "polars.Series.dt.millisecond": [[948, "polars-series-dt-millisecond"]], "polars.Series.dt.microseconds": [[947, "polars-series-dt-microseconds"]], "polars.Series.dt.seconds": [[964, "polars-series-dt-seconds"]], "polars.Series.dt.time": [[966, "polars-series-dt-time"]], "polars.Series.ewm_var": [[987, "polars-series-ewm-var"]], "polars.Series.dt.milliseconds": [[949, "polars-series-dt-milliseconds"]], "polars.Series.dt.is_leap_year": [[941, "polars-series-dt-is-leap-year"]], "polars.Series.dt.week": [[977, "polars-series-dt-week"]], "polars.Series.dt.mean": [[944, "polars-series-dt-mean"]], "polars.Series.dt.timestamp": [[967, "polars-series-dt-timestamp"]], "polars.Series.dt.year": [[980, "polars-series-dt-year"]], "polars.Series.dt.dst_offset": [[937, "polars-series-dt-dst-offset"]], "polars.Series.dt.offset_by": [[958, "polars-series-dt-offset-by"]], "polars.Series.dt.weekday": [[978, "polars-series-dt-weekday"]], "polars.Series.dt.total_milliseconds": [[972, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.iso_year": [[942, "polars-series-dt-iso-year"]], "polars.Series.dt.median": [[945, "polars-series-dt-median"]], "polars.Series.dt.nanoseconds": [[957, "polars-series-dt-nanoseconds"]], "polars.Series.dt.month_start": [[955, "polars-series-dt-month-start"]], "polars.Series.dt.second": [[963, "polars-series-dt-second"]], "polars.Series.dt.ordinal_day": [[959, "polars-series-dt-ordinal-day"]], "polars.Series.dt.replace_time_zone": [[961, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.total_hours": [[970, "polars-series-dt-total-hours"]], "polars.Series.dt.strftime": [[965, "polars-series-dt-strftime"]], "polars.Series.clip_min": [[908, "polars-series-clip-min"]], "polars.Series.dt.datetime": [[934, "polars-series-dt-datetime"]], "polars.Series.cosh": [[911, "polars-series-cosh"]], "polars.Series.cat.is_local": [[898, "polars-series-cat-is-local"]], "polars.Series.cum_prod": [[915, "polars-series-cum-prod"]], "polars.Series.cummax": [[917, "polars-series-cummax"]], "polars.Series.cat.uses_lexical_ordering": [[901, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.diff": [[924, "polars-series-diff"]], "polars.Series.bin.starts_with": [[893, "polars-series-bin-starts-with"]], "polars.Series.bin.decode": [[890, "polars-series-bin-decode"]], "polars.Series.cumsum": [[920, "polars-series-cumsum"]], "polars.Series.cat.get_categories": [[897, "polars-series-cat-get-categories"]], "polars.Series.arr.all": [[882, "polars-series-arr-all"]], "polars.Series.cum_max": [[913, "polars-series-cum-max"]], "polars.Series.dot": [[925, "polars-series-dot"]], "polars.Series.dt.combine": [[931, "polars-series-dt-combine"]], "polars.Series.clip_max": [[907, "polars-series-clip-max"]], "polars.Series.arg_unique": [[881, "polars-series-arg-unique"]], "polars.Series.cat.set_ordering": [[899, "polars-series-cat-set-ordering"]], "polars.Series.cot": [[912, "polars-series-cot"]], "polars.Series.dt.date": [[933, "polars-series-dt-date"]], "polars.Series.arr.max": [[884, "polars-series-arr-max"]], "polars.Series.cumulative_eval": [[921, "polars-series-cumulative-eval"]], "polars.Series.cumprod": [[919, "polars-series-cumprod"]], "polars.Series.cummin": [[918, "polars-series-cummin"]], "polars.Series.chunk_lengths": [[904, "polars-series-chunk-lengths"]], "polars.Series.cat": [[896, "polars-series-cat"]], "polars.Series.bin.encode": [[891, "polars-series-bin-encode"]], "polars.Series.cat.to_local": [[900, "polars-series-cat-to-local"]], "polars.Series.cos": [[910, "polars-series-cos"]], "polars.Series.arr.to_list": [[887, "polars-series-arr-to-list"]], "polars.Series.arr.sum": [[886, "polars-series-arr-sum"]], "polars.Series.cum_min": [[914, "polars-series-cum-min"]], "polars.Series.dt.cast_time_unit": [[930, "polars-series-dt-cast-time-unit"]], "polars.Series.cut": [[922, "polars-series-cut"]], "polars.Series.describe": [[923, "polars-series-describe"]], "polars.Series.arr.min": [[885, "polars-series-arr-min"]], "polars.Series.bin.ends_with": [[892, "polars-series-bin-ends-with"]], "polars.Series.ceil": [[903, "polars-series-ceil"]], "polars.Series.bottom_k": [[894, "polars-series-bottom-k"]], "polars.Series.drop_nulls": [[927, "polars-series-drop-nulls"]], "polars.Series.drop_nans": [[926, "polars-series-drop-nans"]], "polars.Series.dt.convert_time_zone": [[932, "polars-series-dt-convert-time-zone"]], "polars.Series.arg_true": [[880, "polars-series-arg-true"]], "polars.Series.arr.any": [[883, "polars-series-arr-any"]], "polars.Series.arr.unique": [[888, "polars-series-arr-unique"]], "polars.Series.clone": [[909, "polars-series-clone"]], "polars.Series.clip": [[906, "polars-series-clip"]], "polars.Series.cum_sum": [[916, "polars-series-cum-sum"]], "polars.Series.bin.contains": [[889, "polars-series-bin-contains"]], "polars.Series.dt.base_utc_offset": [[929, "polars-series-dt-base-utc-offset"]], "polars.Series.cast": [[895, "polars-series-cast"]], "polars.Series.clear": [[905, "polars-series-clear"]], "polars.Series.dt": [[928, "polars-series-dt"]], "polars.Series.cbrt": [[902, "polars-series-cbrt"]], "polars.LazyFrame.groupby_dynamic": [[792, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.join_asof": [[798, "polars-lazyframe-join-asof"]], "polars.LazyFrame.collect_async": [[773, "polars-lazyframe-collect-async"]], "polars.LazyFrame.median": [[806, "polars-lazyframe-median"]], "polars.LazyFrame.columns": [[774, "polars-lazyframe-columns"]], "polars.LazyFrame.map": [[802, "polars-lazyframe-map"]], "polars.LazyFrame.profile": [[812, "polars-lazyframe-profile"]], "polars.LazyFrame.shift": [[822, "polars-lazyframe-shift"]], "polars.LazyFrame.first": [[786, "polars-lazyframe-first"]], "polars.LazyFrame.melt": [[807, "polars-lazyframe-melt"]], "polars.LazyFrame.filter": [[785, "polars-lazyframe-filter"]], "polars.LazyFrame.fill_null": [[784, "polars-lazyframe-fill-null"]], "polars.LazyFrame.merge_sorted": [[808, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.gather_every": [[787, "polars-lazyframe-gather-every"]], "polars.LazyFrame.mean": [[805, "polars-lazyframe-mean"]], "polars.LazyFrame.drop": [[777, "polars-lazyframe-drop"]], "polars.LazyFrame.inspect": [[795, "polars-lazyframe-inspect"]], "polars.LazyFrame.lazy": [[800, "polars-lazyframe-lazy"]], "polars.LazyFrame.min": [[809, "polars-lazyframe-min"]], "polars.LazyFrame.deserialize": [[776, "polars-lazyframe-deserialize"]], "polars.LazyFrame.serialize": [[820, "polars-lazyframe-serialize"]], "polars.LazyFrame.schema": [[817, "polars-lazyframe-schema"]], "polars.LazyFrame.shift_and_fill": [[823, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.group_by": [[788, "polars-lazyframe-group-by"]], "polars.LazyFrame.clear": [[770, "polars-lazyframe-clear"]], "polars.LazyFrame.rolling": [[816, "polars-lazyframe-rolling"]], "polars.LazyFrame.groupby": [[791, "polars-lazyframe-groupby"]], "polars.LazyFrame.select_seq": [[819, "polars-lazyframe-select-seq"]], "polars.LazyFrame.groupby_rolling": [[793, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.dtypes": [[779, "polars-lazyframe-dtypes"]], "polars.LazyFrame.fetch": [[782, "polars-lazyframe-fetch"]], "polars.LazyFrame.show_graph": [[824, "polars-lazyframe-show-graph"]], "polars.LazyFrame.max": [[804, "polars-lazyframe-max"]], "polars.LazyFrame.select": [[818, "polars-lazyframe-select"]], "polars.LazyFrame.pipe": [[811, "polars-lazyframe-pipe"]], "polars.LazyFrame.set_sorted": [[821, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.group_by_dynamic": [[789, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.reverse": [[815, "polars-lazyframe-reverse"]], "polars.LazyFrame.clone": [[771, "polars-lazyframe-clone"]], "polars.LazyFrame.map_batches": [[803, "polars-lazyframe-map-batches"]], "polars.LazyFrame.group_by_rolling": [[790, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.fill_nan": [[783, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.rename": [[814, "polars-lazyframe-rename"]], "polars.LazyFrame.join": [[797, "polars-lazyframe-join"]], "polars.LazyFrame.quantile": [[813, "polars-lazyframe-quantile"]], "polars.LazyFrame.collect": [[772, "polars-lazyframe-collect"]], "polars.LazyFrame.limit": [[801, "polars-lazyframe-limit"]], "polars.LazyFrame.last": [[799, "polars-lazyframe-last"]], "polars.LazyFrame.null_count": [[810, "polars-lazyframe-null-count"]], "polars.LazyFrame.count": [[775, "polars-lazyframe-count"]], "polars.LazyFrame.drop_nulls": [[778, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.explode": [[781, "polars-lazyframe-explode"]], "polars.LazyFrame.explain": [[780, "polars-lazyframe-explain"]], "polars.LazyFrame.interpolate": [[796, "polars-lazyframe-interpolate"]], "polars.LazyFrame.head": [[794, "polars-lazyframe-head"]], "Manipulation/selection": [[1232, "manipulation-selection"], [862, "manipulation-selection"], [755, "manipulation-selection"], [300, "manipulation-selection"]], "Plot": [[1233, "plot"], [301, "plot"]], "Boolean": [[1224, "boolean"], [745, "boolean"]], "polars.Series.to_physical": [[1212, "polars-series-to-physical"]], "Binary": [[1223, "binary"], [744, "binary"], [757, "binary"]], "Miscellaneous": [[1231, "miscellaneous"], [861, "miscellaneous"], [762, "miscellaneous"], [754, "miscellaneous"], [299, "miscellaneous"]], "Temporal": [[1236, "temporal"], [760, "temporal"], [302, "temporal"]], "Export": [[1228, "export"], [296, "export"]], "SQL": [[1237, "sql"]], "Methods": [[1237, "methods"]], "polars.Series.unique": [[1214, "polars-series-unique"]], "Descriptive": [[1227, "descriptive"], [858, "descriptive"], [295, "descriptive"]], "polars.Series.zip_with": [[1220, "polars-series-zip-with"]], "polars.Series.view": [[1219, "polars-series-view"]], "Categories": [[1225, "categories"], [746, "categories"]], "List": [[1230, "list"], [752, "list"]], "Array": [[1221, "array"], [743, "array"]], "Computation": [[1226, "computation"], [749, "computation"], [294, "computation"]], "polars.Series.to_numpy": [[1210, "polars-series-to-numpy"]], "polars.Series.unique_counts": [[1215, "polars-series-unique-counts"]], "Series": [[1229, "series"]], "Utils": [[1239, "utils"]], "Attributes": [[1222, "attributes"], [857, "attributes"], [293, "attributes"]], "String": [[1234, "string"], [758, "string"]], "polars.Series.upper_bound": [[1216, "polars-series-upper-bound"]], "polars.Series.top_k": [[1213, "polars-series-top-k"]], "Testing": [[1238, "testing"]], "Asserts": [[1238, "asserts"]], "Parametric testing": [[1238, "parametric-testing"]], "Polars primitives": [[1238, "polars-primitives"]], "Strategy helpers": [[1238, "strategy-helpers"]], "Profiles": [[1238, "profiles"]], "polars.Series.var": [[1218, "polars-series-var"]], "polars.Series.to_pandas": [[1211, "polars-series-to-pandas"]], "polars.Series.value_counts": [[1217, "polars-series-value-counts"]], "Struct": [[1235, "struct"], [759, "struct"]], "polars.Expr.var": [[666, "polars-expr-var"]], "polars.duration": [[700, "polars-duration"]], "polars.int_ranges": [[711, "polars-int-ranges"]], "polars.Expr.top_k": [[660, "polars-expr-top-k"]], "polars.date": [[694, "polars-date"]], "polars.exclude": [[702, "polars-exclude"]], "polars.datetime_ranges": [[699, "polars-datetime-ranges"]], "polars.apply": [[673, "polars-apply"]], "polars.Expr.value_counts": [[665, "polars-expr-value-counts"]], "polars.cumsum": [[692, "polars-cumsum"]], "polars.all": [[669, "polars-all"]], "polars.Expr.upper_bound": [[664, "polars-expr-upper-bound"]], "polars.Expr.where": [[667, "polars-expr-where"]], "polars.concat_str": [[682, "polars-concat-str"]], "polars.datetime_range": [[698, "polars-datetime-range"]], "polars.any": [[671, "polars-any"]], "polars.implode": [[709, "polars-implode"]], "polars.concat_list": [[681, "polars-concat-list"]], "polars.count": [[684, "polars-count"]], "polars.cumfold": [[690, "polars-cumfold"]], "polars.arg_sort_by": [[678, "polars-arg-sort-by"]], "polars.arctan2": [[676, "polars-arctan2"]], "polars.from_epoch": [[706, "polars-from-epoch"]], "polars.map": [[714, "polars-map"]], "polars.format": [[705, "polars-format"]], "polars.any_horizontal": [[672, "polars-any-horizontal"]], "polars.arg_where": [[679, "polars-arg-where"]], "polars.groups": [[707, "polars-groups"]], "polars.int_range": [[710, "polars-int-range"]], "polars.datetime": [[697, "polars-datetime"]], "polars.Expr.truediv": [[661, "polars-expr-truediv"]], "polars.arctan2d": [[677, "polars-arctan2d"]], "polars.cum_sum": [[688, "polars-cum-sum"]], "polars.corr": [[683, "polars-corr"]], "polars.cum_fold": [[686, "polars-cum-fold"]], "polars.cum_reduce": [[687, "polars-cum-reduce"]], "polars.cum_sum_horizontal": [[689, "polars-cum-sum-horizontal"]], "polars.head": [[708, "polars-head"]], "polars.last": [[712, "polars-last"]], "polars.cumsum_horizontal": [[693, "polars-cumsum-horizontal"]], "polars.approx_n_unique": [[674, "polars-approx-n-unique"]], "polars.all_horizontal": [[670, "polars-all-horizontal"]], "polars.Expr.unique_counts": [[663, "polars-expr-unique-counts"]], "polars.fold": [[704, "polars-fold"]], "polars.date_ranges": [[696, "polars-date-ranges"]], "polars.first": [[703, "polars-first"]], "polars.coalesce": [[680, "polars-coalesce"]], "polars.date_range": [[695, "polars-date-range"]], "polars.cov": [[685, "polars-cov"]], "polars.element": [[701, "polars-element"]], "polars.lit": [[713, "polars-lit"]], "polars.Expr.xor": [[668, "polars-expr-xor"]], "polars.arange": [[675, "polars-arange"]], "polars.Expr.unique": [[662, "polars-expr-unique"]], "polars.cumreduce": [[691, "polars-cumreduce"]], "polars.Series.arcsin": [[873, "polars-series-arcsin"]], "polars.LazyFrame.unnest": [[833, "polars-lazyframe-unnest"]], "polars.LazyFrame.sum": [[828, "polars-lazyframe-sum"]], "polars.Series.arccos": [[871, "polars-series-arccos"]], "polars.LazyFrame.with_context": [[839, "polars-lazyframe-with-context"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[846, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arcsinh": [[874, "polars-series-arcsinh"]], "polars.Series.arctanh": [[876, "polars-series-arctanh"]], "polars.LazyFrame.with_row_count": [[840, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.width": [[836, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[849, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.std": [[827, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[844, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.take_every": [[830, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_columns_seq": [[838, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[856, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.unique": [[832, "polars-lazyframe-unique"]], "polars.LazyFrame.slice": [[825, "polars-lazyframe-slice"]], "polars.Series.arg_sort": [[879, "polars-series-arg-sort"]], "polars.LazyFrame.var": [[835, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[855, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[852, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[842, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[851, "polars-lazyframe-group-by-lazygroupby-median"]], "GroupBy": [[859, "groupby"], [297, "groupby"]], "polars.LazyFrame.top_k": [[831, "polars-lazyframe-top-k"]], "polars.LazyFrame.update": [[834, "polars-lazyframe-update"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[850, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arccosh": [[872, "polars-series-arccosh"]], "polars.Series.append": [[869, "polars-series-append"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[847, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arg_max": [[877, "polars-series-arg-max"]], "polars.Series.arctan": [[875, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[854, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[841, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.any": [[868, "polars-series-any"]], "polars.LazyFrame.with_columns": [[837, "polars-lazyframe-with-columns"]], "LazyFrame": [[860, "lazyframe"]], "polars.LazyFrame.tail": [[829, "polars-lazyframe-tail"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[845, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[853, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.abs": [[865, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[843, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[848, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arg_min": [[878, "polars-series-arg-min"]], "Selectors": [[863, "selectors"]], "Importing": [[863, "importing"]], "Set operations": [[863, "set-operations"]], "Functions": [[863, "functions"], [762, "functions"], [750, "functions"]], "polars.Series.alias": [[866, "polars-series-alias"]], "polars.Series.all": [[867, "polars-series-all"]], "polars.Series.apply": [[870, "polars-series-apply"]], "polars.LazyFrame.sort": [[826, "polars-lazyframe-sort"]], "Read/write logical plan": [[861, "read-write-logical-plan"]], "polars.Expr.str.extract": [[606, "polars-expr-str-extract"]], "polars.Expr.str.extract_groups": [[608, "polars-expr-str-extract-groups"]], "polars.Expr.str.to_uppercase": [[646, "polars-expr-str-to-uppercase"]], "polars.Expr.str.len_bytes": [[612, "polars-expr-str-len-bytes"]], "polars.Expr.tan": [[657, "polars-expr-tan"]], "polars.Expr.str.n_chars": [[617, "polars-expr-str-n-chars"]], "polars.Expr.str.rstrip": [[626, "polars-expr-str-rstrip"]], "polars.Expr.str.strip_chars_start": [[635, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_prefix": [[636, "polars-expr-str-strip-prefix"]], "polars.Expr.str.lstrip": [[616, "polars-expr-str-lstrip"]], "polars.Expr.str.json_path_match": [[611, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_date": [[639, "polars-expr-str-to-date"]], "polars.Expr.str.strip": [[632, "polars-expr-str-strip"]], "polars.Expr.str.strip_suffix": [[637, "polars-expr-str-strip-suffix"]], "polars.Expr.str.rjust": [[625, "polars-expr-str-rjust"]], "polars.Expr.struct.field": [[648, "polars-expr-struct-field"]], "polars.Expr.str.len_chars": [[613, "polars-expr-str-len-chars"]], "polars.Expr.str.to_datetime": [[640, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_decimal": [[641, "polars-expr-str-to-decimal"]], "polars.Expr.str.json_decode": [[609, "polars-expr-str-json-decode"]], "polars.Expr.to_physical": [[659, "polars-expr-to-physical"]], "polars.Expr.str.zfill": [[647, "polars-expr-str-zfill"]], "polars.Expr.str.extract_all": [[607, "polars-expr-str-extract-all"]], "polars.Expr.str.split": [[628, "polars-expr-str-split"]], "polars.Expr.str.explode": [[605, "polars-expr-str-explode"]], "polars.Expr.str.split_exact": [[629, "polars-expr-str-split-exact"]], "polars.Expr.str.lengths": [[614, "polars-expr-str-lengths"]], "polars.Expr.sum": [[653, "polars-expr-sum"]], "polars.Expr.str.parse_int": [[620, "polars-expr-str-parse-int"]], "polars.Expr.str.strptime": [[638, "polars-expr-str-strptime"]], "polars.Expr.str.replace_many": [[623, "polars-expr-str-replace-many"]], "polars.Expr.sub": [[651, "polars-expr-sub"]], "polars.Expr.suffix": [[652, "polars-expr-suffix"]], "polars.Expr.str.json_extract": [[610, "polars-expr-str-json-extract"]], "polars.Expr.struct.rename_fields": [[650, "polars-expr-struct-rename-fields"]], "polars.Expr.str.replace": [[621, "polars-expr-str-replace"]], "polars.Expr.str.to_time": [[644, "polars-expr-str-to-time"]], "polars.Expr.str.starts_with": [[631, "polars-expr-str-starts-with"]], "polars.Expr.take": [[655, "polars-expr-take"]], "polars.Expr.tail": [[654, "polars-expr-tail"]], "polars.Expr.str.to_integer": [[642, "polars-expr-str-to-integer"]], "polars.Expr.str.reverse": [[624, "polars-expr-str-reverse"]], "polars.Expr.struct.json_encode": [[649, "polars-expr-struct-json-encode"]], "polars.Expr.str.splitn": [[630, "polars-expr-str-splitn"]], "polars.Expr.take_every": [[656, "polars-expr-take-every"]], "polars.Expr.str.pad_end": [[618, "polars-expr-str-pad-end"]], "polars.Expr.str.ljust": [[615, "polars-expr-str-ljust"]], "polars.Expr.str.strip_chars_end": [[634, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_chars": [[633, "polars-expr-str-strip-chars"]], "polars.Expr.str.slice": [[627, "polars-expr-str-slice"]], "polars.Expr.tanh": [[658, "polars-expr-tanh"]], "polars.Expr.str.to_lowercase": [[643, "polars-expr-str-to-lowercase"]], "polars.Expr.str.replace_all": [[622, "polars-expr-str-replace-all"]], "polars.Expr.str.pad_start": [[619, "polars-expr-str-pad-start"]], "polars.Expr.str.to_titlecase": [[645, "polars-expr-str-to-titlecase"]], "polars.Expr.reinterpret": [[560, "polars-expr-reinterpret"]], "polars.Expr.rolling_mean": [[571, "polars-expr-rolling-mean"]], "polars.Expr.rolling_median": [[572, "polars-expr-rolling-median"]], "polars.Expr.str.contains_any": [[599, "polars-expr-str-contains-any"]], "polars.Expr.sign": [[588, "polars-expr-sign"]], "polars.Expr.pow": [[552, "polars-expr-pow"]], "polars.Expr.sqrt": [[595, "polars-expr-sqrt"]], "polars.Expr.rolling_sum": [[577, "polars-expr-rolling-sum"]], "polars.Expr.str.concat": [[597, "polars-expr-str-concat"]], "polars.Expr.skew": [[591, "polars-expr-skew"]], "polars.Expr.round": [[579, "polars-expr-round"]], "polars.Expr.rank": [[558, "polars-expr-rank"]], "polars.Expr.pipe": [[551, "polars-expr-pipe"]], "polars.Expr.shift": [[584, "polars-expr-shift"]], "polars.Expr.str.contains": [[598, "polars-expr-str-contains"]], "polars.Expr.str.decode": [[602, "polars-expr-str-decode"]], "polars.Expr.rechunk": [[559, "polars-expr-rechunk"]], "polars.Expr.rle_id": [[566, "polars-expr-rle-id"]], "polars.Expr.repeat_by": [[561, "polars-expr-repeat-by"]], "polars.Expr.rolling_apply": [[568, "polars-expr-rolling-apply"]], "polars.Expr.shift_and_fill": [[585, "polars-expr-shift-and-fill"]], "polars.Expr.qcut": [[555, "polars-expr-qcut"]], "polars.Expr.rolling_std": [[576, "polars-expr-rolling-std"]], "polars.Expr.sample": [[581, "polars-expr-sample"]], "polars.Expr.replace": [[562, "polars-expr-replace"]], "polars.Expr.str.ends_with": [[604, "polars-expr-str-ends-with"]], "polars.Expr.rolling_quantile": [[574, "polars-expr-rolling-quantile"]], "polars.Expr.reverse": [[564, "polars-expr-reverse"]], "polars.Expr.product": [[554, "polars-expr-product"]], "polars.Expr.rolling": [[567, "polars-expr-rolling"]], "polars.Expr.round_sig_figs": [[580, "polars-expr-round-sig-figs"]], "polars.Expr.prefix": [[553, "polars-expr-prefix"]], "polars.Expr.search_sorted": [[582, "polars-expr-search-sorted"]], "polars.Expr.sort": [[593, "polars-expr-sort"]], "polars.Expr.rle": [[565, "polars-expr-rle"]], "polars.Expr.sort_by": [[594, "polars-expr-sort-by"]], "polars.Expr.reshape": [[563, "polars-expr-reshape"]], "polars.Expr.radians": [[557, "polars-expr-radians"]], "polars.Expr.str.count_match": [[600, "polars-expr-str-count-match"]], "polars.Expr.rolling_skew": [[575, "polars-expr-rolling-skew"]], "polars.Expr.set_sorted": [[583, "polars-expr-set-sorted"]], "polars.Expr.rolling_min": [[573, "polars-expr-rolling-min"]], "polars.Expr.rolling_var": [[578, "polars-expr-rolling-var"]], "polars.Expr.str.encode": [[603, "polars-expr-str-encode"]], "polars.Expr.std": [[596, "polars-expr-std"]], "polars.Expr.shrink_dtype": [[586, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_max": [[570, "polars-expr-rolling-max"]], "polars.Expr.sin": [[589, "polars-expr-sin"]], "polars.Expr.quantile": [[556, "polars-expr-quantile"]], "polars.Expr.sinh": [[590, "polars-expr-sinh"]], "polars.Expr.slice": [[592, "polars-expr-slice"]], "polars.Expr.str.count_matches": [[601, "polars-expr-str-count-matches"]], "polars.Expr.peak_min": [[550, "polars-expr-peak-min"]], "polars.Expr.shuffle": [[587, "polars-expr-shuffle"]], "polars.Expr.rolling_map": [[569, "polars-expr-rolling-map"]], "polars.Expr.lower_bound": [[509, "polars-expr-lower-bound"]], "polars.Expr.meta.tree_format": [[526, "polars-expr-meta-tree-format"]], "polars.Expr.list.slice": [[498, "polars-expr-list-slice"]], "polars.Expr.mode": [[531, "polars-expr-mode"]], "polars.Expr.map_elements": [[515, "polars-expr-map-elements"]], "polars.Expr.pct_change": [[548, "polars-expr-pct-change"]], "polars.Expr.not_": [[544, "polars-expr-not"]], "polars.Expr.list.tail": [[501, "polars-expr-list-tail"]], "polars.Expr.list.to_struct": [[504, "polars-expr-list-to-struct"]], "polars.Expr.meta.undo_aliases": [[527, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.root_names": [[525, "polars-expr-meta-root-names"]], "polars.Expr.name.prefix": [[536, "polars-expr-name-prefix"]], "polars.Expr.name.to_lowercase": [[538, "polars-expr-name-to-lowercase"]], "polars.Expr.list.take": [[502, "polars-expr-list-take"]], "polars.Expr.log10": [[507, "polars-expr-log10"]], "polars.Expr.max": [[516, "polars-expr-max"]], "polars.Expr.meta.output_name": [[523, "polars-expr-meta-output-name"]], "polars.Expr.min": [[529, "polars-expr-min"]], "polars.Expr.list.unique": [[505, "polars-expr-list-unique"]], "polars.Expr.name.to_uppercase": [[539, "polars-expr-name-to-uppercase"]], "polars.Expr.map": [[511, "polars-expr-map"]], "polars.Expr.null_count": [[545, "polars-expr-null-count"]], "polars.Expr.list.shift": [[497, "polars-expr-list-shift"]], "polars.Expr.over": [[547, "polars-expr-over"]], "polars.Expr.list.to_array": [[503, "polars-expr-list-to-array"]], "polars.Expr.peak_max": [[549, "polars-expr-peak-max"]], "polars.Expr.meta.has_multiple_outputs": [[520, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.sort": [[499, "polars-expr-list-sort"]], "polars.Expr.list.set_symmetric_difference": [[495, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.lt": [[510, "polars-expr-lt"]], "polars.Expr.nan_min": [[541, "polars-expr-nan-min"]], "polars.Expr.meta.ne": [[522, "polars-expr-meta-ne"]], "polars.Expr.name.suffix": [[537, "polars-expr-name-suffix"]], "polars.Expr.n_unique": [[533, "polars-expr-n-unique"]], "polars.Expr.map_alias": [[512, "polars-expr-map-alias"]], "polars.Expr.name.keep": [[534, "polars-expr-name-keep"]], "polars.Expr.log1p": [[508, "polars-expr-log1p"]], "polars.Expr.mul": [[532, "polars-expr-mul"]], "polars.Expr.map_batches": [[513, "polars-expr-map-batches"]], "polars.Expr.map_dict": [[514, "polars-expr-map-dict"]], "polars.Expr.list.sum": [[500, "polars-expr-list-sum"]], "polars.Expr.ne_missing": [[543, "polars-expr-ne-missing"]], "polars.Expr.mean": [[517, "polars-expr-mean"]], "polars.Expr.name.map": [[535, "polars-expr-name-map"]], "polars.Expr.ne": [[542, "polars-expr-ne"]], "polars.Expr.median": [[518, "polars-expr-median"]], "polars.Expr.list.set_union": [[496, "polars-expr-list-set-union"]], "polars.Expr.meta.pop": [[524, "polars-expr-meta-pop"]], "polars.Expr.meta.is_regex_projection": [[521, "polars-expr-meta-is-regex-projection"]], "polars.Expr.nan_max": [[540, "polars-expr-nan-max"]], "polars.Expr.meta.write_json": [[528, "polars-expr-meta-write-json"]], "polars.Expr.mod": [[530, "polars-expr-mod"]], "polars.Expr.meta.eq": [[519, "polars-expr-meta-eq"]], "polars.Expr.or_": [[546, "polars-expr-or"]], "polars.Expr.log": [[506, "polars-expr-log"]], "polars.Expr.list.sample": [[492, "polars-expr-list-sample"]], "polars.Expr.is_first_distinct": [[451, "polars-expr-is-first-distinct"]], "polars.Expr.list.first": [[480, "polars-expr-list-first"]], "polars.Expr.le": [[465, "polars-expr-le"]], "polars.Expr.len": [[466, "polars-expr-len"]], "polars.Expr.is_not_null": [[459, "polars-expr-is-not-null"]], "polars.Expr.is_finite": [[449, "polars-expr-is-finite"]], "polars.Expr.list.eval": [[478, "polars-expr-list-eval"]], "polars.Expr.list.last": [[485, "polars-expr-list-last"]], "polars.Expr.interpolate": [[446, "polars-expr-interpolate"]], "polars.Expr.list.concat": [[472, "polars-expr-list-concat"]], "polars.Expr.kurtosis": [[463, "polars-expr-kurtosis"]], "polars.Expr.last": [[464, "polars-expr-last"]], "polars.Expr.list.drop_nulls": [[477, "polars-expr-list-drop-nulls"]], "polars.Expr.inspect": [[445, "polars-expr-inspect"]], "polars.Expr.is_duplicated": [[448, "polars-expr-is-duplicated"]], "polars.Expr.gt": [[440, "polars-expr-gt"]], "polars.Expr.list.count_matches": [[475, "polars-expr-list-count-matches"]], "polars.Expr.is_unique": [[461, "polars-expr-is-unique"]], "polars.Expr.is_last": [[454, "polars-expr-is-last"]], "polars.Expr.head": [[442, "polars-expr-head"]], "polars.Expr.is_null": [[460, "polars-expr-is-null"]], "polars.Expr.list.mean": [[489, "polars-expr-list-mean"]], "polars.Expr.is_first": [[450, "polars-expr-is-first"]], "polars.Expr.keep_name": [[462, "polars-expr-keep-name"]], "polars.Expr.is_in": [[452, "polars-expr-is-in"]], "polars.Expr.list.count_match": [[474, "polars-expr-list-count-match"]], "polars.Expr.list.diff": [[476, "polars-expr-list-diff"]], "polars.Expr.list.get": [[482, "polars-expr-list-get"]], "polars.Expr.list.arg_min": [[471, "polars-expr-list-arg-min"]], "polars.Expr.implode": [[444, "polars-expr-implode"]], "polars.Expr.is_not": [[457, "polars-expr-is-not"]], "polars.Expr.list.gather": [[481, "polars-expr-list-gather"]], "polars.Expr.list.min": [[490, "polars-expr-list-min"]], "polars.Expr.is_last_distinct": [[455, "polars-expr-is-last-distinct"]], "polars.Expr.is_not_nan": [[458, "polars-expr-is-not-nan"]], "polars.Expr.is_between": [[447, "polars-expr-is-between"]], "polars.Expr.is_infinite": [[453, "polars-expr-is-infinite"]], "polars.Expr.list.explode": [[479, "polars-expr-list-explode"]], "polars.Expr.list.lengths": [[487, "polars-expr-list-lengths"]], "polars.Expr.list.max": [[488, "polars-expr-list-max"]], "polars.Expr.list.set_difference": [[493, "polars-expr-list-set-difference"]], "polars.Expr.list.set_intersection": [[494, "polars-expr-list-set-intersection"]], "polars.Expr.hash": [[441, "polars-expr-hash"]], "polars.Expr.list.contains": [[473, "polars-expr-list-contains"]], "polars.Expr.list.all": [[468, "polars-expr-list-all"]], "polars.Expr.list.len": [[486, "polars-expr-list-len"]], "polars.Expr.list.arg_max": [[470, "polars-expr-list-arg-max"]], "polars.Expr.list.any": [[469, "polars-expr-list-any"]], "polars.Expr.list.head": [[483, "polars-expr-list-head"]], "polars.Expr.limit": [[467, "polars-expr-limit"]], "polars.Expr.list.join": [[484, "polars-expr-list-join"]], "polars.Expr.is_nan": [[456, "polars-expr-is-nan"]], "polars.Expr.list.reverse": [[491, "polars-expr-list-reverse"]], "polars.Expr.hist": [[443, "polars-expr-hist"]], "polars.Expr.dt.nanosecond": [[392, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.total_nanoseconds": [[410, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.fill_nan": [[427, "polars-expr-fill-nan"]], "polars.Expr.dt.minutes": [[388, "polars-expr-dt-minutes"]], "polars.Expr.dt.truncate": [[412, "polars-expr-dt-truncate"]], "polars.Expr.dt.year": [[416, "polars-expr-dt-year"]], "polars.Expr.dt.total_milliseconds": [[408, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.month_start": [[391, "polars-expr-dt-month-start"]], "polars.Expr.fill_null": [[428, "polars-expr-fill-null"]], "polars.Expr.from_json": [[435, "polars-expr-from-json"]], "polars.Expr.extend_constant": [[426, "polars-expr-extend-constant"]], "polars.Expr.dt.second": [[399, "polars-expr-dt-second"]], "polars.Expr.eq": [[418, "polars-expr-eq"]], "polars.Expr.floor": [[432, "polars-expr-floor"]], "polars.Expr.ge": [[438, "polars-expr-ge"]], "polars.Expr.dt.strftime": [[401, "polars-expr-dt-strftime"]], "polars.Expr.floordiv": [[433, "polars-expr-floordiv"]], "polars.Expr.dt.total_seconds": [[411, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.minute": [[387, "polars-expr-dt-minute"]], "polars.Expr.dt.seconds": [[400, "polars-expr-dt-seconds"]], "polars.Expr.dt.week": [[413, "polars-expr-dt-week"]], "polars.Expr.gather_every": [[437, "polars-expr-gather-every"]], "polars.Expr.dt.weekday": [[414, "polars-expr-dt-weekday"]], "polars.Expr.filter": [[429, "polars-expr-filter"]], "polars.Expr.dt.total_days": [[405, "polars-expr-dt-total-days"]], "polars.Expr.exclude": [[423, "polars-expr-exclude"]], "polars.Expr.dt.with_time_unit": [[415, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.ordinal_day": [[395, "polars-expr-dt-ordinal-day"]], "polars.Expr.ewm_std": [[421, "polars-expr-ewm-std"]], "polars.Expr.ewm_var": [[422, "polars-expr-ewm-var"]], "polars.Expr.dt.replace_time_zone": [[397, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.total_hours": [[406, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_microseconds": [[407, "polars-expr-dt-total-microseconds"]], "polars.Expr.first": [[430, "polars-expr-first"]], "polars.Expr.dt.time": [[402, "polars-expr-dt-time"]], "polars.Expr.dt.millisecond": [[385, "polars-expr-dt-millisecond"]], "polars.Expr.gather": [[436, "polars-expr-gather"]], "polars.Expr.eq_missing": [[419, "polars-expr-eq-missing"]], "polars.Expr.dt.month": [[389, "polars-expr-dt-month"]], "polars.Expr.dt.total_minutes": [[409, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.month_end": [[390, "polars-expr-dt-month-end"]], "polars.Expr.explode": [[425, "polars-expr-explode"]], "polars.Expr.ewm_mean": [[420, "polars-expr-ewm-mean"]], "polars.Expr.flatten": [[431, "polars-expr-flatten"]], "polars.Expr.entropy": [[417, "polars-expr-entropy"]], "polars.Expr.exp": [[424, "polars-expr-exp"]], "polars.Expr.dt.milliseconds": [[386, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.to_string": [[404, "polars-expr-dt-to-string"]], "polars.Expr.forward_fill": [[434, "polars-expr-forward-fill"]], "polars.Expr.dt.round": [[398, "polars-expr-dt-round"]], "polars.Expr.dt.timestamp": [[403, "polars-expr-dt-timestamp"]], "polars.Expr.dt.nanoseconds": [[393, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[394, "polars-expr-dt-offset-by"]], "polars.Expr.dt.quarter": [[396, "polars-expr-dt-quarter"]], "polars.Expr.get": [[439, "polars-expr-get"]], "polars.Expr.cummin": [[359, "polars-expr-cummin"]], "polars.Expr.dt.hours": [[380, "polars-expr-dt-hours"]], "polars.Expr.backward_fill": [[333, "polars-expr-backward-fill"]], "polars.Expr.cbrt": [[343, "polars-expr-cbrt"]], "polars.Expr.drop_nulls": [[368, "polars-expr-drop-nulls"]], "polars.Expr.bin.starts_with": [[338, "polars-expr-bin-starts-with"]], "polars.Expr.dt.days": [[376, "polars-expr-dt-days"]], "polars.Expr.bottom_k": [[339, "polars-expr-bottom-k"]], "polars.Expr.cum_min": [[354, "polars-expr-cum-min"]], "polars.Expr.bin.ends_with": [[337, "polars-expr-bin-ends-with"]], "polars.Expr.dt.combine": [[371, "polars-expr-dt-combine"]], "polars.Expr.bin.encode": [[336, "polars-expr-bin-encode"]], "polars.Expr.dt.base_utc_offset": [[369, "polars-expr-dt-base-utc-offset"]], "polars.Expr.count": [[351, "polars-expr-count"]], "polars.Expr.cat.set_ordering": [[342, "polars-expr-cat-set-ordering"]], "polars.Expr.cosh": [[349, "polars-expr-cosh"]], "polars.Expr.cut": [[363, "polars-expr-cut"]], "polars.Expr.cumprod": [[360, "polars-expr-cumprod"]], "polars.Expr.bin.contains": [[334, "polars-expr-bin-contains"]], "polars.Expr.cat.get_categories": [[341, "polars-expr-cat-get-categories"]], "polars.Expr.dt.iso_year": [[382, "polars-expr-dt-iso-year"]], "polars.Expr.cos": [[348, "polars-expr-cos"]], "polars.Expr.cumcount": [[357, "polars-expr-cumcount"]], "polars.Expr.cast": [[340, "polars-expr-cast"]], "polars.Expr.dot": [[366, "polars-expr-dot"]], "polars.Expr.clip_min": [[347, "polars-expr-clip-min"]], "polars.Expr.arr.unique": [[332, "polars-expr-arr-unique"]], "polars.Expr.dt.hour": [[379, "polars-expr-dt-hour"]], "polars.Expr.dt.cast_time_unit": [[370, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.convert_time_zone": [[372, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.datetime": [[374, "polars-expr-dt-datetime"]], "polars.Expr.dt.date": [[373, "polars-expr-dt-date"]], "polars.Expr.dt.epoch": [[378, "polars-expr-dt-epoch"]], "polars.Expr.cummax": [[358, "polars-expr-cummax"]], "polars.Expr.cum_prod": [[355, "polars-expr-cum-prod"]], "polars.Expr.dt.dst_offset": [[377, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.microseconds": [[384, "polars-expr-dt-microseconds"]], "polars.Expr.dt.is_leap_year": [[381, "polars-expr-dt-is-leap-year"]], "polars.Expr.bin.decode": [[335, "polars-expr-bin-decode"]], "polars.Expr.clip": [[345, "polars-expr-clip"]], "polars.Expr.cum_max": [[353, "polars-expr-cum-max"]], "polars.Expr.drop_nans": [[367, "polars-expr-drop-nans"]], "polars.Expr.cumulative_eval": [[362, "polars-expr-cumulative-eval"]], "polars.Expr.cot": [[350, "polars-expr-cot"]], "polars.Expr.cumsum": [[361, "polars-expr-cumsum"]], "polars.Expr.cum_sum": [[356, "polars-expr-cum-sum"]], "polars.Expr.arr.sum": [[330, "polars-expr-arr-sum"]], "polars.Expr.dt.day": [[375, "polars-expr-dt-day"]], "polars.Expr.degrees": [[364, "polars-expr-degrees"]], "polars.Expr.dt.microsecond": [[383, "polars-expr-dt-microsecond"]], "polars.Expr.arr.to_list": [[331, "polars-expr-arr-to-list"]], "polars.Expr.cum_count": [[352, "polars-expr-cum-count"]], "polars.Expr.diff": [[365, "polars-expr-diff"]], "polars.Expr.clip_max": [[346, "polars-expr-clip-max"]], "polars.Expr.ceil": [[344, "polars-expr-ceil"]], "polars.DataFrame.select": [[240, "polars-dataframe-select"]], "polars.DataFrame.transpose": [[264, "polars-dataframe-transpose"]], "polars.DataFrame.n_unique": [[220, "polars-dataframe-n-unique"]], "polars.DataFrame.to_dicts": [[256, "polars-dataframe-to-dicts"]], "polars.DataFrame.top_k": [[263, "polars-dataframe-top-k"]], "polars.DataFrame.sort": [[248, "polars-dataframe-sort"]], "polars.DataFrame.partition_by": [[222, "polars-dataframe-partition-by"]], "polars.DataFrame.row": [[235, "polars-dataframe-row"]], "polars.DataFrame.sum": [[250, "polars-dataframe-sum"]], "polars.DataFrame.schema": [[239, "polars-dataframe-schema"]], "polars.DataFrame.to_dummies": [[257, "polars-dataframe-to-dummies"]], "polars.DataFrame.unique": [[265, "polars-dataframe-unique"]], "polars.DataFrame.with_columns": [[273, "polars-dataframe-with-columns"]], "polars.DataFrame.update": [[268, "polars-dataframe-update"]], "polars.DataFrame.pipe": [[223, "polars-dataframe-pipe"]], "polars.DataFrame.rechunk": [[228, "polars-dataframe-rechunk"]], "polars.DataFrame.plot": [[225, "polars-dataframe-plot"]], "polars.DataFrame.take_every": [[253, "polars-dataframe-take-every"]], "polars.DataFrame.sum_horizontal": [[251, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.upsample": [[269, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[270, "polars-dataframe-var"]], "polars.DataFrame.unstack": [[267, "polars-dataframe-unstack"]], "polars.DataFrame.slice": [[247, "polars-dataframe-slice"]], "polars.DataFrame.shrink_to_fit": [[246, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_numpy": [[259, "polars-dataframe-to-numpy"]], "polars.DataFrame.replace_column": [[232, "polars-dataframe-replace-column"]], "polars.DataFrame.unnest": [[266, "polars-dataframe-unnest"]], "polars.DataFrame.with_columns_seq": [[274, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.reverse": [[233, "polars-dataframe-reverse"]], "polars.DataFrame.sample": [[238, "polars-dataframe-sample"]], "polars.DataFrame.quantile": [[227, "polars-dataframe-quantile"]], "polars.DataFrame.pivot": [[224, "polars-dataframe-pivot"]], "polars.DataFrame.null_count": [[221, "polars-dataframe-null-count"]], "polars.DataFrame.shift": [[244, "polars-dataframe-shift"]], "polars.DataFrame.to_init_repr": [[258, "polars-dataframe-to-init-repr"]], "polars.DataFrame.product": [[226, "polars-dataframe-product"]], "polars.DataFrame.to_struct": [[262, "polars-dataframe-to-struct"]], "polars.DataFrame.tail": [[252, "polars-dataframe-tail"]], "polars.DataFrame.vstack": [[271, "polars-dataframe-vstack"]], "polars.DataFrame.width": [[272, "polars-dataframe-width"]], "polars.DataFrame.set_sorted": [[242, "polars-dataframe-set-sorted"]], "polars.DataFrame.std": [[249, "polars-dataframe-std"]], "polars.DataFrame.to_series": [[261, "polars-dataframe-to-series"]], "polars.DataFrame.select_seq": [[241, "polars-dataframe-select-seq"]], "polars.DataFrame.to_pandas": [[260, "polars-dataframe-to-pandas"]], "polars.DataFrame.rename": [[229, "polars-dataframe-rename"]], "polars.DataFrame.rows": [[236, "polars-dataframe-rows"]], "polars.DataFrame.rolling": [[234, "polars-dataframe-rolling"]], "polars.DataFrame.shift_and_fill": [[245, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.to_arrow": [[254, "polars-dataframe-to-arrow"]], "polars.DataFrame.replace_at_idx": [[231, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows_by_key": [[237, "polars-dataframe-rows-by-key"]], "polars.DataFrame.to_dict": [[255, "polars-dataframe-to-dict"]], "polars.DataFrame.replace": [[230, "polars-dataframe-replace"]], "polars.DataFrame.shape": [[243, "polars-dataframe-shape"]], "Conversion": [[762, "conversion"]], "Parallelization": [[762, "parallelization"]], "Random": [[762, "random"]], "StringCache": [[762, "stringcache"]], "polars.n_unique": [[723, "polars-n-unique"]], "polars.reduce": [[726, "polars-reduce"]], "Input/output": [[764, "input-output"]], "CSV": [[764, "csv"]], "Feather/ IPC": [[764, "feather-ipc"]], "Parquet": [[764, "parquet"]], "Database": [[764, "database"]], "JSON": [[764, "json"]], "AVRO": [[764, "avro"]], "Spreadsheet": [[764, "spreadsheet"]], "Apache Iceberg": [[764, "apache-iceberg"]], "Delta Lake": [[764, "delta-lake"]], "Datasets": [[764, "datasets"]], "BatchedCsvReader": [[764, "batchedcsvreader"]], "polars.map_groups": [[716, "polars-map-groups"]], "polars.struct": [[733, "polars-struct"]], "polars.time": [[737, "polars-time"]], "API reference": [[763, "api-reference"]], "polars.rolling_corr": [[728, "polars-rolling-corr"]], "polars.select": [[730, "polars-select"]], "polars.rolling_cov": [[729, "polars-rolling-cov"]], "polars.LazyFrame.cast": [[769, "polars-lazyframe-cast"]], "polars.time_ranges": [[739, "polars-time-ranges"]], "polars.col": [[747, "polars-col"]], "Columns / names": [[748, "columns-names"]], "Operators": [[757, "operators"]], "Conjunction": [[757, "conjunction"]], "Comparison": [[757, "comparison"]], "Numeric": [[757, "numeric"], [302, "numeric"]], "polars.sql_expr": [[731, "polars-sql-expr"]], "polars.sum_horizontal": [[735, "polars-sum-horizontal"]], "polars.sum": [[734, "polars-sum"]], "Window": [[761, "window"]], "polars.max_horizontal": [[718, "polars-max-horizontal"]], "polars.std": [[732, "polars-std"]], "polars.LazyFrame.cache": [[768, "polars-lazyframe-cache"]], "Expressions": [[751, "expressions"]], "Name": [[756, "name"]], "polars.var": [[740, "polars-var"]], "polars.LazyFrame.bottom_k": [[767, "polars-lazyframe-bottom-k"]], "polars.tail": [[736, "polars-tail"]], "polars.max": [[717, "polars-max"]], "polars.mean": [[719, "polars-mean"]], "polars.zeros": [[742, "polars-zeros"]], "polars.median": [[720, "polars-median"]], "polars.min_horizontal": [[722, "polars-min-horizontal"]], "polars.repeat": [[727, "polars-repeat"]], "polars.min": [[721, "polars-min"]], "polars.quantile": [[725, "polars-quantile"]], "polars.ones": [[724, "polars-ones"]], "polars.map_batches": [[715, "polars-map-batches"]], "polars.time_range": [[738, "polars-time-range"]], "Meta": [[753, "meta"]], "polars.when": [[741, "polars-when"]], "polars.LazyFrame.approx_n_unique": [[766, "polars-lazyframe-approx-n-unique"]], "Data types": [[302, "data-types"]], "Nested": [[302, "nested"]], "Other": [[302, "other"]], "polars.Expr.any": [[311, "polars-expr-any"]], "polars.Expr.arg_max": [[321, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.apply": [[279, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.last": [[283, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.quantile": [[290, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.and_": [[310, "polars-expr-and"]], "polars.Expr.arr.all": [[326, "polars-expr-arr-all"]], "polars.Expr.arg_sort": [[323, "polars-expr-arg-sort"]], "polars.Expr.abs": [[305, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.map_groups": [[284, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.all": [[278, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.append": [[312, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.mean": [[286, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.head": [[282, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arr.any": [[327, "polars-expr-arr-any"]], "polars.Expr.arr.min": [[329, "polars-expr-arr-min"]], "polars.dataframe.group_by.GroupBy.count": [[280, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.max": [[285, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.approx_n_unique": [[314, "polars-expr-approx-n-unique"]], "polars.DataFrame.with_row_count": [[275, "polars-dataframe-with-row-count"]], "polars.Expr.arg_min": [[322, "polars-expr-arg-min"]], "polars.Expr.agg_groups": [[307, "polars-expr-agg-groups"]], "polars.Expr.add": [[306, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.median": [[287, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arctanh": [[320, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.min": [[288, "polars-dataframe-group-by-groupby-min"]], "polars.dataframe.group_by.GroupBy.sum": [[291, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arcsinh": [[318, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.__iter__": [[276, "polars-dataframe-group-by-groupby-iter"]], "Exceptions": [[303, "exceptions"]], "polars.Expr.apply": [[313, "polars-expr-apply"]], "polars.Expr.arccosh": [[316, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.agg": [[277, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.first": [[281, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arr.max": [[328, "polars-expr-arr-max"]], "polars.Expr.arccos": [[315, "polars-expr-arccos"]], "polars.Expr.alias": [[308, "polars-expr-alias"]], "polars.Expr.arg_true": [[324, "polars-expr-arg-true"]], "DataFrame": [[298, "dataframe"]], "polars.Expr.arctan": [[319, "polars-expr-arctan"]], "polars.Expr.arg_unique": [[325, "polars-expr-arg-unique"]], "polars.Expr.arcsin": [[317, "polars-expr-arcsin"]], "polars.dataframe.group_by.GroupBy.tail": [[292, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.n_unique": [[289, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.all": [[309, "polars-expr-all"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[61, "polars.List"]], "__init__() (polars.list method)": [[61, "polars.List.__init__"]], "null (class in polars)": [[62, "polars.Null"]], "__init__() (polars.null method)": [[62, "polars.Null.__init__"]], "object (class in polars)": [[63, "polars.Object"]], "__init__() (polars.object method)": [[63, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[64, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[65, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[68, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[69, "polars.SQLContext.unregister"]], "string (class in polars)": [[70, "polars.String"]], "__init__() (polars.string method)": [[70, "polars.String.__init__"]], "stringcache (class in polars)": [[71, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[71, "polars.StringCache.__init__"]], "struct (class in polars)": [[72, "polars.Struct"]], "__init__() (polars.struct method)": [[72, "polars.Struct.__init__"]], "time (class in polars)": [[73, "polars.Time"]], "__init__() (polars.time method)": [[73, "polars.Time.__init__"]], "uint16 (class in polars)": [[74, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[74, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[75, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[75, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[76, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[76, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[77, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[77, "polars.UInt8.__init__"]], "unknown (class in polars)": [[78, "polars.Unknown"]], "__init__() (polars.unknown method)": [[78, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[79, "polars.Utf8"]], "align_frames() (in module polars)": [[80, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[81, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[82, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[83, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[84, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[85, "polars.build_info"]], "collect_all() (in module polars)": [[86, "polars.collect_all"]], "collect_all_async() (in module polars)": [[87, "polars.collect_all_async"]], "concat() (in module polars)": [[88, "polars.concat"]], "disable_string_cache() (in module polars)": [[89, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[90, "polars.enable_string_cache"]], "arrowerror": [[91, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[92, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[93, "polars.exceptions.ComputeError"]], "duplicateerror": [[94, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[95, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[96, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[97, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[98, "polars.exceptions.PolarsPanicError"]], "rowserror": [[99, "polars.exceptions.RowsError"]], "schemaerror": [[100, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[101, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[102, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[103, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[104, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[105, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[106, "polars.from_dataframe"]], "from_dict() (in module polars)": [[107, "polars.from_dict"]], "from_dicts() (in module polars)": [[108, "polars.from_dicts"]], "from_numpy() (in module polars)": [[109, "polars.from_numpy"]], "from_pandas() (in module polars)": [[110, "polars.from_pandas"]], "from_records() (in module polars)": [[111, "polars.from_records"]], "from_repr() (in module polars)": [[112, "polars.from_repr"]], "get_index_type() (in module polars)": [[113, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[114, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[115, "polars.read_avro"]], "read_csv() (in module polars)": [[116, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[117, "polars.read_csv_batched"]], "read_database() (in module polars)": [[118, "polars.read_database"]], "read_database_uri() (in module polars)": [[119, "polars.read_database_uri"]], "read_delta() (in module polars)": [[120, "polars.read_delta"]], "read_excel() (in module polars)": [[121, "polars.read_excel"]], "read_ipc() (in module polars)": [[122, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[123, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[124, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[125, "polars.read_json"]], "read_ndjson() (in module polars)": [[126, "polars.read_ndjson"]], "read_ods() (in module polars)": [[127, "polars.read_ods"]], "read_parquet() (in module polars)": [[128, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[129, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[130, "polars.scan_csv"]], "scan_delta() (in module polars)": [[131, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[132, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[133, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[134, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[135, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[136, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[137, "polars.set_random_seed"]], "show_versions() (in module polars)": [[138, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[139, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[141, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[143, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[143, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[150, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[151, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[154, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[155, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[156, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[157, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[158, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[159, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[160, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[161, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[162, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[163, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[164, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[165, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[166, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[167, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[168, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[169, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[170, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[171, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[172, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[173, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[174, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[175, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[176, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[177, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[178, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[179, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[180, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[181, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[182, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[183, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[184, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[185, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[186, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[187, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[188, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[189, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[190, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[191, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[192, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[193, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[194, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[196, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[197, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[198, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[199, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[200, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[201, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[202, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[203, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[204, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[205, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[206, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[207, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[208, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[209, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[210, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[211, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[212, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[214, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[215, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[216, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[217, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[219, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[220, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[221, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[222, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[223, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[224, "polars.DataFrame.pivot"]], "plot (polars.dataframe property)": [[225, "polars.DataFrame.plot"]], "product() (polars.dataframe method)": [[226, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[227, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[228, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[229, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[230, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[231, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[232, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[233, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[234, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[235, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[236, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[237, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[238, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[239, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[240, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[241, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[242, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[243, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[244, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[245, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[246, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[247, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[248, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[249, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[250, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[251, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[252, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[253, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[254, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[255, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[256, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[257, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[258, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[259, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[260, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[261, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[262, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[263, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[264, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[265, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[266, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[267, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[268, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[269, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[270, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[271, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[272, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[273, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[275, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[305, "polars.Expr.abs"]], "add() (polars.expr method)": [[306, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[307, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[308, "polars.Expr.alias"]], "all() (polars.expr method)": [[309, "polars.Expr.all"]], "and_() (polars.expr method)": [[310, "polars.Expr.and_"]], "any() (polars.expr method)": [[311, "polars.Expr.any"]], "append() (polars.expr method)": [[312, "polars.Expr.append"]], "apply() (polars.expr method)": [[313, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[314, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[315, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[316, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[317, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[318, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[319, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[320, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[321, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[322, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[323, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[324, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[325, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[326, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[327, "polars.Expr.arr.any"]], "max() (polars.expr.arr method)": [[328, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[329, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[330, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[331, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[332, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[333, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[334, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[335, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[336, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[337, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[338, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[339, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[340, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[341, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[342, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[343, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[344, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[345, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[346, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[347, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[348, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[349, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[350, "polars.Expr.cot"]], "count() (polars.expr method)": [[351, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[352, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[353, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[354, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[355, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[356, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[357, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[358, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[359, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[360, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[361, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[362, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[363, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[364, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[365, "polars.Expr.diff"]], "dot() (polars.expr method)": [[366, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[367, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[368, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[369, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[370, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[371, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[372, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[373, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[374, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[375, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[376, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[377, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[378, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[379, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[380, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[381, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[382, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[383, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[384, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[385, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[386, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[387, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[388, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[389, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[390, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[391, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[392, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[393, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[394, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[395, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[396, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[397, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[398, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[399, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[400, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[401, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[402, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[403, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[404, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[405, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[406, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[407, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[408, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[409, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[410, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[411, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[412, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[413, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[414, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[415, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[416, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[417, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[418, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[419, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[420, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[421, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[422, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[423, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[424, "polars.Expr.exp"]], "explode() (polars.expr method)": [[425, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[426, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[427, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[428, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[429, "polars.Expr.filter"]], "first() (polars.expr method)": [[430, "polars.Expr.first"]], "flatten() (polars.expr method)": [[431, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[432, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[433, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[434, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[435, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[436, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[437, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[438, "polars.Expr.ge"]], "get() (polars.expr method)": [[439, "polars.Expr.get"]], "gt() (polars.expr method)": [[440, "polars.Expr.gt"]], "hash() (polars.expr method)": [[441, "polars.Expr.hash"]], "head() (polars.expr method)": [[442, "polars.Expr.head"]], "hist() (polars.expr method)": [[443, "polars.Expr.hist"]], "implode() (polars.expr method)": [[444, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[445, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[446, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[447, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[448, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[449, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[450, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[451, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[452, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[453, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[454, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[455, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[456, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[457, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[458, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[459, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[460, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[461, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[462, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[463, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[464, "polars.Expr.last"]], "le() (polars.expr method)": [[465, "polars.Expr.le"]], "len() (polars.expr method)": [[466, "polars.Expr.len"]], "limit() (polars.expr method)": [[467, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[468, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[469, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[470, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[471, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[472, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[473, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[474, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[475, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[476, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[477, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[478, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[479, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[480, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[481, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[482, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[483, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[484, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[485, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[486, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[487, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[488, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[489, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[490, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[491, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[492, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[493, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[494, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[495, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[496, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[497, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[498, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[499, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[500, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[501, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[502, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[503, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[504, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[505, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[506, "polars.Expr.log"]], "log10() (polars.expr method)": [[507, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[508, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[509, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[510, "polars.Expr.lt"]], "map() (polars.expr method)": [[511, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[512, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[513, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[514, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[515, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[516, "polars.Expr.max"]], "mean() (polars.expr method)": [[517, "polars.Expr.mean"]], "median() (polars.expr method)": [[518, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[519, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[520, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[521, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[522, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[523, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[524, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[525, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[526, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[527, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[528, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[529, "polars.Expr.min"]], "mod() (polars.expr method)": [[530, "polars.Expr.mod"]], "mode() (polars.expr method)": [[531, "polars.Expr.mode"]], "mul() (polars.expr method)": [[532, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[533, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[534, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[535, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[536, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[537, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[538, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[539, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[540, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[541, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[542, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[543, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[544, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[545, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[546, "polars.Expr.or_"]], "over() (polars.expr method)": [[547, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[548, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[549, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[550, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[551, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[552, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[553, "polars.Expr.prefix"]], "product() (polars.expr method)": [[554, "polars.Expr.product"]], "qcut() (polars.expr method)": [[555, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[556, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[557, "polars.Expr.radians"]], "rank() (polars.expr method)": [[558, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[559, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[560, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[561, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[562, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[563, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[564, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[565, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[566, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[567, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[568, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[569, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[570, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[571, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[572, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[573, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[574, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[575, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[576, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[577, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[578, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[579, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[580, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[581, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[582, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[583, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[584, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[585, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[586, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[587, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[588, "polars.Expr.sign"]], "sin() (polars.expr method)": [[589, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[590, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[591, "polars.Expr.skew"]], "slice() (polars.expr method)": [[592, "polars.Expr.slice"]], "sort() (polars.expr method)": [[593, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[594, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[595, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[596, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[597, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[598, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[599, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[600, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[601, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[602, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[603, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[604, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[605, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[606, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[607, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[608, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[609, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[610, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[611, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[612, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[613, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[614, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[615, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[616, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[617, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[618, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[619, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[620, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[621, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[622, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[623, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[624, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[625, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[626, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[627, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[628, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[629, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[630, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[631, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[632, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[633, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[634, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[635, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[636, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[637, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[638, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[639, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[640, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[641, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[642, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[643, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[644, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[645, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[646, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[647, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[648, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[649, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[650, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[651, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[652, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[653, "polars.Expr.sum"]], "tail() (polars.expr method)": [[654, "polars.Expr.tail"]], "take() (polars.expr method)": [[655, "polars.Expr.take"]], "take_every() (polars.expr method)": [[656, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[657, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[658, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[659, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[660, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[661, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[662, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[663, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[664, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[665, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[666, "polars.Expr.var"]], "where() (polars.expr method)": [[667, "polars.Expr.where"]], "xor() (polars.expr method)": [[668, "polars.Expr.xor"]], "all() (in module polars)": [[669, "polars.all"]], "all_horizontal() (in module polars)": [[670, "polars.all_horizontal"]], "any() (in module polars)": [[671, "polars.any"]], "any_horizontal() (in module polars)": [[672, "polars.any_horizontal"]], "apply() (in module polars)": [[673, "polars.apply"]], "approx_n_unique() (in module polars)": [[674, "polars.approx_n_unique"]], "arange() (in module polars)": [[675, "polars.arange"]], "arctan2() (in module polars)": [[676, "polars.arctan2"]], "arctan2d() (in module polars)": [[677, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[678, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[679, "polars.arg_where"]], "coalesce() (in module polars)": [[680, "polars.coalesce"]], "concat_list() (in module polars)": [[681, "polars.concat_list"]], "concat_str() (in module polars)": [[682, "polars.concat_str"]], "corr() (in module polars)": [[683, "polars.corr"]], "count() (in module polars)": [[684, "polars.count"]], "cov() (in module polars)": [[685, "polars.cov"]], "cum_fold() (in module polars)": [[686, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[687, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[688, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[689, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[690, "polars.cumfold"]], "cumreduce() (in module polars)": [[691, "polars.cumreduce"]], "cumsum() (in module polars)": [[692, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[693, "polars.cumsum_horizontal"]], "date() (in module polars)": [[694, "polars.date"]], "date_range() (in module polars)": [[695, "polars.date_range"]], "date_ranges() (in module polars)": [[696, "polars.date_ranges"]], "datetime() (in module polars)": [[697, "polars.datetime"]], "datetime_range() (in module polars)": [[698, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[699, "polars.datetime_ranges"]], "duration() (in module polars)": [[700, "polars.duration"]], "element() (in module polars)": [[701, "polars.element"]], "exclude() (in module polars)": [[702, "polars.exclude"]], "first() (in module polars)": [[703, "polars.first"]], "fold() (in module polars)": [[704, "polars.fold"]], "format() (in module polars)": [[705, "polars.format"]], "from_epoch() (in module polars)": [[706, "polars.from_epoch"]], "groups() (in module polars)": [[707, "polars.groups"]], "head() (in module polars)": [[708, "polars.head"]], "implode() (in module polars)": [[709, "polars.implode"]], "int_range() (in module polars)": [[710, "polars.int_range"]], "int_ranges() (in module polars)": [[711, "polars.int_ranges"]], "last() (in module polars)": [[712, "polars.last"]], "lit() (in module polars)": [[713, "polars.lit"]], "map() (in module polars)": [[714, "polars.map"]], "map_batches() (in module polars)": [[715, "polars.map_batches"]], "map_groups() (in module polars)": [[716, "polars.map_groups"]], "max() (in module polars)": [[717, "polars.max"]], "max_horizontal() (in module polars)": [[718, "polars.max_horizontal"]], "mean() (in module polars)": [[719, "polars.mean"]], "median() (in module polars)": [[720, "polars.median"]], "min() (in module polars)": [[721, "polars.min"]], "min_horizontal() (in module polars)": [[722, "polars.min_horizontal"]], "n_unique() (in module polars)": [[723, "polars.n_unique"]], "ones() (in module polars)": [[724, "polars.ones"]], "quantile() (in module polars)": [[725, "polars.quantile"]], "reduce() (in module polars)": [[726, "polars.reduce"]], "repeat() (in module polars)": [[727, "polars.repeat"]], "rolling_corr() (in module polars)": [[728, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[729, "polars.rolling_cov"]], "select() (in module polars)": [[730, "polars.select"]], "sql_expr() (in module polars)": [[731, "polars.sql_expr"]], "std() (in module polars)": [[732, "polars.std"]], "struct() (in module polars)": [[733, "polars.struct"]], "sum() (in module polars)": [[734, "polars.sum"]], "sum_horizontal() (in module polars)": [[735, "polars.sum_horizontal"]], "tail() (in module polars)": [[736, "polars.tail"]], "time() (in module polars)": [[737, "polars.time"]], "time_range() (in module polars)": [[738, "polars.time_range"]], "time_ranges() (in module polars)": [[739, "polars.time_ranges"]], "var() (in module polars)": [[740, "polars.var"]], "when() (in module polars)": [[741, "polars.when"]], "zeros() (in module polars)": [[742, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[766, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[767, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[768, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[769, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[770, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[771, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[772, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[773, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[774, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[775, "polars.LazyFrame.count"]], "deserialize() (polars.lazyframe class method)": [[776, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[777, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[778, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[779, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[780, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[781, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[782, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[783, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[784, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[785, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[786, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[787, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[788, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[789, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[790, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[791, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[792, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[793, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[794, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[795, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[796, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[797, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[798, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[799, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[800, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[801, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[802, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[803, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[804, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[805, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[806, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[807, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[808, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[809, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[810, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[811, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[812, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[813, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[814, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[815, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[816, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[817, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[818, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[819, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[820, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[821, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[822, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[823, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[824, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[825, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[826, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[827, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[828, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[829, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[830, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[831, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[832, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[833, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[834, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[835, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[836, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[837, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[838, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[839, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[840, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[850, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[852, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[853, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[854, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[855, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[856, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[863, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[863, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[863, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[863, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[863, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[863, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[863, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[863, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[863, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[863, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[863, "polars.selectors.first"]], "float() (in module polars.selectors)": [[863, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[863, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[863, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[863, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[863, "polars.selectors.matches"]], "module": [[863, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[863, "polars.selectors.numeric"]], "polars.selectors": [[863, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[863, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[863, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[863, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[863, "polars.selectors.time"]], "abs() (polars.series method)": [[865, "polars.Series.abs"]], "alias() (polars.series method)": [[866, "polars.Series.alias"]], "all() (polars.series method)": [[867, "polars.Series.all"]], "any() (polars.series method)": [[868, "polars.Series.any"]], "append() (polars.series method)": [[869, "polars.Series.append"]], "apply() (polars.series method)": [[870, "polars.Series.apply"]], "arccos() (polars.series method)": [[871, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[872, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[873, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[874, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[875, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[876, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[877, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[878, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[879, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[880, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[881, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[882, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[883, "polars.Series.arr.any"]], "max() (polars.series.arr method)": [[884, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[885, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[886, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[887, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[888, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[889, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[890, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[891, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[892, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[893, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[894, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[895, "polars.Series.cast"]], "cat (polars.series attribute)": [[896, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[897, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[898, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[899, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[900, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[901, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[902, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[903, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[904, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[905, "polars.Series.clear"]], "clip() (polars.series method)": [[906, "polars.Series.clip"]], "clip_max() (polars.series method)": [[907, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[908, "polars.Series.clip_min"]], "clone() (polars.series method)": [[909, "polars.Series.clone"]], "cos() (polars.series method)": [[910, "polars.Series.cos"]], "cosh() (polars.series method)": [[911, "polars.Series.cosh"]], "cot() (polars.series method)": [[912, "polars.Series.cot"]], "cum_max() (polars.series method)": [[913, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[914, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[915, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[916, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[917, "polars.Series.cummax"]], "cummin() (polars.series method)": [[918, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[919, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[920, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[921, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[922, "polars.Series.cut"]], "describe() (polars.series method)": [[923, "polars.Series.describe"]], "diff() (polars.series method)": [[924, "polars.Series.diff"]], "dot() (polars.series method)": [[925, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[926, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[927, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[928, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[929, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[930, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[931, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[932, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[933, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[934, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[935, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[936, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[937, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[938, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[939, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[940, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[941, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[942, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[943, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[944, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[945, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[946, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[947, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[948, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[949, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[950, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[951, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[952, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[953, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[954, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[955, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[956, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[957, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[958, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[959, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[960, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[961, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[962, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[963, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[964, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[965, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[966, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[967, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[968, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[969, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[970, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[971, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[972, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[973, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[974, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[975, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[976, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[977, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[978, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[979, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[980, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[981, "polars.Series.dtype"]], "entropy() (polars.series method)": [[982, "polars.Series.entropy"]], "equals() (polars.series method)": [[983, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[984, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[985, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[986, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[987, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[988, "polars.Series.exp"]], "explode() (polars.series method)": [[989, "polars.Series.explode"]], "extend() (polars.series method)": [[990, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[991, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[992, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[993, "polars.Series.fill_null"]], "filter() (polars.series method)": [[994, "polars.Series.filter"]], "flags (polars.series attribute)": [[995, "polars.Series.flags"]], "floor() (polars.series method)": [[996, "polars.Series.floor"]], "gather() (polars.series method)": [[997, "polars.Series.gather"]], "gather_every() (polars.series method)": [[998, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[999, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1000, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1001, "polars.Series.hash"]], "head() (polars.series method)": [[1002, "polars.Series.head"]], "hist() (polars.series method)": [[1003, "polars.Series.hist"]], "implode() (polars.series method)": [[1004, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1005, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1006, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1007, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1008, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1009, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1010, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1011, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1012, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1013, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1014, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1015, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1016, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1017, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1018, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1019, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1020, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1021, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1022, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1023, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1024, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1025, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1026, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1027, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1028, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1029, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1030, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1031, "polars.Series.len"]], "limit() (polars.series method)": [[1032, "polars.Series.limit"]], "list (polars.series attribute)": [[1033, "polars.Series.list"]], "all() (polars.series.list method)": [[1034, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1035, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1036, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1037, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1038, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1039, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1040, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1041, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1042, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1043, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1044, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1045, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1046, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1047, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1048, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1049, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1050, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1051, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1052, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1053, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1054, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1055, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1056, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1057, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1058, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1059, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1060, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1061, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1062, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1063, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1064, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1065, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1066, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1067, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1068, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1069, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1070, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1071, "polars.Series.list.unique"]], "log() (polars.series method)": [[1072, "polars.Series.log"]], "log10() (polars.series method)": [[1073, "polars.Series.log10"]], "log1p() (polars.series method)": [[1074, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1075, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1076, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1077, "polars.Series.map_elements"]], "max() (polars.series method)": [[1078, "polars.Series.max"]], "mean() (polars.series method)": [[1079, "polars.Series.mean"]], "median() (polars.series method)": [[1080, "polars.Series.median"]], "min() (polars.series method)": [[1081, "polars.Series.min"]], "mode() (polars.series method)": [[1082, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1083, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1084, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1085, "polars.Series.name"]], "nan_max() (polars.series method)": [[1086, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1087, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1088, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1089, "polars.Series.not_"]], "null_count() (polars.series method)": [[1090, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1091, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1092, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1093, "polars.Series.peak_min"]], "plot (polars.series attribute)": [[1094, "polars.Series.plot"]], "product() (polars.series method)": [[1095, "polars.Series.product"]], "qcut() (polars.series method)": [[1096, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1097, "polars.Series.quantile"]], "rank() (polars.series method)": [[1098, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1099, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1100, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1101, "polars.Series.rename"]], "replace() (polars.series method)": [[1102, "polars.Series.replace"]], "reshape() (polars.series method)": [[1103, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1104, "polars.Series.reverse"]], "rle() (polars.series method)": [[1105, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1106, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1107, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1108, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1109, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1110, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1111, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1112, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1113, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1114, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1115, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1116, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1117, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1118, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1119, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1120, "polars.Series.sample"]], "scatter() (polars.series method)": [[1121, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1122, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1123, "polars.Series.series_equal"]], "set() (polars.series method)": [[1124, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1125, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1126, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1127, "polars.Series.shape"]], "shift() (polars.series method)": [[1128, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1129, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1130, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1131, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1132, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1133, "polars.Series.sign"]], "sin() (polars.series method)": [[1134, "polars.Series.sin"]], "sinh() (polars.series method)": [[1135, "polars.Series.sinh"]], "skew() (polars.series method)": [[1136, "polars.Series.skew"]], "slice() (polars.series method)": [[1137, "polars.Series.slice"]], "sort() (polars.series method)": [[1138, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1139, "polars.Series.sqrt"]], "std() (polars.series method)": [[1140, "polars.Series.std"]], "str (polars.series attribute)": [[1141, "polars.Series.str"]], "concat() (polars.series.str method)": [[1142, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1143, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1144, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1145, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1146, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1147, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1148, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1149, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1150, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1151, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1152, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1153, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1154, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1155, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1156, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1157, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1158, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1159, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1160, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1161, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1162, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1163, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1164, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1165, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1166, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1167, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1168, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1169, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1170, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1171, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1172, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1173, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1174, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1175, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1176, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1177, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1178, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1179, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1180, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1181, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1182, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1183, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1184, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1185, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1186, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1187, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1188, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1189, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1190, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1191, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1192, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1193, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1194, "polars.Series.struct.fields"]], "json_encode (polars.series.struct attribute)": [[1195, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1196, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1197, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1198, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1199, "polars.Series.sum"]], "tail() (polars.series method)": [[1200, "polars.Series.tail"]], "take() (polars.series method)": [[1201, "polars.Series.take"]], "take_every() (polars.series method)": [[1202, "polars.Series.take_every"]], "tan() (polars.series method)": [[1203, "polars.Series.tan"]], "tanh() (polars.series method)": [[1204, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1205, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1206, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1207, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1208, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1209, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1210, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1211, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1212, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1213, "polars.Series.top_k"]], "unique() (polars.series method)": [[1214, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1215, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1216, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1217, "polars.Series.value_counts"]], "var() (polars.series method)": [[1218, "polars.Series.var"]], "view() (polars.series method)": [[1219, "polars.Series.view"]], "zip_with() (polars.series method)": [[1220, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1237, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1237, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1237, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1237, "polars.SQLContext.__init__"]]}})